#!/usr/bin/bash
# ------------------------------------------------------------------------------
# This script is part of centauri-soho, a debian deployment software that can
# setup secure systemd-boot hosts with btrfs file system. Also a samba-ad-dc and
# nfs server can be installed and hosts can be made clients or appliances.
#
#   centaurisoho        high level tool
#   setup               (this script) a helper and plugin for centaurisoho
#   installer           a helper and plugin to manage installable data
#
# These tasks are highly non-trivial and the scripts use centauritools, a tool
# collection that evolved over 20 years and that is based on centauri-bash-lib
# library. The system configuration data is kept in a repository.
#
# The tools, the library and the framework are extracted from a 'seed' tar in
# setup step 1 by running the installer script.
# ------------------------------------------------------------------------------

SOHO_SETUP=                             # flag for 'setup.conf' loading

# understand some options
case "$1" in
--config)   SOHO_SETUP=0 ; shift ;;     # for centaurisoho to load 'setup.conf'
--source)   SOHO_SETUP=1 ; shift ;;     # ...              to run installation
-h|--help)  SOHO_SETUP=2 ; shift ;;
esac

if [ "$SOHO_SETUP" != 0 ] ; then
    # set umask to give created files a default 0644 mode
    umask 022

    # dpkg should not ask questions
    export DEBIAN_FRONTEND='noninteractive'

    # private data
    DAT_VERSION='0.10'
    DAT_PERSIST='/var/lib/centauri'     # centauri persistent storage
    DAT_RASPI=                          # raspberry pi flag
    DAT_REPOSITORY=                     # repository path
    DAT_SEED='seed.tgz'                 # the seed tar
    DAT_SEED_OK=                        # flag in checkSeed()
    DAT_STATE_PATH='.state/setup'       # folder for state management
    DAT_SWAP=                           # swap partition size
    DAT_ONLINE=                         # flag for network being online
    DAT_CLONE_SVR=                      # clone as server flag, see cloneName()
fi

# ------------------------------------------------------------------------------
# configurable names, the actual settings are loaded later from: setup.conf
# ------------------------------------------------------------------------------

    # see comments in setup.conf for more information

SOHO_DISTRO=                        # the (debian) dist nickname
SOHO_CONFIG=                        # site configuration
SOHO_SONAME=                        # default host name prefix

SOHO_SERVER=                        # primary server name
SOHO_SECOND=                        # secondary server name
SOHO_GENAME=                        # generic server name

SOHO_NAMES_X86=                     # default target system names
SOHO_NAMES_RPI=

SOHO_DOMAIN=                        # domain name
SOHO_DOMUSR=                        # domain test user

SOHO_APT_PROXY=                     # apt proxy
SOHO_NET_BASE=                      # network base address/mask
SOHO_NET_WLAN=                      # wlan ssid
SOHO_NET_APNT=                      # wlan ssid for host access point
SOHO_NET_EXTERN=                    # external base address/mask

SOHO_HASS=                          # override homeassistant version
SOHO_REPO_OPTS=                     # for centauriconfig OPTIONS file

    # derived from setup.conf but not part of it

SOHO_DNAME=                         # 1st part of domain name

    # other ...

declare SOHO_HOST                   # target host name
declare SOHO_PLATFORM               # set by centaurisoho

# ------------------------------------------------------------------------------
# set working folder, some more global variables, load configuration file
# ------------------------------------------------------------------------------

DAT_SELF="${0##*/}"                 # the name of this script

# change to the installation folder if not run as './<name>"'
[ "$BASH_SOURCE" != "./$DAT_SELF" ] && cd -- "${BASH_SOURCE%/*}"

# load the configuation files if we can
[ -r './setup.conf' ] && source './setup.conf'
[ -r "$CEN_ROOT/default/centaurisoho" ] && source "$CEN_ROOT/default/centaurisoho"

# generate defaults for things that are not in setup.conf
: ${SOHO_DISTRO:='bookworm'}
: ${SOHO_DOMAIN:='soho.home'}
: ${SOHO_DNAME:=${SOHO_DOMAIN%%.*}}
: ${SOHO_CONFIG:=$SOHO_DNAME}
: ${SOHO_SONAME:='machine'}
: ${SOHO_GENAME:=$SOHO_SONAME}
: ${SOHO_SERVER:=${SOHO_GENAME}0}
: ${SOHO_SECOND:=${SOHO_GENAME}1}
: ${SOHO_NET_WLAN:=${SOHO_DNAME^}}
: ${SOHO_NET_APNT:=${SOHO_NET_WLAN}-AP}
: ${SOHO_NET_BASE:='10.10.0.0/21'}
: ${SOHO_NET_PUBLIC:="$SOHO_DNAME.mydyndns.org"}
: ${SOHO_ROUTERS:='router'}
: ${SOHO_NET_ROUTER_DEF:="${SOHO_ROUTERS[1]:-"${SOHO_ROUTERS}0"}"}
: ${SOHO_NET_ROUTER_IP4:="${SOHO_NET_BASE%.*}.1"}

# default names for clones, pc and raspi ...
[ -z "$SOHO_NAMES_X86" ] && SOHO_NAMES_X86=(
    "$SOHO_SONAME"8 "$SOHO_SONAME"6 "$SOHO_SONAME"4 "$SOHO_SONAME"2 "$SOHO_SONAME"0)
[ -z "$SOHO_NAMES_RPI" ] && SOHO_NAMES_RPI=(
    "$SOHO_SONAME"9 "$SOHO_SONAME"7 "$SOHO_SONAME"5 "$SOHO_SONAME"3 "$SOHO_SONAME"1)

# execution continues in a dispatcher at the very end of this script
[ "$SOHO_SETUP" = 0 ] && return     # load conf only

# ------------------------------------------------------------------------------
# checkBoot make sure that /boot/efi is mounted
# ------------------------------------------------------------------------------
checkBoot() {
    [ -h '/boot/efi' ] || return 0                  # no soho efi boot
    [ -d '/boot/firmware/overlays' ] && return 0    # is mounted (raspi)
    [ -e '/boot/efi/EFI' ] && return 0              # is mounted
    [ -e '/boot/efi/efi' ] && return 0              # is mounted
    [ -e '/boot/efi/BOOT' ] && return 0             # is mounted
    [ -e '/boot/efi/boot' ] && return 0             # is mounted
    folder -f -m '/mnt/boot'                        # must exist
    system -e -p mount -L "${SOHO_HOST}_boot" '/mnt/boot' && return 0
    quitOnError "Access to '/boot/efi' is madatory for initramfs updates"
}

# ------------------------------------------------------------------------------
# check for previous installation: <what> [<hdr>|true|false]       CEN_OPT_FORCE
# ------------------------------------------------------------------------------
checkInstalled() {
    case "$2" in
    true)   quitOnError
            create -f -- "$DAT_STATE_PATH-$1-done" ; return 0 ;;
    false)  remove -- "$DAT_STATE_PATH-$1-done" ; return 0 ;;
    esac

    [ -n "$CEN_OPT_FORCE" ] && return 1
    [ -e "$DAT_STATE_PATH-$1-done" ] || return 1
    [ -n "$2" ] && printHeader "$2"
    return 0
}

# ------------------------------------------------------------------------------
# must have primary server data
# ------------------------------------------------------------------------------
checkRepository() {
    [ -d "$DAT_REPOSITORY/$SOHO_SERVER" ] && return 0
    if ! matchpath -d -o -- "$DAT_REPOSITORY"/[a-z]*[01] ; then
        quitOnError "No server config in repository:" "$DAT_REPOSITORY/$SOHO_SERVER"
    elif confirm -f -y "Use repository '%s' folder as server '%s'" \
                 "${CEN_MATCHPATH##*/}" "$SOHO_SERVER" ; then
        rename -- "$CEN_MATCHPATH" "$DAT_REPOSITORY/$SOHO_SERVER" && return 0
    fi
    quit -a -u
}

# ------------------------------------------------------------------------------
# step 0: install the seed tar, get architecture: [-i|-n]
#
# Options:  -i  run installer and exit
#           -n  run installer and return
# ------------------------------------------------------------------------------
checkSeed() {

    # centaurisoho may call us multiple times, ignore all but 1st
    [ -n "$DAT_SEED_OK" ] && return ; DAT_SEED_OK=1

    # we must have a seed tar
    if [ ! -e "$DAT_SEED" ] ; then
        echo "$DAT_SELF: Missing seed tar:" "$PWD/$DAT_SEED" ; exit 1
    fi

    # install the seed tar
    if [ "$1" = '-i' -o "$1" = '-n' ] || [ "$DAT_SEED" -nt '.timestamp' ] ; then
        if [ ! -x './installer' ] ; then        # check for our installer helper
            echo "$DAT_SELF: Missing 'installer' tool" ; exit 1
        fi
        if [ "$1" = '-i' ] ; then
            shift ; . ./installer ; exit $?
        else
            . ./installer install || exit $?
        fi
        # remove uglified sources to avoid some strange update complications
        rm -r -f $CEN_ROOT/library/_*.[dp]
    fi

    # 'centaurisoho' must exist to allow installation
    if [ ! -x '/usr/local/bin/_centauri_bash_lib' ] ||
       [ ! -e "$CEN_ROOT/default/centaurisoho" ] ; then
        echo "$DAT_SELF: Cannot continue (did you run 'installer install'?)"
        exit 2
    fi
    [ "$1" = '-n' ] && return 0

    # --------------------------------------------------------------------------
    # now load centauri-bash-lib (but not if run by centaurisoho)
    # --------------------------------------------------------------------------
    if [ -z "$CEN_NAME" ] ; then                    # we are stand alone ...
        PATH+=":${0%/*}" . _centauri_bash_lib -a - '0.00:4' || exit 2
        console -m 1                                # enable fancy output
    fi

    # to protect the development system ...
    [ -e "$CEN_ROOT/tools/utilities" ] &&
        quit -e "Cannot install 'centaurisoho' on this system"

    if [ "${DAT_STATE_PATH::1}" != '/' ] ; then         # create state folder ...
        folder -f -m "${DAT_STATE_PATH%/*}"
        DAT_STATE_PATH="$PWD/$DAT_STATE_PATH"           # absolute path
        trace -a -c "state folder" "${DAT_STATE_PATH%/*}"
    fi

    # check SOHO_DISTRO and SOHO_SERVER against repository
    copyFromRepo -r || quitOnError
    checkInstalled 'step2' && repoOptions               # create OPTIONS file

    # we badly need our services file for centaurinetcfg
    copyFromRepo /etc/services

    # apt may run update-initrd which needs a lot of temp storage...
    [ -d '/run/user/0' ] &&
        system -e -p -- mount -o remount,size=1G,noatime /run/user/0
}

# ------------------------------------------------------------------------------
# get the name of next clone
#
# call:     (1) cloneName                  # test: not yet cloned
#           (2) cloneName -c [<name>]      # get next name, set SOHO_HOST
#           (3) cloneName -n vres <indx>   # get name from list by index
# ------------------------------------------------------------------------------
cloneName() {
    case "$1" in
    -c) case "$2" in
        $SOHO_SERVER)
            confirm -y "Create the primary server '$2'" || quit -a -u
            DAT_CLONE_SVR=1 ;;
        $SOHO_SECOND)
            confirm -y "Create the secondary server '$2'" || quit -a -u
            DAT_CLONE_SVR=1 ;;
        *)  if [ "${2:--}" = '-' ] ; then
                cloneName -n SOHO_HOST 2
                if [ "$SOHO_HOST" = "$HOSTNAME" ] || checkInstalled 'base' ; then
                    cloneName -n SOHO_HOST 3
                fi
            fi
            confirm -y "Sure to clone this system as '$SOHO_HOST'" || quit -a -u ;;
        esac
        # this is because we use volume labels for mount ...
        [ "$2" = "$HOSTNAME" ] &&
            quit -e -p "Cannot name target '%s', specify a different host name" "$2"
        ;;
    -n) if [ -e '/boot/firmware' -a "$DAT_RASPI" != 0 ] || [ "${DAT_RASPI:-0}" -gt 0 ] ; then
            printf -v "$2" "${SOHO_NAMES_RPI[$3-1]}"
        else
            printf -v "$2" "${SOHO_NAMES_X86[$3-1]}"
        fi
        ;;
    *)  checkInstalled 'step2' && return 1 || return 0
    esac
}

################################################################################
############ Begin of the customized part of the 'setup' script ################
################################################################################

# set by workDispatch
declare -g DAT_SEED DAT_DISK DAT_WHAT DAT_DESK  # the 1st invocation argument
                                                # override network mode in step 3
declare -g DAT_MODE_OVERRIDE="$DAT_PERSIST/centauriswitch-override"
declare -g DAT_PASSWD                           # set by passwordFromFile
declare -g DAT_PASSLST                          # internal to passwordFromFile

# ------------------------------------------------------------------------------
# helper functions
# ------------------------------------------------------------------------------

# write a minimal apt configuration, set proxy
configureApt() {
    local hasp='-' prox dflt arch
    if [ -e '/etc/apt/apt.conf' ] ; then
        txtgrep -i - -m -s hasp -y "*Acquire::http::Proxy*" <'/etc/apt/apt.conf'
    fi
    if [ "${SOHO_APT_PROXY:--}" != '-' ] ; then
        prox="Acquire::http::Proxy \"http://$SOHO_APT_PROXY:3128\";"
        dflt='-n'
    else
        prox="# Acquire::http::Proxy \"http://$SOHO_SERVER.$SOHO_DOMAIN:3128\";"
        dflt='-y'
    fi
   # [ "$hasp" = "$prox" ] && return 0           # proxy setting is current

    [ "$SOHO_PLATFORM" = 'r32' ] && arch='APT::Architecture "armhf";'

    folder -m '/etc/apt'
    create -c -- '/etc/apt/apt.conf' <<!EOF
# simple temporary apt config for centauri-soho setup

# ATTENTION: make sure that you specify an ip address or that the server
#            is defined in '/etc/default/centaurinetcfg'. Your '/etc/hosts'
#            and '/etc/resolv.conf' will be replaced during setup ...
$prox

Acquire::Languages "none";
$arch
APT::Install-Recommends "false";
APT::Install-Suggests "false";
!EOF
    checkInstalled 'aptconf' true
    confirm -b $dflt "Edit 'apt' configuration (to set a proxy)" || return 0
    system -e -r -- editor '/etc/apt/apt.conf'
}

# configure client/server certs: [-c|-s]
configureCertificates() {
    # get at least rid of symlinks
    remove '/etc/ssl/certs/clientcrt.pem' '/etc/ssl/private/clientcrt.key' \
           '/etc/ssl/certs/servercrt.pem' '/etc/ssl/private/servercrt.key'

    local spem='/etc/ssl/certs/ssl-cert-snakeoil.pem'
    local skey='/etc/ssl/private/ssl-cert-snakeoil.key'

    if [ -z "$1" ] ; then                       # base mode, no real certs
        symlink -n "$spem" '/etc/ssl/certs/clientcrt.pem'
        symlink -n "$skey" '/etc/ssl/private/clientcrt.key'
        symlink -n "$spem" '/etc/ssl/certs/servercrt.pem'
        symlink -n "$skey" '/etc/ssl/private/servercrt.key'
        return
    fi

    # server/client must have a CA certificate
    copyFromRepo /etc/ssl/openssl.cnf
    copyFromRepo /etc/ssl/certs/${SOHO_CONFIG^}_CA.pem - \
                 /etc/ssl/certs/${SOHO_DNAME^}_CA.pem

    # for a server the key *MUST* be in the repository
    if [ "$1" = '-s' ] ; then
        spem='/etc/ssl/certs/servercrt.pem'
        skey='/etc/ssl/private/servercrt.key'
        copyFromRepo "$spem" ; attributes -m 644 "$spem"
        copyFromRepo "$skey" ; attributes -m 640 -o root:ssl-cert "$skey"
        symlink -n "$spem" '/etc/ssl/certs/clientcrt.pem'
        symlink -n "$skey" '/etc/ssl/private/clientcrt.key'
    fi

    # a client otionally has a certificate or generates a dummy
    if [ "$1" = '-c' ] ; then
        if copyFromRepo /etc/ssl/certs/clientcrt.pem - - ; then
            spem='/etc/ssl/certs/clientcrt.pem'
            skey='/etc/ssl/private/clientcrt.key'
            copyFromRepo "$spem" ; attributes -m 644 "$spem"
            copyFromRepo "$skey" ; attributes -m 640 -o root:ssl-cert "$skey"
        else
            system -e -p -- make-ssl-cert generate-default-snakeoil --force-overwrite
            symlink -n "$spem" '/etc/ssl/certs/clientcrt.pem'
            symlink -n "$skey" '/etc/ssl/private/clientcrt.key'
        fi
        symlink -n "$spem" '/etc/ssl/certs/servercrt.pem'
        symlink -n "$skey" '/etc/ssl/private/servercrt.key'
    fi

    attributes -m 644 /etc/ssl/certs/${SOHO_DNAME^}_CA.pem "$spem"
    attributes -m 710 -o root:ssl-cert /etc/ssl/private
    attributes -m 640 -o root:ssl-cert "$skey"
    system -e -p -- update-ca-certificates
}

# setup Home Assistant
configureHass() {
    printHeader "Install Home Assistant Core"

    packagesInstall hass
    local vers ; [ -n "$SOHO_HASS" ] && vers="--version='$SOHO_HASS'"
    embed -t -v -y centaurihass $vers install
    quitOnError
    outputMessage 'hass'
}

# setup locale-gen localepurge and the en_SE dummy locale
#
#   1.  tzdata          -
#   2.  locales         locales-done
#   3.  localepurge     localepurge-done
#
configureLocales() {
    local havc havl
    if [ -e '/etc/locale.nopurge.off' ] ; then          # done by 'installer prep' ...
        checkInstalled 'locales' true ; checkInstalled 'localepurge' true
        move -q '/etc/locale.nopurge.off' '/etc/locale.nopurge' ; return
    elif checkInstalled 'localepurge' "Configure locales and localepurge" ; then
        checkInstalled 'locales' && return
    else
        if system -q -c localepurge ; then
            warning -m "The 'localepurge' tool is installed and if not properly configured" \
                    "it may accidentially remove locale data that will be difficult to get back!"
            havl=1
        else
            message -m "The 'localepurge' tool is not installed. To install it later run:" \
                    "'apt install localepurge'. To install it is highly recommended."
        fi
        message -i
    fi

    if confirm -n -b "Configure your locale settings now" ; then
        DEBIAN_FRONTEND=dialog system -e -t dpkg-reconfigure tzdata
        DEBIAN_FRONTEND=dialog system -e -t dpkg-reconfigure locales
        if [ -n "$havl" ] ; then
            # hide current config to avoid confusing config question
            move -q '/etc/locale.nopurge' '/etc/locale.nopurge.off'
            DEBIAN_FRONTEND=dialog system -e -t dpkg-reconfigure localepurge
            # config does not recreate nopurge
            [ -e '/etc/locale.nopurge.ucf-dist' -a ! -e '/etc/locale.nopurge' ] &&
                move '/etc/locale.nopurge.ucf-dist' '/etc/locale.nopurge'
        fi
        checkInstalled 'localepurge' true
    else
        havc=1
    fi
    if [ -n "$havl" -a -e '/etc/locale.nopurge' ] ; then
        system -e -p -t -- sed --in-place --expression \
            "s/^#DONTBOTHERNEWLOCALE/DONTBOTHERNEWLOCALE/" '/etc/locale.nopurge'
    fi
    [ -n "$havc" ] && return

    # generate en_SE if needed, add it to nopurge
    while : ; do
        system -c locale localedef || break
        local aloc
        sysrun -a aloc -q -- locale -a || break
        listsearch -i aloc -- 'en_SE.utf8' && break
        message -a "Generating 'en_SE' dummy locale"
        sysrun -q -- localedef -f UTF-8 -i en_US en_SE.UTF-8
        break
    done

    checkInstalled 'locales' true
    [ -e '/etc/locale.nopurge' ] || return      # not using localepurge
    local sadd='en_SE.UTF-8'                    # string a append ...
    txtgrep -m -y "en_SE*" -i - <'/etc/locale.nopurge' ||
        create -a -v sadd -- '/etc/locale.nopurge'
}

# modify /etc/fstab for centaurimounter
configureMounter() {
    [ '/etc/fstab' -ef '/etc/fstab.static' ] && return
    printHeader "Update '/etc/fstab' for use with 'centaurimounter'"

    [ -r '/etc/fstab' ] || quitOnError "Cannot read:" '/etc/fstab'
    local fori fmnt fxxx data=(
        "# This '/etc/fstab' contains only static mounts that should not be handled"
        "# by centaurimounter.  To disable the automatic fstab configuration and/or"
        "# using centaurimounter make '/etc/fstab' a symlink to '/etc/fstab.static'."
        ''
    )
    while read fori fmnt fxxx ; do
        [ "${fori:-#}" = '#' ] && continue
        case "$fmnt" in
        /)              data+=("$fori  /               $fxxx") ;;
        /home)          data+=("$fori  /home           $fxxx") ;;
        /boot/firmware) data+=("$fori  /boot/firmware  $fxxx") ;;
        esac
    done <'/etc/fstab'
    data+=('' '# end')
    rename -f -b 'static' '/etc/fstab' || return
    create -v data -t -- '/etc/fstab' || return

    # enable centaurimounter
    copyFromRepo /etc/default/centaurimounter       # need nfs-common
    system -e -p -t -- systemctl enable $CEN_ROOT/systemd/system/centaurimounter.service
    system -e -p -t -- systemctl restart centaurimounter
}

# apply password default, message to users, shell window
configurePasswords() {
    checkInstalled "pw-$DAT_WHAT" && return
    printHeader "Setting passwords (see /etc/default/centauriusers)"

    if ! netquery server ; then
        embed -t -v centauriswitch local
        [ -e '/etc/samba/smb.conf.local' ] &&
            symlink -f -m '/etc/samba/smb.conf.local' '/etc/samba/smb.conf'
    fi
    embed -t -v centaurisecrets secrets 'passwords' -- init # set passwords from seed file
    netquery server || embed -t -v centauriswitch --force auto
    embed -t -v centauriusers --seed='passwords' --silent linux
    checkInstalled "pw-$DAT_WHAT" true

    echo
    confirm -b -n "Open a terminal window to change passwords" || return
    outputMessage 'passwords'
    tmpfile && create -t -c -h - -- "$CEN_TMPFILE" <<!EOF
alias clh='centaurihelp -L'
alias cth='centaurihelp -T'
#PS1="\033[7m$CEN_NAME\033[0m \w$ "
PS1="$CEN_NAME \w$ "
!EOF
    system -r -e -g 136 -- bash --rcfile "$CEN_TMPFILE"
}

# setup WeeWx
configureWeewx() {
    printHeader "Install WeeWx Daemon"

  #  packagesInstall hass
    local vers ; [ -n "$SOHO_WEEWX" ] && vers="--version='$SOHO_WEEWX'"
    embed -t -v -y centauriweewx $vers install
    quitOnError
    outputMessage 'weewx'
}

# configure wpa_supplicant and hostapd (after hostname change): [<root>]
configureWLAN() {
    local stat sfil="$DAT_STATE_PATH-wlan-done"
    local fwpa='/etc/wpa_supplicant/wpa_supplicant.conf'
    local opts=(--force --plain) curr="$PWD"

    if [ -z "$1" ] ; then                           # not called from step2
        readline -e -i "$sfil" -s stat
        [ "$stat" = "$SOHO_HOST" ] && return 1
        printHeader "Configure WLAN (${SOHO_NET_WLAN:--})"
    elif [ "$1" = '.' ] ; then
        [ -s "$1$sfil" ] || return 1                # not yet configured
        printHeader "Reconfigure WLAN (${SOHO_NET_WLAN:--})"
    fi

    passwordFromFile 'wlanpsk'                      # wlan config
    remove -- "$1$sfil"                             # remove state
    folder -f -m -- "$1/etc/wpa_supplicant"
    folder -f -m -- "$1/etc/hostapd"

    if [ "${SOHO_NET_WLAN:--}" != '-' ] ; then
        remove -- "$1$fwpa"                         # re-created as symlink
        opts+=(wpasupp "$SOHO_NET_WLAN" "$DAT_PASSWD")
    else
        warning "WLAN configuration is disabled"
    fi

    if [ "${SOHO_NET_APTN:--}" != '-' ] ; then
        opts+=(-- hostapd "$SOHO_NET_APNT" "$DAT_PASSWD")
    fi

    if [ -n "$1" ] ; then
        folder -c -f -- "$1"
        embed -t -v centaurinetgen --output='.' "${opts[@]}"
        folder -c -f -- "$curr"
    else
        embed -t -v centaurinetgen "${opts[@]}"     # create configs
    fi
    error -t || return 1
    writeline -e -o "$1$sfil" -t "$SOHO_HOST"       # return status
}

# register an issue to configure the keyboard: [<base>]
issueKeyboard() {
    local base
    if [ -n "$1" ] ; then
        base="$1"
    elif [ -e "$DAT_STATE_PATH-locales-done" ] ; then   # explicit check to ignore --force
        return
    fi
    base+="$CEN_ROOT/persistent/issue.d"
    folder -m "$base"
    create -c "$base/keyboard" 775 <<!EOF
#!$BASH
dpkg-reconfigure keyboard-configuration
!EOF
}

# install packages for client and server, configure basic samba
packagesCommon() {
    checkInstalled 'samba' && return 0
    printHeader "Configure Basic Samba"

    copyFromRepo    /etc/samba/nmbd.conf
    copyFromRepo    /etc/samba/smb.conf.client
    copyFromRepo -l /etc/samba/smb.conf.local      /etc/samba/smb.conf
    copyFromRepo    /etc/samba/smbpass.conf.client
    copyFromRepo -l /etc/samba/smbpass.conf.local  /etc/samba/smbpass.conf
    copyFromRepo    /etc/samba/smbusers
    copyFromRepo    /etc/samba/services.conf
    folder -m /var/log/samba                        # samba logs go here (if any)

    packagesInstall 'common'

    copyFromRepo    /etc/openvpn/README
    copyFromRepo -l "/etc/openvpn/client/$SOHO_DNAME/client.conf" "/etc/openvpn/client-$SOHO_DNAME.conf"
    remove -q --    /etc/openvpn/update-resolv-conf

    copyFromRepo    /etc/default/centaurisecrets    # init $CEN_ROOT/secrets
    embed -t -v centaurisecrets secrets 'passwords' -- init
    error -t || return 1                            # return on error

    # this was for 'base' only. This service gets started via centauri-network
    remove -q -- /etc/systemd/system/multi-user.target.wants/lightdm-xdmcp.service
    remove -q -- /etc/systemd/system/multi-user.target.wants/inetd.service
    # create network neigbourhood folder
    shortpath -n path network && folder -m -- "$CEN_SHORTPATH"

    copyFromRepo /etc/default/nfs-common            # init $CEN_ROOT/secrets

    checkInstalled 'samba' true ; return 0
}

# install gui packages (used by step base/client/server)
packagesGUI() {
    local cdir='/usr/share/xsessions'
    local ligh="$cdir/lightdm-xsession.desktop"

    if ! checkInstalled 'gui' ; then
        local flgs
        [ $# = 0 ] && flgs='-n -b' || flgs='-y'
        confirm $flgs "Install a minimal set of GUI tools, including VNC" || return

        printHeader "Install a minimal set of GUI tools"
        packagesInstall 'gui'

        copyFromRepo /etc/default/centauridisplay
        copyFromRepo /etc/lightdm/lightdm-xdmcp.conf
        copyFromRepo /etc/X11/Xmodmap
        copyFromRepo /etc/X11/xinit/xinitrc
        copyFromRepo /etc/X11/Xreset.d/50centauri
        copyFromRepo /etc/X11/Xsession.d/60centauri
        copyFromRepo /etc/pam.d/lightdm
        copyFromRepo "$cdir/centauri.desktop"
        quitOnError                                 # quit after error

        if ! checkInstalled 'viewer' ; then
            message -i
            if confirm -b "Install a browser/viewer for HTML Documentation and Web" ; then
                printHeader "Install browser and generate HTML documentation"
                packagesInstall 'viewer'
                checkInstalled 'viewer' true
                embed -t centaurihelp --delete --generate=all --yes
            fi
        fi
    fi

    # configure display manager: gui|kde|lxqt
    [ ! -e "$ligh.default" ] && [ -e "$ligh" ] && move "$ligh" "$ligh.default"
    case "$1" in
    kde)    symlink -n "${ligh##*/}.default" "$ligh" ;;
    lxqt)   symlink -n "${ligh##*/}.default" "$ligh" ;;
    *)      symlink -n "centauri.desktop" "$ligh"
    esac

    checkInstalled 'gui' true
}

# get a password from file: <name> (return: DAT_PASSWD)
passwordFromFile() {
    if [ -z "$DAT_PASSLST" ] ; then
        configfile -v -r DAT_PASSLST -n './passwords' || quitOnError
    fi
    local item
    for item in "${DAT_PASSLST[@]}"  ; do
        if [[ "$item" == $1=* ]] ; then
            DAT_PASSWD="${item#*=}" ; return
        fi
    done
    error "Name '$1' is missing in password file" ; quitOnError
}

# install packages via apt: [-u] <what>
packagesInstall() {
    if [ -z "$DAT_ONLINE" ] ; then
        if ! waitForNetwork ; then
            configureApt ; quitOnError
        fi
    fi
    DAT_ONLINE=1

    local updt='--update=2'
    [ "$1" = '-u' ] && { updt='--update=1' ; shift ; }
    sysfind -q 'eatmydata' && updt+=' --nosync'
    local what="packages/$1"
    [ -n "$DAT_RASPI" ] && [ -e "$what-raspi" ] && what+='-raspi'
    trace -c "Install packages" "$what"
    embed -t -v centauripackage -s $updt --install --apt --library --development --yes "$what"
    quitOnError                                     # quit after error
    message -i
}

# simple helper to update passwords: <user> <dflt>

# a function to output printHeader text
printHeader() {
    quitOnError                                     # quit after error
    message -i " " ; message -d bold "=== $1 ===" ; message -i
    CEN_AUTOIND=
}

# using centauri-bash-lib 'error -t' to stop running after an errro was reported
quitOnError() {
    [ -n "$1" ] && error -- "$*"
    error -t && return
    quit -e -m "Cannot continue after error, please fix the problem and re-run '$CEN_NAME'." \
               "This tool works incrementally and can be started repeatedly without causing harm."
}

# set/clear CEN_OPT_GLOBAL, remove orphans: [-c|-s]
removeSetupFiles() {
    [ -z "$DAT_NOT_LAST" ] || return            # set by centaurisoho if more cmds follow

    printHeader "Cleaning Up"

    [ -e "$DAT_SEED" ] || quit -e "Found no '$DAT_SEED', nothing to remove"

    # we temporarily disabled NM, now reenable if configured in centaurinetcfg ...
    local item
    if [ "$CEN_NET_ADDR_METHOD" = 'nm' ] ; then
        item=1
    elif [ "$CEN_NET_ADDR_METHOD" = 'auto' ] ; then
        [ "${#CEN_NET_ADDR_IPLIST[@]}" -gt 1 ] && item=1
    fi
    if [ -n "$item" ] ; then
        message "Enabling 'NetworkManager' service"
        for item in 'NetworkManager' 'NetworkManager-wait-online' 'ModemManager' 'wpa_supplicant' ; do
            item="/etc/systemd/system/$item.service"
            [ "$item" -ef '/dev/null' ] && remove "$item"
        done
        system -e -p -- systemctl enable NetworkManager
    fi
    remove -- "$DAT_MODE_OVERRIDE"*             # no longer override centauiswitch=xxx

    # for a server we set --global via OPTIONS file to keep all machine private folders
    folder -f -m "$DAT_REPOSITORY/$SOHO_HOST"
    local data="CEN_OPT_GLOBAL=" role='workstation'
    [ "$1" = '-s' ] && { data+='1' ; role='primary' ; }

    ### TODO implement CEN_OPT_DOMAIN to allow renaming the repository
    if [ -z "$SOHO_REPO_OPTS" ] ||
        confirm -y "Replace custom repository OPTIONS with defaults" ; then
        create -t -v data -- "$DAT_REPOSITORY/$SOHO_HOST/OPTIONS"
    fi

    embed -t -v centauriconfig --yes --quiet --role="$role" \
                               cleanup -- get grub.cfg -- get fstab -- get '*_*_key'
    embed -t -v centauriconfig --yes --quiet --role="$role" --override=0 get
    quitOnError

    confirm -n -b "After completing an installation all setup data should be removed" || return
    local curr="$PWD"
    folder -c -f ..
    remove -d -q -- "$curr" "$curr.tgz"
    quit -a "Done"
}

# add OPTIONS to repository folder
repoOptions() {
    # folder that centauriconfig cowardly does not create
    folder -f -m "$CEN_ROOT/backup/$SOHO_DISTRO"
    local data repo="$DAT_REPOSITORY/$HOSTNAME"
    folder -f -m -- "$repo"

    if [ -n "$SOHO_REPO_OPTS" ] ; then          # centauriconfig OPTIONS file
        data="${SOHO_REPO_OPTS// /$'\n'}"
        create -v data -- "$repo/OPTIONS"
    elif cloneName ; then
        create -c -- "$repo/OPTIONS" <<!EOF
CEN_OPT_MASTER=1
CEN_OPT_ROLE=workstation
CEN_OPT_DOMAIN=$SOHO_CONFIG
!EOF
    fi
    data=
    trimjoin -s data -m - -- "           opts: $SOHO_REPO_OPTS"
    trace -m "Repository path: $repo" "$data" ''
}

# check if server network is configured correctly: [<server>]
serverNetwork() {
    local host="${1:-$HOSTNAME}"                # server to be setup
    netconfig                                   # load config if not yet loaded
    if ! [ "$host" = "${CEN_NET_SERVERS[0]}" -o "$host" = "${CEN_NET_SERVERS[1]}" ] ; then
        error "This computer is not configured as a server" ; return
    fi
    netoption dns "$host" || error "Servers must provide DNS, see 'option dns'"
    netoption static "$host" && return
    netoption apoint "$host" && return
    error "Servers need static IP, see 'option static' or 'option apoint'"
}

# if if AD/DC service is running: <port> <wait> <mesg>
testActiveAdDc() {
    local tslp
    for tslp in 1 0 1 1 1 1 1 1 1 1 2 ; do
        system -q -- systemctl is-active 'samba-ad-dc' && break
        [ "$tslp" = 2 ] && quitOnError "Service samba-ad-dc is not running any more"
        [ "$tslp" = 0 ] && message "Wait for samba-ad-dc to become ready (port $1)"
        timer -w 2
    done
                                                # wait for port, return status
    embed -t -v centauriroute wait 127.0.0.1 "$1" "$2" "samba-ad-dc: $3"
}

# ------------------------------------------------------------------------------
# step1 - install some files
# ------------------------------------------------------------------------------
setupStep1() {
    # resuming setup?
    if matchpath -o -e -- "$DAT_STATE_PATH"-*-done ; then
        printHeader "Welcome back to setup"
        if confirm -b -n "Reset state and run a full setup again" ; then
            remove -- "$DAT_STATE_PATH"-*-done
        else
            remove -- "$DAT_STATE_PATH"-*-aptconf
        fi
    else
        printHeader "Step 1: Preparing the boostrap system"
        message "This tool can safely be stopped with ^C at any time and can be restarted later"
    fi

    configureLocales

    # at this point we should still have the init sources.list
    printHeader "Install some packages"

    checkInstalled 'aptconf' || configureApt        # also set proxy
    packagesInstall -u 'step1'                      # do apt update and install

    confirm -y "Add some firmware (mostly for WIFI)" &&
        packagesInstall -u 'firmware'

    # At this point avahi-autoipd should have been removed, we don't need it
    remove -d -- '/var/lib/avahi-autoipd'           # left-over, unwanted

    printHeader "Create users and groups"

    # check user 'local'
    local entr
    system -f -p -g 2 -s entr -- getent passwd 'local'
    if [ -z "$entr" ] ; then
        outputMessage 'local1' ; quit -a -u
    elif [[ "$entr" != local:*:1000:1000:* ]] ; then
        outputMessage 'local2'
        confirm -n "Ignore warning and continue" || quit -a -u
    fi

    copyFromRepo /etc/DIR_COLORS                    # colors for ls et al.
    copyFromRepo /etc/adduser.conf                  # gid and uid ranges
    copyFromRepo /etc/nsswitch.conf                 # add sssd and extrausers
    copyFromRepo /etc/default/centauri-bash-lib     # library config
    copyFromRepo /etc/default/centauribackup
    copyFromRepo /etc/default/centauriconfig        # repository config
    copyFromRepo /etc/default/centauricopy
    copyFromRepo /etc/default/centaurisysinit
    copyFromRepo /etc/kernel-img.conf
    copyFromRepo /etc/systemd/logind.conf           # resize runtime dir !
    copyFromRepo /etc/vim/vimrc                     # better for white bgnd
    copyFromRepo /usr/lib/sysusers.d/centauri.conf  # seed for systemd
                                                    # managing users/groups ...
    copyFromRepo -l /etc/default/centauriusers "$PWD/centauriusers"

    remove "$DAT_PERSIST/centauri-bash-lib.dat"     # remove cache data
    quitOnError

    # We let systemd create all system groups and users known in centauri-soho in
    # this early stage to get the same ids and gids for all instances. Non-system
    # linux users and groups are managed by 'centauriusers' via 'extrausers'. The
    # 'shadow.shared' is used to distribute hashed passwords via repository. To
    # fix ownerships after updates the 'centauriowner' tool is run ...
    embed -t -v -y  centauriowner --all save /root/OWNER-initial
    embed -t -v centauriusers --silent init          # add group members, etc.
    embed -t -v centauriowner restore /root/OWNER-initial

    # enable persistent logging
    copyFromRepo /etc/systemd/journald.conf
    folder -m '/var/log/journal'

    printHeader "Optimize centauri-bash-lib modules..."

    embed -t $CEN_ROOT/library/uglify --docu --uglify

    printHeader "Do some house keeping"

    copyFromRepo /etc/apt/preferences.d/centauri
    if [ "$DAT_RASPI" = 1 ] ; then                      # on 32-bit raspi ...
        system -q -- touch '/etc/apt/sources.list'      #    don't replace from repo
    else
        copyFromRepo /etc/apt/sources.list
    fi
    [ "$DAT_RASPI" = 2 ] && copyFromRepo /etc/X11/xorg.conf.d/99-vc4.conf
    quitOnError

    if confirm -y "Run apt to upgrade installed packages" ; then
        local opts='--silent'
        sysfind -q 'eatmydata' && opts+=' --nosync'
        embed -t -v centauripackage --update=1 --upgrade $opts
    else
        system -e -p apt update
    fi
    quitOnError

    system -e -z -- systemctl daemon-reload
        # somthing like rc.local, see /etc/default/centaurisysinit
    system -e -z -- systemctl enable centaurisysinit
        # generate dummy README
    folder -f -m -- '/var/www/html'
    embed centaurihelp --yes --quiet --generate=dummy

    printHeader "Copy bash configuration to /root and /home/local"

    folder -m /home/local 751 local:staff           # pam not yet configured

    copyFromRepo /etc/bash.bashrc
    copyFromRepo /etc/bash.centauri
    copyFromRepo /etc/bash.local
    copyFromRepo /etc/profile
    copyFromRepo /etc/skel/.bash_aliases
    copyFromRepo /etc/skel/.bash_logout
    copyFromRepo /etc/skel/.bashrc
    copyFromRepo /etc/skel/.profile
    copy -a /etc/skel/.[a-z]* /home/local
    copy -a /etc/skel/.[a-z]* /root

    checkInstalled 'step1' true
    outputMessage 'stepN' '/etc/motd' '' "step1 (seed)"
    printHeader "Done - you may re-login or reboot your system now"
}

# ------------------------------------------------------------------------------
# step2 - make efi bootable btrfs image
# ------------------------------------------------------------------------------
setupStep2() {
    local HOSTOPT='-c'
    cloneName -c "$SOHO_HOST"                               # SOHO_HOST set by dispatcher

    embed -t -v centaurinetcfg --quiet validate cache       # we need valid cache data
    while : ; do
        quitOnError
        if [ -n "$DAT_CLONE_SVR" ] ; then
            copyFromRepo -c                                 # check host name
            serverNetwork "$SOHO_HOST"                      # check net configuation
            HOSTOPT='-s'
            quitOnError
            nethost -s -- "$SOHO_HOST" && break ; NETERR='server'
        else
            nethost -c -- "$SOHO_HOST" && break ; NETERR='client'
        fi
        confirm -n -f "Host has no %s network configuration. Edit configuration" \
                      "$NETERR" || quit -a -u
        embed -t -v centaurinetcfg edit ; netconfig -r -f   # edit and reload config
    done

    local FSTAB="/run/setup-$SOHO_HOST-fstab"               # temp file for step 2

    # check disk, make sure that it is not mounted
    blkdevice -e -d -m -- "$DAT_DISK" ; quitOnError
    if ! blkdevice -d -- "$DAT_DISK" ; then
        confirm -y "Try to unmount '$DAT_DISK'" || quit -a -u
        embed -i -v centaurimedia --device="$DAT_DISK" unmount
        blkdevice -e -d -m -- "$DAT_DISK"
    fi

    printHeader "Install some boot related packages"

    packagesInstall 'step2'
    copyFromRepo /etc/services

    # check if existing, then ask
    printHeader "Partitioning and formatting the new disk"

    local PARTS=4 MEDIA="${DAT_SWAP:-4G}" cpyo=('mirror')
    case "$DAT_RASPI" in
    1)  MEDIA="raspi ext4 ${DAT_SWAP:-4G}" ; PARTS=3 ;;
    2)  MEDIA="raspi ${DAT_SWAP:-4G}" ; PARTS=3
    esac
    [ -n "$SOHO_SWAP_SIZE" ] && MEDIA="$SOHO_SWAP_SIZE"

    if blkdevice -m -n $PARTS -x -- "$DAT_DISK" &&
       ! confirm -b -n "The drive is already partitioned, repeat partitioning" ; then
       :
    else
        outputMessage 'fstab' "$FSTAB" '# '
        embed -t centaurimedia --yes --device="$DAT_DISK" --fstab="$FSTAB" \
                               system "$SOHO_HOST" $MEDIA --sector=4096
        system -e -p -t partprobe "$DAT_DISK"           # reload partition table
        quitOnError                                     # quit after error
        sleep 0.3                                       # check if partitioned now ...
        if ! blkdevice -m -n $PARTS -x -- "$DAT_DISK" ; then
            confirm -b -n "Continue setup anyhow" || quit -a -u
        fi
        cpyo=('copy')
    fi

    printHeader "Copy '/' and '/home' to disk '$DAT_DISK'"

    local BOOT_LBL MNT_BOOT MNT_VOL0 MNT_ROOT MNT_HOME
    folder -f -m -s MNT_BOOT '/run/setup_boot'          # boot partition
    if [ "$DAT_RASPI" = 1 ] ; then                      # system ext4 fs
        folder -f -m -s MNT_VOL0 '/run/setup_root'
        MNT_ROOT="$MNT_VOL0" ; MNT_HOME="$MNT_VOL0/home"
        system -e -p -- mount -L "${SOHO_HOST}_root" "$MNT_VOL0"
    else                                                # system btrfs fs
        folder -f -m -s MNT_VOL0 '/run/setup_vol0'
        MNT_ROOT="$MNT_VOL0/Volumes/Root" ; MNT_HOME="$MNT_VOL0/Volumes/Home"
        system -e -p -- mount -L "${SOHO_HOST}_vol0" "$MNT_VOL0" -o subvol=/

        local item isrc irem
        for item in 'export' 'shared' ; do
            isrc="/mnt/Volumes/${item^}"                # extra vols to copy
            if [ ! -e "$isrc/README" ] ; then           # folders will be mountpts
                isrc="$MNT_ROOT/$item" ; irem="$isrc"
                [ -e "$isrc/README" ] || continue
            fi
            copy -a "$isrc"/* "$MNT_VOL0/Volumes/${item^}" || irem=
            [ -n "$irem" ] && remove -d "$irem"/*
        done
    fi
    quitOnError                                         # quit after error

    if [ ! -e "$FSTAB" ] ; then                         # did not run centaurimedia...
        [ -e "$MNT_ROOT/etc/fstab" ] || quitOnError "Missing file:" "$MNT_ROOT/etc/fstab"
        copy "$MNT_ROOT/etc/fstab" "$FSTAB"
    fi
    cpyo+=(--nocopy=off --counts --silent --hardlinks --one --exclude=boot/grub --exclude=etc/fstab)
    embed -t centauricopy "${cpyo[@]}" --volume=root '/'     "$MNT_ROOT" -x '^/boot/efi'
    cpyo[0]='update'
    embed -t centauricopy "${cpyo[@]}" --volume=home '/home' "$MNT_HOME"
    [ -e "$FSTAB" ] && copy "$FSTAB" "$MNT_ROOT/etc/fstab"
    remove "$FSTAB" "$MNT_ROOT/.centauriswap"

    progress -l "Waiting for queued disk writes to complete..."
    system -e -p -- sync
    quitOnError                                         # quit after error

    setupStep2Repo "$MNT_ROOT"                          # make ssh work

    printHeader "See if we can mount the newly created filesystems"

    system -e -p -- umount "$MNT_VOL0"                  # is remounted later
    quitOnError                                         # quit after error
    blkdevice -m -n 1 -x -f -- "$DAT_DISK"              # get partition path
    for BOOT_LBL in /dev/disk/by-label/*_boot - ; do    # search label ...
        [ "$BOOT_LBL" = '-' ] && quit -e "EFI partition label not found"
        [ "$BOOT_LBL" -ef "${CEN_BLKDEVICE[1]}" ] && break
    done
    BOOT_LBL=$(echo -e "${BOOT_LBL##*/}")               # discard path, unescape
    system -f -p -- mount -L "$BOOT_LBL" "$MNT_BOOT"

    if [ "$DAT_RASPI" = 1 ] ; then                      # 32bit, uses ext4
        system -e -p -- mount -L "${SOHO_HOST}_root" "$MNT_VOL0"
    else                                                # mount by label this this time
        system -e -p -- mount -L "${SOHO_HOST}_vol0" "$MNT_VOL0" -o 'subvol=/'
    fi

    # use --ifnames=X for centauriraspi and centauriefilinux
    local IFNAMES='--ifnames=' temp
    netoption sysdnames "$SOHO_HOST" && IFNAMES+='1' || IFNAMES+='0'

    # **************************************************************************
    # ********************************* x86 ************************************
    # **************************************************************************
    if [ -z "$DAT_RASPI" ] ; then
        printHeader "Now create the machine-owner key required for secure boot"

        folder -f -m "$MNT_ROOT/var/lib/dkms"           # for MOK symlinks
        folder -f -m "$MNT_BOOT/EFI"                    # make efi folder
        while : ; do
            if embed -t -v -y centauriefilinux --force --silent --base="$MNT_BOOT" \
                                               --root="$MNT_ROOT" mok create ; then
                [ -s "$MNT_ROOT/etc/mok/MOK.key" ] && break
            fi
            confirm -y "Do you want to try again" || quit -a -u
        done

        printHeader "Create systemd unified kernel image"

        folder -f -m "$MNT_BOOT/image-$SOHO_DISTRO"
        embed -t -v centauriefilinux --force --silent --base="$MNT_BOOT" --root="$MNT_ROOT" \
                    --yes cmd copy -- creat

        printHeader "Install EFI secure boot shim and bootloaders"

        # centauriefilinux needs repository links
        folder -m -- "$MNT_ROOT/$DAT_REPOSITORY/$SOHO_HOST"
        local conf="${DAT_REPOSITORY##*/}"
        symlink -n "configs/$SOHO_DISTRO/$conf/$SOHO_HOST" "$MNT_ROOT$CEN_ROOT/private"
        symlink -n "configs/$SOHO_DISTRO/$conf/@shared" "$MNT_ROOT$CEN_ROOT/shared"

        [ -h "$MNT_ROOT/boot/efi" ] || symlink -n '/mnt/boot' "$MNT_ROOT/boot/efi"
        copyFromRepo '/boot/grub/grub.cfg' "$MNT_BOOT/grub/grub.cfg"
        embed -t -v centauriefilinux --force --silent --base="$MNT_BOOT" --root="$MNT_ROOT" \
                            --external=off --yes update boot -- update grub -- update systemd
        quitOnError                                     # quit after error

        if confirm -y "Copy MOK to EFI folder to allow enrolling at 1st boot" ; then
            copy "$MNT_ROOT/etc/mok/MOK.der" "$MNT_BOOT/EFI"
        elif confirm -y "Enroll the machine owner key now to allow secure boot" ; then
            embed -t -v centauriefilinux --force --silent --base="$MNT_BOOT" --root="$MNT_ROOT" \
                                         mok import
        fi
        quitOnError                                     # quit after error

        if confirm -b -n "Install the BIOS version of grub" ; then
            embed -t -v centauriefilinux --force --silent --yes --base="$MNT_BOOT" \
                                         --root="$MNT_ROOT" update bios
        fi

        printHeader "Create systemd boot menu entries"

        embed -t -v centauriefilinux --force --silent --base="$MNT_BOOT" --root="$MNT_ROOT" \
                    --yes menu "$SOHO_HOST" $IFNAMES "LABEL=${SOHO_HOST}_vol0"
        # get the default kernel cmdline from generated menu entry
        if matchpath -e -o -s temp "$MNT_BOOT/loader/entries"/90-*.conf ; then
            txtgrep -m -s temp -y "options*" -i - <"$temp"
            writeline -e -t -o "$MNT_BOOT/image-$SOHO_DISTRO/cmdline" "${temp#* }"
        fi

        # mask systemd-boot-update service, it would install an unsigned loader in the wrong place
        symlink -n '/dev/null' "$MNT_ROOT/etc/systemd/system/systemd-boot-update.service"
        quitOnError                                     # quit after error

        if [ -h "$MNT_ROOT/vmlinuz" ] ; then
            message "Fix kernel symlinks"
            embed -t -v centauriefilinux --force --silent --yes --base="$MNT_BOOT" \
                                         --root="$MNT_ROOT" kernel -
        fi

    # **************************************************************************
    # ****************************** raspberry *********************************
    # **************************************************************************
    else
        if [ "$DAT_RASPI" = 1 ] ; then
            printHeader "Setup the raspberry boot loader (32 bit using ext4)"
            local ROOT="LABEL=${SOHO_HOST}_root"
        else
            printHeader "Setup the raspberry boot loader (64 bit using btrfs)"
            local ROOT="LABEL=${SOHO_HOST}_vol0"
        fi

        copyFromRepo -u /boot/firmware/config-default.txt
        copyFromRepo -u /boot/firmware/config-minimal.txt

        embed -t -v centauriraspi --host="$SOHO_HOST" --boot="$MNT_BOOT" copy -- initrd create
        embed -t -v centauriraspi --host="$SOHO_HOST" --boot="$MNT_BOOT" $IFNAMES entry - "$ROOT"
        [ -n "$DAT_CLONE_SVR" ] && temp='server' || temp='default'
        embed -t -v centauriraspi --host="$SOHO_HOST" --boot="$MNT_BOOT" --yes config "$temp"
    fi
    quitOnError                                     # quit after error

    # **************************************************************************
    # ******************************** common **********************************
    # **************************************************************************

    # create mode override file to switch to 'simple' interface mode after
    # boot. Other modes may depend on software that is not yet installed.
    folder -m -f "$MNT_ROOT$DAT_PERSIST"            # create "persistent"

    if [ -e "$DAT_STATE_PATH-step3-done" ] ; then
        remove "$MNT_ROOT$DAT_MODE_OVERRIDE"*
    else
        writeline -e -t -o "$MNT_ROOT$DAT_MODE_OVERRIDE" 'simple'
        writeline -e -t -o "$MNT_ROOT$DAT_MODE_OVERRIDE-setup" 'flag to keep override file'
    fi

    if [ -n "$DAT_CLONE_SVR" ] || cloneName ; then
        # networkmanager does not always respect static interface configuration
        # so disable it. Anyhow running NM is not a good idea for a server ...
        symlink -n '/dev/null' "$MNT_ROOT/etc/systemd/system/NetworkManager.service"
        symlink -n '/dev/null' "$MNT_ROOT/etc/systemd/system/NetworkManager-wait-online.service"
        symlink -n '/dev/null' "$MNT_ROOT/etc/systemd/system/ModemManager.service"
        # do not let WPA Supplicant disturb either ...
        symlink -n '/dev/null' "$MNT_ROOT/etc/systemd/system/wpa_supplicant.service"
        quitOnError
        configureWLAN "$MNT_ROOT"
    fi

    printHeader "Rename new system to '$SOHO_HOST'"

    create -t -c "$MNT_ROOT/etc/sysctl.d/host+domain.conf" <<!EOF
kernel.domainname=$SOHO_DOMAIN"
kernel.hostname=$SOHO_HOST
!EOF

    # get rid of existing interface config (re-created by centaurinetgen)
    remove -d -q -- "$MNT_ROOT/etc/network/interfaces"*

    # **************************************************************************
    # ********************************* x86 ************************************
    # **************************************************************************
    if [ -z "$DAT_RASPI" ] ; then
        embed -t -v centaurirestore --restore="$MNT_ROOT" --yes \
                    --clone="$SOHO_HOST" --clone=- --clone=- --clone="$MNT_BOOT/grub"
        quitOnError                                 # quit after error

        if cloneName ; then
            outputMessage 'efi' "$MNT_ROOT/etc/motd"
        else
            outputMessage 'stepN' "$MNT_ROOT/etc/motd" '' "step 2 (boot disk)"
        fi
        outputMessage 'stepN' '/etc/motd' '' "step 2 (boot disk)"

    # **************************************************************************
    # ****************************** raspberry *********************************
    # **************************************************************************
    else
        outputMessage 'stepN' '/etc/motd' '' "step 2 (boot disk)"
        embed -t -v centaurirestore --restore="$MNT_ROOT" --yes \
                            --clone="$SOHO_HOST" --clone=- --clone=- --clone=-
        quitOnError                                 # quit after error
        outputMessage 'raspi' "$MNT_ROOT/etc/motd"
    fi

    # **************************************************************************
    # ******************************** common **********************************
    # **************************************************************************

    copyFromRepo '/etc/default/networking' "$MNT_ROOT/etc/default/networking"
    copy -q -- "$DAT_PERSIST/centaurisoho-"* "$MNT_ROOT$DAT_PERSIST"
    issueKeyboard "$MNT_ROOT"                       # will prompt for keyboard
    system -e -p -- sync                            # we do not unmount new disk
    quitOnError
    create -- "$MNT_ROOT/$DAT_STATE_PATH-step2-done"
    printHeader "Done, see '$MNT_BOOT' and '$MNT_ROOT'"
}

# ------------------------------------------------------------------------------
# Step2 repo - copy ssh things
# ------------------------------------------------------------------------------
setupStep2Repo() {
#   copyFromRepo /etc/init.d/ssh                    "$1/"
    copyFromRepo /etc/ssh/ssh_host_ecdsa_key        "$1/"
    copyFromRepo /etc/ssh/ssh_host_ed25519_key      "$1/"
    copyFromRepo /etc/ssh/ssh_host_rsa_key          "$1/"
    copyFromRepo /etc/ssh/ssh_host_ecdsa_key.pub    "$1/"
    copyFromRepo /etc/ssh/ssh_host_ed25519_key.pub  "$1/"
    copyFromRepo /etc/ssh/ssh_host_rsa_key.pub      "$1/"
    copyFromRepo /etc/ssh/ssh_known_hosts           "$1/"
    copyFromRepo /etc/ssh/sshd_config               "$1/"
    copyFromRepo /etc/ssh/ssh_config                "$1/"
    copyFromRepo /etc/ssh/ssh_config.d/50-centauri.conf "$1/"
}

# ------------------------------------------------------------------------------
# step3 base - install base system: 0|1
# ------------------------------------------------------------------------------
setupStep3Base() {
    printHeader "Preparing base setup"

    copyFromRepo /etc/aliases
    copyFromRepo /etc/default/centauriconfig
    copyFromRepo /etc/default/centauriinfo
    copyFromRepo /etc/default/centauriusers
    copyFromRepo /etc/host.conf
    copyFromRepo /etc/initramfs/post-update.d/systemd-boot
    copyFromRepo /etc/modprobe.d/centauri.conf
    copyFromRepo /etc/pam.d/sshd
    copyFromRepo /etc/pam.d/sudo
    copyFromRepo /etc/pam.d/su
    copyFromRepo /etc/security/pam_mount.conf.xml.client
    copyFromRepo /etc/security/pam_mount.conf.xml.local
    copyFromRepo /etc/sudoers.d/centauri
    copyFromRepo /etc/sysctl.conf
    copyFromRepo /etc/tmpfiles.d/centauri.conf

    embed -t -v centauriconfig -q setup repository  # finish repository setup
    embed -t -v centaurisecrets local               # symlink local configs

    printHeader "Going to install a lot of packages now"

    if confirm -y "Install plymouth to show a boot splash screen" ; then
        packagesInstall 'plymouth'
        system -e -t -- plymouth-set-default-theme breeze
    fi

    create -c -- '/etc/default/exim4' <<!EOF
# Temporarily disable exim4 from running as service after installation
QUEUERUNNER=nodaemon
!EOF

    packagesInstall 'step3'
    # update _centauri_bash_dyn (for autoload and bash builtins)
    system -e -p /var/centauri/library/autoload --builtins --quiet

    copyFromRepo /etc/anacrontab
    copyFromRepo /etc/crontab
    copyFromRepo /etc/default/anacron
    copyFromRepo /etc/default/centauricron
    copyFromRepo /etc/default/centauripower
    copyFromRepo /etc/default/dnsmasq
    copyFromRepo /etc/dnsmasq.conf
    copyFromRepo /etc/dnsmasq.d/static
    copyFromRepo /etc/fuse.conf
    copyFromRepo /etc/mail.rc
    copyFromRepo /etc/minidlna.conf
    copyFromRepo /etc/udev/rules.d/01-centauriroute.rules
    copyFromRepo /etc/udev/rules.d/99-centauriroute.rules
    copyFromRepo /etc/udev/rules.d/33-ax88179eth.rules
    copyFromRepo /etc/xdg/user-dirs.defaults        # beware! go away

    # some maintainer scripts override our config
    copyFromRepo /etc/services                      # we really depend on this
    quitOnError                                     # quit after error

    # final pam configuration
    if ! checkInstalled 'auth' ; then
        copyFromRepo /etc/security/pam_encfs.conf
        system -e -t pam-auth-update --enable mkhomedir
        # --disable does not work, must run gui...
        #system -e -t pam-auth-update --disable pwquality encfs
        system -e -t pam-auth-update
        checkInstalled 'auth' true
    fi

    # let centauripower register it's hooks
    embed -t -v centauripower setup

    # network configuration (keep resolv.conf)
    embed -t -v centaurinetcfg --keep --quiet setup "$SOHO_HOST"

    printHeader "A basic system is installed, now configure things the centauri way"

    if [ "$HOSTNAME" = "$SOHO_SERVER" -o "$HOSTNAME" = "$SOHO_SECOND" ] ||
        confirm -y "Configure 'inetd' and some network services to be run" ; then

        copyFromRepo /etc/default/centaurirunlevel
        copyFromRepo /etc/default/centauriswitch
        copyFromRepo /etc/inetd.conf
        copyFromRepo /etc/vsftpd.conf
        copyFromRepo /etc/lighttpd/lighttpd.conf

        copyFromRepo /etc/cups/lpoptions
        copyFromRepo /etc/cups/client.conf
        copyFromRepo /etc/cups/cupsd.conf
        symlink -n '/etc/ssl/certs/servercrt.pem' '/etc/cups/ssl/servercrt.pem'
        symlink -n '/etc/ssl/private/servercrt.key' '/etc/cups/ssl/servercrt.key'

        embed -t -v centaurirunlevel install
        configureCertificates

        symlink -n "$CEN_ROOT/systemd/system/inetd.service" \
            '/etc/systemd/system/multi-user.target.wants/inetd.service'

        # exim4 configuration (it really uses SysV init)
        if [ -x '/usr/sbin/exim4' ] ; then
            copyFromRepo /etc/default/exim4
            copyFromRepo /etc/exim4/exim4.conf.template
            copyFromRepo /etc/exim4/update-exim4.conf.conf
            copyFromRepo /etc/init.d/exim4
            system -e -p -t update-exim4.conf
        fi
        quitOnError

        # lighttpd config
        symlink -n '/etc/ssl/certs/clientcrt.pem' '/etc/lighttpd/server.pem'
        symlink -n '/etc/ssl/private/clientcrt.key' '/etc/lighttpd/server.key'
        remove "/etc/lighttpd/conf-enabled/99-unconfigured.conf"
        local ITEM
        for ITEM in 10-cgi 10-dir-listing 10-fastcgi 10-userdir 90-debian-doc ; do
            symlink -n "../conf-available/$ITEM.conf" \
                       "/etc/lighttpd/conf-enabled/$ITEM.conf"
        done

        # build html frontpage
        symlink -n "$CEN_ROOT/html" '/var/www/html/centauritools'
        symlink -n '/export' '/var/www/html/export'
        embed -t -v centauriinfo index '/var/www/html/index.html'

        # some maintainer script override our config
        copyFromRepo /etc/services                  # we really depend on this
        copyFromRepo /etc/ssh/ssh_config
        copyFromRepo /etc/ssh/ssh_config.d/50-centauri.conf
        copyFromRepo /etc/ssh/sshd_config
        copyFromRepo /etc/ssh/sshd_remote
        local opts=()
        netoption 'nm' "$HOSTNAME" && opts+=(nmconn --)
        if netiface -k -x wlan0 ; then              # do we have wlan?
            passwordFromFile 'wlanpsk'              # wlan config
            [ "${SOHO_NET_WLAN:--}" != '-' ] && opts+=(--wlan="$SOHO_NET_WLAN:$DAT_PASSWD")
            [ "${SOHO_NET_APNT:--}" != '-' ] && opts+=(--apoint="$SOHO_NET_APNT:$DAT_PASSWD")
            opts+=(wpasupp -- hostapd)
        fi
        [ -n "$opts" ] && embed -t -v centaurinetgen "${opts[@]}"

        printHeader "Now centauri networking is configured (with ssh, vsftp and httpd)"
    fi

    # populate repository
    if [ -n "$SOHO_REPO_OPTS" ] && confirm -y "Update repository data from server" ; then
        printHeader "Load repository from server and update with local data"
        passwordFromFile 'repository'
        export CEN_RSYNC_PASSWD="$DAT_PASSWD"
        while : ; do
            embed -t -v centauriconfig --quiet --role=workstation --override=0 --yes rget -- put && break
            error -c ; message -i
            confirm -s CEN_RSYNC_PASSWD -p + -u \
                    "Retry with another password (empty input to stop)" || break
        done
        repoOptions                                 # re-create OPTIONS file
    else
        printHeader "Update repository with local data (SOHO_REPO_OPTS not set)"
    fi
    embed -t -v centauriconfig --quiet --role=workstation --yes \
                            get grub.cfg -- get fstab -- get '_*_key'
    embed -t -v centauriconfig --quiet --role=workstation --yes --override=0 get

    copyFromRepo /etc/skel/.profile                 # got overridden by dpkg

    checkInstalled 'base' true
    outputMessage 'stepN' '/etc/motd' '' "step 3 (base system)"
}

# ------------------------------------------------------------------------------
# step3 client - install client
# ------------------------------------------------------------------------------
setupStep3Client() {
    printHeader "Make this system a client"

    copyFromRepo /etc/services                      # we really depend on this
    copyFromRepo /etc/wvdial.conf

    embed -t -v centaurikerberos setup krb5 sssd    # init kerberos via sssd

    configureCertificates -c
    packagesInstall 'client'

    copyFromRepo /etc/default/openvpn
    copyFromRepo /etc/NetworkManager/system-connections/OpenVPN-$SOHO_DNAME.nmconnection

    embed -t -v centaurirunlevel install

    # do this late, in case of error the proxy from step1 should stay valid
    copyFromRepo /etc/apt/apt.conf.client
    copyFromRepo /etc/apt/apt.conf.local
    copyFromRepo /etc/apt/apt.conf.d/20auto-upgrades
    copyFromRepo /etc/systemd/timesyncd.conf
    copyFromRepo /etc/tinyproxy/tinyproxy.conf.template
    configureMounter                                # modify fstab, restart
    quitOnError

    if confirm -y "Register with server" ; then
        embed -v centaurissh -f import
        embed -t -v centaurikerberos --force --seed='passwords' client -
        if ! error -t ; then
            confirm -y "Something went wrong, continue anyhow" || quit -a -u
            error -c
        fi
    fi

    printHeader "Create backup folders"
    embed -t -v -y centauridata init - - +          # create backup volume/folder
    quitOnError

    outputMessage 'client' '/etc/motd' '' "step 3 ($DAT_WHAT)"
}

# ------------------------------------------------------------------------------
# step3 appliance - install appliances
# ------------------------------------------------------------------------------
setupStep3Appli() {
    local home mesg='stepN'
    printHeader "Make this system an appliance"

    copyFromRepo /etc/services                      # we really depend on this

    configureCertificates -c

    if [ -d '/var/log/journal' ] &&
       confirm -y "Keep system log in memory ('/run/log/...')" ; then
        remove -d '/var/log/journal'
        systemctl restart systemd-journald
    fi

    for home in ~clock ~kiosk ~homeassistant ~weewx ; do
        [ -d "$home" ] && continue                  # already installed
        case "${home,,}" in
        */homea*)   confirm -b "Install 'Home Assistant, Core Version'" || continue
                    configureHass ; mesg='hass' ;;
        */weewx*)   confirm -b "Install 'WeeWx Weatherstation Software'" || continue
                    configureWeewx ;;
        */clock*)   confirm -b "Enable 'clock' appliance mode" || continue
                    embed -v centauristartup -q install 'clock' ;;
        */kiosk*)   confirm -b "Enable 'kiosk' appliance mode" || continue
                    embed -v centauristartup -q install 'kiosk' ;;
        esac
    done

    if [ -d ~clock ] || [ -d ~kiosk ] ; then
        if ! checkInstalled 'viewer' ; then
            packagesInstall 'viewer'
            checkInstalled 'viewer' true
        fi
    fi

    printHeader "Set the default boot entry"

    embed -t -v centaurisysinit default             # select boot mode
    quitOnError

    printHeader "Create backup folders"
    embed -t -v -y centauridata init - - +          # create backup volume/folder
    quitOnError

    outputMessage "$mesg" '/etc/motd' '' "step 3 ($DAT_WHAT)"
}

# ------------------------------------------------------------------------------
# step3 server - install server
# ------------------------------------------------------------------------------
setupStep3Server() {
    serverNetwork ; quitOnError                         # check configuration
    local styp="primary"
    [ "$HOSTNAME" != "${CEN_NET_SERVERS[0]}" ] && styp="secondary"

    if ! checkInstalled 'certs' ; then

        printHeader "Make this system a $styp server"

        copyFromRepo /etc/services                      # we really depend on this
        copyFromRepo /etc/ntpsec/ntp.conf
        copyFromRepo /etc/systemd/timesyncd.conf

        folder -m /var/log/ntpsec 664 ntpsec:ntpsec     # make ntpsec happy

        copyFromRepo /etc/samba/smb.conf.master
        copyFromRepo /etc/samba/smb.conf.slave
        copyFromRepo /etc/samba/smbpass.conf.master

        system -e -p -t -- systemctl disable sssd       # could make re-boot hang
        embed -t -v centaurikerberos setup krb5 sssd    # init kerberos via sssd

        configureCertificates -s

        # some tools might rely on /mnt/vol0/Volumes
        configureMounter                                # modify fstab, restart

        packagesInstall 'server'
        embed -t -v centaurirunlevel install
        quitOnError

        copyFromRepo /etc/exports                       # nfs exported volumes
        copyFromRepo /etc/nfs.conf

        copyFromRepo    /etc/openvpn/README
        copyFromRepo -l "/etc/openvpn/server/$SOHO_DNAME/server.conf" /etc/openvpn/server.conf
        copyFromRepo    "/etc/openvpn/server/$SOHO_DNAME/updown"
        remove -q -- /etc/openvpn/update-resolv-conf

        copyFromRepo /etc/default/saslauthd
        copyFromRepo /etc/cyrus.conf
        copyFromRepo /etc/imapd.conf
        embed -t -v centaurimail setup                  # migrate to /var/Mail

        copyFromRepo /etc/squid/squid.conf
        copyFromRepo /etc/squid/squidGuard.conf

        # create home of domain user
        folder -m "/home/$SOHO_DOMUSR" 751 nobody:users # pam not yet configured
        copy /etc/skel/.[a-z]* "/home/$SOHO_DOMUSR"

        # create archive and backup volumes
        embed -t -v centaurisnapshot --yes --quiet create 'Archive' -- create 'Backup'
        checkInstalled 'certs' true
    fi

    if [ "$HOSTNAME" != "${CEN_NET_SERVERS[0]}" ] ; then
        printHeader "Prepare secondary Samba AD/DC"
        checkInstalled 'populate' true
        remove -- "$DAT_MODE_OVERRIDE"*             # no longer override centauiswitch=xxx
        checkInstalled 'addc' true
        styp=
    else
        printHeader "Provisioning Samba AD/DC"
    fi

    if ! netoption 'addc' "$HOSTNAME" ; then
        message "AD/DC is not configured, see 'option addc'"
        checkInstalled 'populate' true
        styp=
    elif [ -n "$styp" ] && checkInstalled 'addc' &&
        confirm -y "Samba AD/DC already configured. Keep configuration" ; then
        styp=
    fi

    # --------------------------------------------------------------------------
    # primary server only
    # --------------------------------------------------------------------------
    if [ -n "$styp" ] ; then
        checkInstalled 'addc' false ; checkInstalled 'populate' false
        netquery server || error "Must be on a server - check your net config"
        # stop server services
        system -t -q systemctl start centauri-public.target

        # centaurikerberos uses 'samba-tool domain provision' and passes the first
        # configured ip address to samba-tool (ipv4 and ipv4)- The 1st address is
        # either the primary interface or the address of a bridge. So the server
        # is reachable vie the passed addresses

        # unfortunately the samba-tool picks up all configured ip addresses of this
        # sever to add them to its dns. This happens before we can turn dns updates
        # off. These might add volatile router prefixes for ipv6 that later lead to
        # invalid addresses returned by samba's DNS.

        # To overcome this, we stop the network temporarily ...
        local ITEM
        for ITEM in '/sys/class/net'/* ; do
            ITEM="${ITEM##*/}" ; [ "$ITEM" = 'lo' ] && continue
            nettool -w -d "$ITEM" down
        done
        netserver -w PRIMARY MASTER "$SOHO_HOST"    # yes, we are MASTER here!
        quitOnError

        # Provisioning, add users, add users to groups
        embed -t -v centaurikerberos --yes --quiet --force --seed='passwords' provsion
        embed -t -v centaurikerberos --zombie --seed='passwords' \
                    user create smbadmin -- user create smbtrust -- user create smbworld -- \
                    user create root -- user create local -- user create "$SOHO_DOMUSR" -- \
                    user create cyrus
        system -e -t samba-tool group addmembers Administrators root,local,smbadmin

        printHeader "Samba is ready, restarting network"

        # this config MUST disable DNS updates
        symlink -m -n 'smb.conf.master' '/etc/samba/smb.conf'

        move -q /etc/krb5.conf /etc/krb5.conf.samba # save samba generated config
        embed -t -v centaurikerberos setup krb5     # get our config again

        remove -- "$DAT_MODE_OVERRIDE"*             # no longer override centauiswitch=xxx
        checkInstalled 'addc' true

        # now we restart the network via centauriroute which handles the static
        # network mode used by a server ...

        embed -t -v centauriswitch init
        embed -t -v centauriroute --force --quiet open
        embed -t -v centaurifilter --zombie restart
        quitOnError
    fi

    # --------------------------------------------------------------------------
    # any server
    # --------------------------------------------------------------------------
    if ! checkInstalled 'populate' ; then

        printHeader "Starting samba-ad-dc and populating and AD"

        embed -t -v centaurinetcfg resolv default   # generate resolv.conf

        # temporarily disable IPv6 support
        #embed -t -v centauriroute ipv6 off

        # it is important to map port 53 via 'centaurifilter dnsmap'. Usually this
        # happens when the firewall is started. But better check it:
        embed -q -t -v centauriroute wait 127.0.0.2 5354 - ||
            embed -t -v centaurifilter dnsmap

        # it takes a moment for ifup to process callbacks to centauiswitch that do
        # add ipv6 addresses to the bridge. The samba-ad-dc service waits 5 seconds
        # and checks for DNS before starting the samba deamon ...
        system -e -t systemctl start centauri-master.target

        # wait until samba services are ready ...
        testActiveAdDc  88 30 "No Kerberos server"  &&
        testActiveAdDc 135 30 "No DCE/RPC endpoint" &&
        testActiveAdDc 389 30 "No LDAP server"
        quitOnError

        # now get a keytab for the server itself ...
        embed -t -v centaurikerberos --seed='passwords' machine del + --quiet
        embed -t -v centaurikerberos --seed='passwords' machine add +
        embed -t -v centaurikerberos keytab + --output=/etc/krb5.keytab --yes
        checkInstalled 'populate' true
    fi

    # --------------------------------------------------------------------------
    # primary server only
    # --------------------------------------------------------------------------
    if [ -n "$styp" ] ; then
        system -e -p -t -- systemctl enable sssd        # should be ok now
        system -e -p -t -- systemctl start sssd
                                                        # simple test for working ad/dc
        system -w -p -t -- chown --recursive "$SOHO_DOMUSR:" "/home/$SOHO_DOMUSR"
        quitOnError

        # A server has a repository staging folder
        if [ ! -e "$CEN_ROOT/machines/rsyncd.conf" ] ; then
            printHeader "Create repository staging folder"

            netserver -w PRIMARY MASTER "$SOHO_HOST"    # fake MASTER role
            embed -t -v centaurimachines --setup --add "$SOHO_HOST"
            quitOnError
        fi

        # create ssh-key store, main CA and opvn CA in '/root/Private' folder ...
        local PRIV='/root/Private' ; folder -f -m -- "$PRIV"

        if [ ! -e "$PRIV/ssh-keys/$SOHO_DNAME/mapping" ] ; then

            printHeader "Creating the SSH key-store for domain: $SOHO_DNAME"

            if [ -e 'private/ssh-keys.tgz' ] &&
                ! confirm -n -b "Do not use default, generate a new key-store" ; then
                system -e -p -- tar -xaf 'private/ssh-keys.tgz' --directory="$PRIV"
            else
                embed -t -v centaurikeys -D "$SOHO_DNAME" setup \
                            "server ${SOHO_GENAME}[01]" "client $SOHO_GENAME*" 'mobile *'
                local CLASS
                for CLASS in 'server' 'client' 'mobile' ; do
                    embed -t -v centaurikeys -D "$SOHO_DNAME" \
                                -H "$CLASS" --create --no create root local @other
                done
            fi
            embed -t -v centaurikeys -D "$SOHO_DNAME" --yes install root local "$SOHO_DOMUSR"
            quitOnError
        fi

        if [ ! -e "$PRIV/CertificateAuthority-$SOHO_DNAME" ] ; then

            printHeader "Creating the Certificate Authority for domain: $SOHO_DNAME"

            if [ -e "private/CertificateAuthority-$SOHO_DNAME.tgz" ] &&
                ! confirm -n -b "Do not use default, generate a new CA" ; then
                system -e -p -- tar -xaf "private/CertificateAuthority-$SOHO_DNAME.tgz" \
                                --directory="$PRIV"
                embed -t -v centauricerts --yes --host --install create server
            elif confirm -y "Do you want to create this CA now" ; then
                embed -t -v centauricerts --yes --host --install setup -- \
                            create revoked  -- create server
                embed -t -v centauricerts --yes --host create 'computer' -- create 'mobile'
                quitOnError
            fi
        fi

        local CAFLDR="$PRIV/CertificateAuthority-ovpn"
        local CAARCH="private/CertificateAuthority-ovpn.tgz"
        if [ ! -e "$CAFLDR" ] ; then

            printHeader "Creating the Certificate Authority for openvpn"

            if [ -e "$CAARCH" ] &&
                ! confirm -n -b "Do not use default, generate a new CA" ; then
                system -e -p -- tar -xaf "$CAARCH" --directory="$PRIV"
                embed -t -v centauricerts --yes --ovpn --install create server
            elif confirm -y "Do you want to create this CA now" ; then
                copyFromRepo "/etc/openvpn/client/$SOHO_DNAME/client.conf" \
                             "$CAFLDR/client.template"
                embed -t -v centauricerts --yes --ovpn --install setup -- \
                            create revoked  -- create server
                embed -t -v centauricerts --yes --ovpn create 'computer' -- \
                            export 'computer' -- create 'mobile' -- export 'mobile'
                quitOnError
            fi
        fi
    fi

    # --------------------------------------------------------------------------
    # Secondary server only
    # --------------------------------------------------------------------------
    if [ "$HOSTNAME" != "${CEN_NET_SERVERS[0]}" ] ; then

        printHeader "Register at primary server"

        # check if server is alife and get 'ssh_server_key.pub'
        embed -v centaurisecrets client +
        embed -t -v centaurikerberos client
        quitOnError

        printHeader "Joining $SOHO_DOMAIN as controller"

        symlink -m -n 'smb.conf.slave' '/etc/samba/smb.conf'
        embed -t -v centaurikerberos join --seed='passwords'
        embed -t -v centaurikerberos --server --force --yes send "$HOSTNAME"
        embed -t -v centauriswitch local -- auto
        quitOnError
    fi

    # --------------------------------------------------------------------------
    # any server
    # --------------------------------------------------------------------------
    # do this late, in case of error the proxy from step1 should stay valid
    copyFromRepo /etc/apt/apt.conf.client
    copyFromRepo /etc/apt/apt.conf.local
    copyFromRepo /etc/apt/apt.conf.d/20auto-upgrades

    # update, the server runs sshd as a service
    copyFromRepo /etc/inetd.conf
    quitOnError

    printHeader "Create backup folders"
    embed -t -v -y centauridata init - - + +        # create backup volume/folder
    quitOnError

    outputMessage 'server' '/etc/motd' '' "step 3 ($DAT_WHAT)"

}

# ------------------------------------------------------------------------------
# step3 - install base system, client or server
# ------------------------------------------------------------------------------
setupStep3() {
    local CURR IGUI ICOMM ICLIE ISERV IPASW IAPPL

    # restrict 'server' final target
    for CURR in 'client' 'appliance' 'server' '' ; do
        [ -z "$CURR" ] && break
        checkInstalled "$CURR" || continue
        [ "$DAT_WHAT" = 'server' -o "$CURR" = 'server' ] || continue
        printHeader "This system is already installed as '$CURR'"
        [ -e "$DAT_SEED" ] && removeSetupFiles ; quit
    done

    # The installation order must be:
    # Step3Base packagesGUI packagesCommon Step3Client|Server configurePasswords

    case "$DAT_WHAT" in
    client) IGUI=1 ; ICOMM=1 ; ICLIE=1 ; IPASW=1 ;;
    appli*) IGUI=0           ; IAPPL=1 ; IPASW=1 ;;
    server) IGUI=1 ; ICOMM=1 ; ISERV=1 ; IPASW=1 ;;
    *)      if checkInstalled 'base' ; then
                printHeader "The base setup has run before (try --force)" ; return
            fi
            IGUI=0
    esac

    checkInstalled 'base' || setupStep3Base
    [ -n "$IGUI"  ] && packagesGUI "$IGUI"
    [ -n "$ICOMM" ] && packagesCommon
    [ -n "$ICLIE" ] && setupStep3Client
    [ -n "$IAPPL" ] && setupStep3Appli
    [ -n "$ISERV" ] && setupStep3Server
    [ -n "$IPASW" ] && configurePasswords

    checkInstalled "$DAT_WHAT" true
    printHeader "Done, your $DAT_WHAT installation is ready, have fun!"
}

# ------------------------------------------------------------------------------
# step4 - install options
# ------------------------------------------------------------------------------
setupStep4() {
    if ! checkInstalled 'base' ; then
        quitOnError "A base system must be installed before '$DAT_DESK'"
    elif ! checkInstalled "$DAT_DESK" ; then

        printHeader "Preparing $DAT_DESK setup"

        packagesInstall "$DAT_DESK"

        copyFromRepo /etc/default/centaurirunlevel  # skipped earlier steps?
        embed -t -v centaurirunlevel script
        quitOnError                                 # quit after error
        if [ "$DAT_DESK" = 'hass' ] ; then
            configureHass
        else
            packagesGUI "$DAT_DESK"
            outputMessage 'stepN' '/etc/motd' '' "step 4 ($DAT_DESK)"
        fi
        checkInstalled "$DAT_DESK" true
    fi

    if [ "$DAT_DESK" = 'hass' ] ; then
        printHeader "$DAT_DESK is installed, use 'centauihass' for its management"
    else
        printHeader "$DAT_DESK is installed, select a '$DAT_DESK' session at graphical login"
    fi
}

# ------------------------------------------------------------------------------
# help for 'setup' command (centaurisoho has its own implementation)
# ------------------------------------------------------------------------------
usageSetup() {
    local serv name nam1 nam2 nam3
    cloneName -n nam1 1 ; cloneName -n nam2 2 ; cloneName -n nam3 3
    printf -v serv '%-11s' "$SOHO_SERVER"
    printf -v name '%-11s' "$nam3"
    cat <<!EOF
Usage:  (1) $DAT_SELF seed                 # step 1: prepare base system
        (2) $DAT_SELF /dev/<disk> [<name>] # step 2: clone and configure boot
        (3) $DAT_SELF base                 # step 3: install base system
            $DAT_SELF client|server        #         make it client or server
            $DAT_SELF appliance            #         make it an appliance
        (4) $DAT_SELF lxqt|kde             # step 4: install a desktop
            $DAT_SELF hass                 #         install homeassistant core
            $DAT_SELF weewx                #         install weatherstation software

Example:(1) $DAT_SELF seed                 # step 1: prepare base system $nam1
        (2) $DAT_SELF /dev/sdb             # step 2: clone+configure boot for $nam2
        (3) $DAT_SELF base                 # step 3: boot $nam2, create base system
            $DAT_SELF /dev/sdb $serv #         clone to server image
            $DAT_SELF server               #         boot $SOHO_SERVER, make it a server
            $DAT_SELF /dev/sdb $name #         boot $nam2, clone to client
            $DAT_SELF client               #         boot $nam3, make it a client
        (4) $DAT_SELF lxqt                 # step 4: install a simple desktop

Arguments:
        <disk>      A (virtual) disk drive,  examples: sdb mmcblk0
        <name>      a host name (<host> should be configured in centaurinetcfg)

The '$DAT_SELF' script is a bootstrap tool and also a plugin for 'centaurisoho'. It works
using a 'workspace' which usually comes as a tar archive. There is an 'installer' tool
that unpacks the 'seed.tar' and that can run step (1) '$DAT_SELF seed'.

After step (1), the script hands control over to 'centaurisoho'. In other words: To run
later steps, e.g. (2)...(4) you can run 'centaurisoho' directly as it provides more help
information and debug/trace options.

!EOF
}

# ------------------------------------------------------------------------------
# dispatcher
# ------------------------------------------------------------------------------
workDispatch() {
    SOHO_HOST="$HOSTNAME"               # target name, see cloneName()

    case "$#$1" in
        # these command should always be implemented
        1seed)   DAT_WHAT='seed'   ;;               # step 1
        1/dev/*) DAT_DISK="$1" ; SOHO_HOST= ;;      # step 2 clone
        2/dev/*) DAT_DISK="$1" ; SOHO_HOST="$2" ;;
        3/dev/*) DAT_DISK="$1" ; SOHO_HOST="$2" ; DAT_SWAP="$3" ;;
        1bas?)   DAT_WHAT='base'   ;;               # step 3
        1cli*)   DAT_WHAT='client' ;;               # ...
        1app*)   DAT_WHAT='appliance' ;;            # ...
        1ser*)   DAT_WHAT='server' ;;               # ...

        # optional commmands
        1kde)    DAT_DESK='kde'    ;;               # step 4
        1lxq?)   DAT_DESK='lxqt'   ;;               # ...
        1has?)   DAT_DESK='hass'   ;;
        1commands)                                  # make them known...
                echo 'kde|step 4: install a KDE desktop'
                echo 'lxqt|...     install a LXQt desktop'
                echo 'hass|...     install Home Assistant'
                return ;;

        # catch-all error handler
        *)      echo "$DAT_SELF: Invalid command '$*', Try '$DAT_SELF --help'"
                return
    esac

    checkSeed                                       # upack/update seed

    if [ "$DAT_WHAT" = 'seed' ] ; then
        setupStep1
    else
                                                    # explicit check to ignore --force
        if [ -e "$DAT_STATE_PATH-step1-done" ] ; then
            configureLocales                        # should really be configured
        else
            setupStep1
        fi
        [ "$DAT_WHAT" = 'server' ] && checkRepository   # must have primary server data

        if [ -n "$DAT_DISK" ] ; then
            setupStep2
                                                    # explicit check to ignore --force
        elif [ -e "$DAT_STATE_PATH-step2-done" ] ; then
            issueKeyboard                           # may need keyboard configuration
        else
            confirm -n "Make sure that step 2 (boot disk) succeeded. Continue" || quit -a -u
            packagesInstall 'step2'
            copyFromRepo /etc/services
            setupStep2Repo
            quitOnError
            checkInstalled 'step2' true
            quit "Please fix boot config and fstab and networking, then rerun '$CEN_NAME'"
        fi

        checkBoot                                   # need /boot/efi for initramfs

        [ -z "$DAT_DISK" ] && { configureWLAN ; quitOnError ; }
        [ -n "$DAT_WHAT" ] && setupStep3
        [ -n "$DAT_DESK" ] && setupStep4

        [ -e "$DAT_STATE_PATH-client-done" ] && removeSetupFiles -c
        [ -e "$DAT_STATE_PATH-server-done" ] && removeSetupFiles -s

        [ -n "$DAT_WHAT$DAT_DESK" ] && embed -v centauridivert update
    fi
}

################################################################################
############# End of the customized part of the 'setup' script #################
################################################################################

# After installing the seed tar (step 1) the centaurisoho tool can take over (which
# adds some extra functionality). This script is then used as plugin and invoked
# via CEN_OPT_DISPATCH.

# At the other hand, centaurisoho can be called directly. In this case the 'setup'
# script is sourced (option --source) and later invoked via CEN_OPT_DISPATCH

CEN_OPT_DISPATCH='workDispatch'             # this is for centaurisoho

if [ "$SOHO_SETUP" = 2 ] ; then             # --help option
    usageSetup ; exit 2
elif [ "$1" = 'commands' ] ; then           # query from centaurisoho
    $CEN_OPT_DISPATCH "$1" ; exit 0
elif [ "$SOHO_SETUP" != 1 ] ; then          # if not sourced by centaurisoho ...
    # run installer tool
    if [ $# = 0 ] ; then
        checkSeed -i                        # runs installer, no return
    else
        [ -x '/usr/local/bin/centaurisoho' ] || checkSeed -n
        . /usr/local/bin/centaurisoho --embed="$DAT_SELF" --base="$PWD" "$@"
    fi
fi

# End

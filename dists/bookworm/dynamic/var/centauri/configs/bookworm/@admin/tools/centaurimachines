#!/usr/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Dr. J. Pfennig (c) 2020-2025; BSD License"
CEN_TITLE=$"Manage repository staging and samba-ad/ntfs integration"

PATH+=":${0%/*}" . _centauri_bash_lib -a -d -f -r -s -y - '0.18:4' || exit 2

# Data
CEN_OPT_DOMAIN=                 # see --domain
CEN_OPT_NICK=                   # see --nick

CEN_OPT_ADD=                    # see --add
CEN_OPT_CHANGES=                # see --changes
CEN_OPT_DELETE=                 # see --delete
CEN_OPT_EDIT=                   # see --edit
CEN_OPT_EXEC=                   # see --execute
CEN_OPT_MERGE=                  # see --merge
CEN_OPT_PATH=                   # see --path
CEN_OPT_SETUP=                  # see --setup
CEN_OPT_UPDATE=                 # see --update

DAT_BASE="$CEN_ROOT/machines"
DAT_MAND=                       # updated in run() ...
DAT_DIST=
DAT_MESSAGE=message
DAT_SINGLE_MACHINE=

declare -A DAT_MAP_DISTUPD      # change state of distrib repos

# crate rsyncd.conf: <file>
do_config() {
    local empt lesc='***'
    if [ "$1" = '-' ] ; then
        empt='Â°' ; lesc='*<>*<>*'
    fi
    [ -z "$DAT_MAND" ] && netquery -s DAT_MAND domain
    DAT_MAND="${DAT_MAND%%.*}"
    create -c -- "$1" <<!EOF
# File '$DAT_BASE/rsyncd.conf' is the root of '/etc/rsyncd.conf'
# which is generated by $CEN_NAME to grant clients repository access...
$empt
gid = users
read only = false
use chroot = true
log format = %h %o %f %l %b
$empt
### public data ###
$empt
#[music]
#        read only = true
#        path = /export/Music
#        comment = Music library example configuration
#        uid = smbworld
#        gid = users
$empt
### administration ###
$empt
[@$DAT_MAND]
$empt        path = $CEN_ROOT
$empt        read only = false
$empt        comment = System administration tools and data
$empt        auth users = root
$empt        uid = root
$empt        gid = root
$empt        include = /archived /archived/$DAT_MAND/$lesc /backup /backup/$DAT_MAND /configs /configs/* /configs/*/@admin/$lesc /configs/*/$DAT_MAND/$lesc
$empt        exclude = *
$empt        secrets file = $CEN_ROOT/secrets/rsyncd_$DAT_MAND.secret
$empt
### autogenerated data ###

!EOF
}

# reflink newer files, remove deleted files: <source> <dest>
do_update() {
    [ -d "$1" ] || return
    trace -a "$1  ==>  $2"
    # use reflinks copy to update new files...
    system -e -n -p -t -- cp -a -u --reflink "$1" "$2"

    # run rsync --delete to remove deleted files
    local updt="--update"
    [ -n "$CEN_OPT_FORCE" ] && updt=
    system -e -n -p -t -- rsync -v --archive --protect-args --whole-file $updt --delete "$1" "$2"
}

do_merge() {
    if [ -n "$CEN_OPT_FORCE" ] ; then
        system -e -n -p -t -- cp -a -u --reflink "$2/$1" "$3"
    else
        embed -t -v -y centauridiff ${CEN_OPT_SILENT:+-s} --merge "$2/$1" "$3/$1"
    fi
}

# ------------------------------------------------------------------------------
# create machine repository: <host>[/<idnt>]
# ------------------------------------------------------------------------------
run_add() {
    local host="${1%%/*}" mreg
    local pasw="${1#*/}" ; [ "$1" = "$pasw" ] && pasw=
    local maid="$host/machine-id"
    local repo="$host/repository"
    local ktab="$host/krb5.keytab"
    local pasc ; [ -s "$maid" ] && pasc="$(<$maid)"

    # save machine id
    if [ -n "$pasw" ] ; then
        if [ -z "$CEN_OPT_FORCE" -a -n "$pasc" -a "$pasc" != "$pasw" ] ; then
            error "Use --force to change the machine-id" ; return
        fi
        mreg=" (register)"
        create -t -v pasw "$maid" 660 root:wheel
    # must have machine id file otherwise...
    elif [ "$host" = "$HOSTNAME" ] ; then
        copy '/etc/machine-id' "$maid"
    else
        pasw="$pasc"
        if [ -z "$pasw" ] ; then
            error "Cannot read secret:" "$host" ; return
        fi
    fi
    $DAT_MESSAGE "Adding machine         : $host$mreg"

    # create repository
    if [ -L "$repo" ] ; then
        $DAT_MESSAGE -a "Keeping repository link:" "$host"
    elif [ "$host" = "$HOSTNAME" ] ; then
        $DAT_MESSAGE -a "Repository is local    :" "$host"
        symlink "../.." "$repo"
    else
        [ -n "$CEN_OPT_FORCE" -a -e "$repo" ] && remove -d "$repo"

        folder -m "$repo"           775 'root:wheel'
        folder -m "$repo/archived/$DAT_MAND" 770 'root:wheel'
        folder -m "$repo/backup/$DAT_MAND"   770 'root:wheel'

        folder -m "$repo/configs"   775 'root:wheel'
        local dest="$repo/configs/$DAT_DIST"
        folder -m "$dest"           775 'root:wheel'
        folder -m "$dest/$DAT_MAND" 775 'root:wheel'
        error -t || return
        [ -z "$CEN_OPT_UPDATE" ] && run_update "$host"
    fi

    # create repository.conf
    create -c -t "$repo.conf" 600 <<!EOF
CEN_RSYNC_MODULE=$DAT_MAND-$host
CEN_RSYNC_PASSWD=$pasw
!EOF

    # create repository.secret
    create -c -t "$repo.secret" 600 <<!EOF
root:$pasw
!EOF

    # create repository.rsyncd
    P="$DAT_BASE"
    M="$DAT_MAND"
    H="$host"
    create -c -t "$repo.rsyncd" 600 <<!EOF
[@$M-$H]
        path = $P/$H/repository
        read only = false
        comment = System administration tools and configuration
        auth users = root
        uid = root
        gid = root
        include = /archived /archived/$M/*** /backup /backup/$M /configs /configs/* /configs/*/@admin/*** /configs/*/$M/***
        exclude = *
        secrets file = $P/$H/repository.secret

!EOF

    # update staging repository
    $DAT_MESSAGE -a "Updating staging repos.:" "$host"
    run_update "$host"

    # add to kerberos and get keytab
    if [ -e "$ktab" -a -u "$mreg" ] ; then
        $DAT_MESSAGE -a "Keeping kerberos state :" "$host"
    else
        # we do not create a samba AD/DC machine account here. The usual path to do so is:
        # centaurikerberos client ; centaurisecrects register -; ssh <server> centaurimachine --add
        embed -t -v -y centaurikerberos -O- -s -y -- machine add "$host" -- keytab "$host" -- host add "$host"
    fi
}

# ------------------------------------------------------------------------------
# worker
# ------------------------------------------------------------------------------
run_delete() {
    local host="$1" deld
    if [ ! -e "$host" ] ; then
        error "No such machine: $host" ; return
    elif [ -L "$host/repository" ] ; then             # not if symlinked
        error "Won't delete symlinked machine: $1" ; return
    fi

    if [ -n "$CEN_OPT_NICK" ] ; then
        local ddis dmor
        local dest dist dlis=("$host/repository/configs/"*)
        for dest in "${dlis[@]}" "" ; do
            [ -z "$dest" ] && break                 # end of list
            [ -d "$dest" ] || continue    # no repository
            dist="${dest##*/}"
            if [ "$CEN_OPT_NICK" = "$dist" ] ; then
                ddis="$dest"
            else
                dmor=1
            fi
        done
        if [ -z "$ddis" ] ; then                    # not found
            error "Distribution not found: $host ($CEN_OPT_NICK)" ; return
        fi
        if [ -n "$dmor" ] ; then                    # dist only
            $DAT_MESSAGE "Delete machine: $host ($dist)"
            deld="$ddis"
        fi
    fi

    if [ -z "$deld" ] ; then
        $DAT_MESSAGE "Delete machine: $host"
        deld="$host"
    fi
    remove -d -- "$deld"
    embed -t -v -y centaurikerberos -O- -s -y -- machine del "$host" -- host del "$host"
}

# ------------------------------------------------------------------------------
# get file paths: <file>
# ------------------------------------------------------------------------------
run_path() {
    local host="$1"
    local dest="$PWD/$host/repository/configs/$DAT_DIST"
    local orig="$CEN_ROOT/configs/$DAT_DIST"

    local file="$CEN_OPT_PATH" item splt
    ___pathchk() {
        for item in "$1$file" "$DAT_MAND/$1$file" - ; do
            [ "$item" = '-' ] && return 1
            #message "PATH $orig/$item"
            [ -e "$orig/$item" ] && break
            #message "PATH $dest/$item"
            [ -e "$dest/$item" ] && break
        done
        file="$item" ; return 0
    }

    case "$file" in
        /*)                                         # mangle name
            splitpath -a splt -p -- "${file:1}"
            file="${splt//\//_}+${splt[1]}"
            ___pathchk "@shared/d_" || ___pathchk "@shared/a_" || file="$CEN_OPT_PATH"
            ;;
        @*)
            ___pathchk
            ;;
        ?_*)
            ___pathchk "@shared/"
            ;;
        *)
            ___pathchk "@admin/tools/" || ___pathchk "@admin/library/"
    esac

    if [ ! -e "$dest/$file" ] ; then
        error $"File not in destination:" "$dest/$file"
        dest=
    fi
    if [ ! -e "$orig/$file" ] ; then
        error $"File not in origin:" "$orig/$file"
        orig=
    fi
    [ -z "$dest" -o -z "$orig" ] && return

    if [ -n "$CEN_OPT_EDIT" ] ; then
        embed -r -z centauridiff --prompt --fix "$dest/$file" "$orig/$file"
    elif [ "$CEN_OPT_EXEC" = '-' ] ; then
        embed -r -z centauridiff --pager=true "$dest/$file" "$orig/$file"
    elif [ "$CEN_OPT_EXEC" = '+' ] ; then
        embed -r -z centauridiff --kompare --fix "$dest/$file" "$orig/$file"
    elif [ -n "$CEN_OPT_EXEC" ] ; then
        $CEN_PAGER "$CEN_OPT_EXEC" "$dest/$file" "$orig/$file"
    else
        echo "$dest/$file"
        echo "$orig/$file"
    fi
}

# ------------------------------------------------------------------------------
# worker
# ------------------------------------------------------------------------------
run_merge() {
    local host="$1"
    local dest="$host/repository/configs/$DAT_DIST"
    local darc="$host/repository/archived/$DAT_MAND/$host"
    [ -L "$host/repository" ] && return     # not if symlinked
    [ -e "$host/repository" ] || return     # no repository
    [ -d "$dest" ] || return
    $DAT_MESSAGE "Merge machine: $host (${dest##*/})"

    # option --change
    if [ -n "$CEN_OPT_DRYRUN" -o -n "$CEN_OPT_CHANGES" ] ; then
        embed -r -i centauricopy --dry update "$dest" "$CEN_ROOT/configs/$DAT_DIST" \
                                -x _centauri_bash_completion -x _centauri_bash_lib -s
        [ "$darc" -nt "$CEN_ROOT/archived/$DAT_MAND/$host" ] &&
            message -i  "=>  $CEN_ROOT/archived/$DAT_MAND/$host"
        return
    fi

    # option --merge
    [ "$darc" -nt "$CEN_ROOT/archived/$DAT_MAND/$host" ] &&
        copy -a "$darc" "$CEN_ROOT/archived/$DAT_MAND/$host"
    do_merge '@admin'  "$dest"           "$CEN_ROOT/configs/$DAT_DIST"
    do_merge '@shared' "$dest/$DAT_MAND" "$CEN_ROOT/configs/$DAT_DIST/$DAT_MAND"
    do_merge "$host"   "$dest/$DAT_MAND" "$CEN_ROOT/configs/$DAT_DIST/$DAT_MAND"
}

# ------------------------------------------------------------------------------
# worker
# ------------------------------------------------------------------------------
run_update() {
    # a host may have multiple distros, loop if no --nick is given ...
    local host="$1" hoso
    [ -L "$host/repository" ] && return             # not if symlinked
    [ -e "$host/repository" ] || return             # no repository

    local dest dist dlis=("$host/repository/configs/$DAT_DIST")
    [ -n "$CEN_OPT_UPDATE" -a -z "$CEN_OPT_NICK" ] && dlis=("$host/repository/configs/"*)
    for dest in "${dlis[@]}" "" ; do
        [ -z "$dest" ] && return                    # end of list
        [ -d "$dest/$DAT_MAND" ] || continue        # no repository
        dist="${dest##*/}"

        # copy 'archived' to repository
        local darc="$host/repository/archived/$DAT_MAND/$host"
        [ "$darc" -nt "$CEN_ROOT/archived/$DAT_MAND/$host" ] &&
            copy -a -- "$darc" "$CEN_ROOT/archived/$DAT_MAND/$host"

        # check if repository was changed since last full run
        if dryrun || [ -n "$DAT_SINGLE_MACHINE" -o -n "$CEN_OPT_FORCE" ] ; then
            DAT_MAP_DISTUPD["$dist"]=0
        elif [ -z "${DAT_MAP_DISTUPD["$dist"]}" ] ; then
            embed -v -n -i centauritime check "$CEN_ROOT/configs/$dist"
            DAT_MAP_DISTUPD["$dist"]=$?
        fi
        [ "${DAT_MAP_DISTUPD["$dist"]}" = 0 ] || continue

        [ "$host" = "$hoso" ] || CEN_AUTOIND=       # reset indentation
        hoso="$host"

        if [ -n "$CEN_OPT_ADD" ] && [ ! -d "$dest/$DAT_MAND/$host" ] ; then
            folder -m -f "$dest/$DAT_MAND/$host"
            $DAT_MESSAGE -a "Create machine: $host ($dist)"
        else
            $DAT_MESSAGE -a "Update machine: $host ($dist)"
                                                    # orphaned machine?
            if ! folder -w "$dest/$DAT_MAND/$host" ; then
                message -i "              Please run:" "$CEN_NAME --nick=$dist --delete $host"
                continue
            fi
        fi

        if [ -n "$CEN_OPT_DRYRUN" ] ; then
            embed -r -i centauricopy -s --dry update "$dest/$DAT_MAND/$host" \
                                            "$CEN_ROOT/configs/$dist/$DAT_MAND/$host"
            embed -r -i centauricopy -s --dry update "$CEN_ROOT/configs/$dist" "$dest" \
                                -i "/@admin" -i "/$DAT_MAND/@shared" \
                                -i "/$DAT_MAND/$host" -x '/*'  -x '*.pyc' -x '*~' \
                                -x "_centauri_bash_completion" -x "_centauri_bash_lib"
            continue
        fi

        # create an empty backup list
        if [ ! -e "$darc" ] ; then
            folder -m -- "${darc%/*}" && create -- "$darc"
            message -a "Created:" "$darc"
        fi

        # merge back config updates of this host but only if PACKAGES exists ...
        [ -e "$dest/$DAT_MAND/$host/PACKAGES" ] &&
            do_update "$dest/$DAT_MAND/$host" "$CEN_ROOT/configs/$dist/$DAT_MAND"

        do_update "$CEN_ROOT/configs/$dist/@admin"            "$dest"
        do_update "$CEN_ROOT/configs/$dist/$DAT_MAND/@shared" "$dest/$DAT_MAND"
        do_update "$CEN_ROOT/configs/$dist/$DAT_MAND/$host"   "$dest/$DAT_MAND"
    done
}

# ------------------------------------------------------------------------------
# The one and only action
# ------------------------------------------------------------------------------
run() {
    context -r || return
    system -c -- rsync cp rm
    folder -c -f ${CEN_OPT_SETUP:+-m} "$DAT_BASE"

    # get domain os version

    local temp
    if [ -n "$CEN_OPT_DOMAIN" ] ; then
        DAT_MAND="$CEN_OPT_DOMAIN"
    else
        netquery -s DAT_MAND domain
    fi
    if [ -n "$CEN_OPT_NICK" ] ; then
        DAT_DIST="$CEN_OPT_NICK"
    else
        sysversion -f
        DAT_DIST="$CEN_SYS_NICKNAME"
    fi
    DAT_MAND="${DAT_MAND%%.*}"
    temp="$CEN_ROOT/configs/$DAT_DIST/${DAT_MAND:--}"
    [ -d "$temp" ] || quit -e "Main repository not found:" "$temp"
    trace -a -c "Main repository" -- "$temp"

    # setup staging folder

    if [ -n "$CEN_OPT_SETUP" ] ; then
        [ -e 'rsyncd.conf' ] || do_config 'rsyncd.conf'
    fi

    # get list of machines

    local fall mach marg mlis=()
    if [ $# = 0 ] ; then
        fall=1 ; set -- *
    else
        DAT_SINGLE_MACHINE=1
    fi
    for marg in "$@" ; do
        mach="${marg%%/*}"                      # strip machine-id
        if [ -n "${mach//[-_a-z0-9]/}" ] ; then
            [ -z "$fall" ] && error "Not a valid machine name:" "$mach"
            continue
        elif [ ! -d "$mach" ] ; then
            if [ -n "$CEN_OPT_ADD" ] ; then
                folder -m -f "$mach"
            else
                [ -z "$fall" ] && error "Not a machine folder:" "$mach"
                continue
            fi
        elif [ -n "$CEN_OPT_DELETE" ] ; then
            :
        elif [ "$marg" = "$mach" ] && [ ! -f "$mach/machine-id" ] ; then
            [ -z "$fall" ] && error "Not a registered machine:" "$mach"
            continue
        fi
        mlis+=("$marg")
    done
    error -t || return

    # call worker for machine

    for mach in "${mlis[@]}" ; do
        [ -n "$CEN_OPT_ADD"     ] && run_add    "$mach"
        [ -n "$CEN_OPT_CHANGES" ] && run_merge  "$mach"
        [ -n "$CEN_OPT_DELETE"  ] && run_delete "$mach"
        [ -n "$CEN_OPT_MERGE"   ] && run_merge  "$mach"
        [ -n "$CEN_OPT_PATH"    ] && run_path   "$mach"
    done
    error -t || return

    for mach in "${mlis[@]}" ; do
        [ -n "$CEN_OPT_UPDATE" ] && run_update "$mach"
    done
    error -t || return

    # generate rsyncd.conf
    [ -e 'rsyncd.conf' ] || quit -e "Missing static config file:" 'rsyncd.conf'
    if ! dryrun "Create /etc/rsyncd.conf" ; then
        cat rsyncd.conf */repository.rsyncd > /etc/rsyncd.conf || quit -e
    fi
}

# ------------------------------------------------------------------------------
# option parsing: <option> [<argument>]
# ------------------------------------------------------------------------------
options() {
    case "$1" in

    "")
        local   opts optn
        if [ -n "$CEN_OPT_ADD" -o -n "$CEN_OPT_DELETE" ] ; then
            optarg "$CEN_OPT_ADD$CEN_OPT_DELETE" - -m "--add --delete"
            opts=1 ; optn="--add" ; [ -n "$CEN_OPT_DELETE" ] && optn="--delete"
            CEN_RUN_MIN_ARGS=1              # must have machine name(s)
        fi
        optarg "$CEN_OPT_CHANGES$CEN_OPT_MERGE" - -m "--changes --merge"
        if [ -n "$CEN_OPT_PATH" ] ; then
            optarg "1$opts"            - -m "--path $optn"
            optarg "1$CEN_OPT_CHANGES" - -m "--path --changes"
            optarg "1$CEN_OPT_MERGE"   - -m "--path --merge"
            optarg "1$CEN_OPT_UPDATE"  - -m "--path --update"
            optarg "1$CEN_OPT_EDIT"    - -m "--path --edit"
        fi
        if [ -n "$CEN_OPT_EDIT" ] ; then
            optarg "1$opts"            - -m "--edit $optn"
            optarg "1$CEN_OPT_CHANGES" - -m "--path --changes"
            optarg "1$CEN_OPT_MERGE"   - -m "--edit --merge"
            optarg "1$CEN_OPT_UPDATE"  - -m "--edit --update"
            optarg "1$CEN_OPT_EXEC"    - -m "--edit --exec"
            CEN_OPT_PATH="$CEN_OPT_EDIT"
        fi
        if [ -n "$CEN_OPT_EXEC" ] ; then
            [ -z "$CEN_OPT_PATH" ] && error "Missing --path option"
            [ "$CEN_OPT_EXEC" = '-' -o "$CEN_OPT_EXEC" = '+' ] ||
                system -e -c -- "$CEN_OPT_EXEC"
        fi
        [ -n "$CEN_OPT_MERGE"  ] && optarg "1$opts" - -m "--merge $optn"
        [ -n "$CEN_OPT_UPDATE" ] && optarg "1$opts" - -m "--update $optn"
        [ -n "$CEN_OPT_SILENT" ] && DAT_MESSAGE=trace
        ;;

    -A|--add)
        optarg "add"        -   ;;              # flag
    -C|--cha*)
        optarg "changes"    -   ;;              # flag
    -D|--del*)
        optarg "delete"     -   ;;              # flag
    -E|--edi|--edit)
        optarg "edit"     - -t  ;;              # text
    -I|--dom*)
        optarg "domain"   - -t  ;;              # text
    -M|--mer*)
        optarg "merge"      -   ;;              # flag
    -N|--nic*)
        optarg "nick"     - "[^/]*"  ;;         # text
    -P|--pat|--path)
        optarg "path"     - -t  ;;              # text
    -S|--set*)
        optarg "setup"    -     ;;              # flag
    -U|--upd*)
        optarg "update"   -     ;;              # flag
    -X|--exe*)
        optarg "exec"     - -t  ;;              # text
    esac
}

# ------------------------------------------------------------------------------
# usage info
# ------------------------------------------------------------------------------
usage() {
     usageset -u "$CEN_NAME <option>... [<mach>...]" \
              -u "$CEN_NAME <option>... -A [<mach>[/<idnt>]...]" \
              -u - \
              -u "$CEN_TITLE."

    usagecat << !EOF
$CEN_USE_HEADER Clients must
register their machine-id in the staging repository for centauriconfig,
centaurisecrets and for obtaining their kerberos keytab. See:

        centaurikerberos client     # register a client, get keytab
        centaurisecrets register    # used by centaurikerberos
        centaurisecrets client      # client requests secrets
        centaurisecrets server      # server sends secrets
        centauriconfig sync         # sync client with repository

$CEN_USE_OPTIONS

       -I --domain  domain  override the domain name
       -N --nick    distro  override the distribution nick name

       -A --add             add machine(s), see 'centaurisecrects register'
       -C --changes         show changes (what --merge would copy)
       -D --delete          delete machine(s)
       -M --merge           merge back to main repository
       -U --update          update private machine repository

       -E --edit    name    enter an interactive mode
       -P --path    name    generate origin/destination file paths
       -X --exec    prog    runs a diff tool, needs --path to specify a file

       -S --setup           setup the staging folder

       The --force option can be used to replace a private repository (--add)
       or override newer private files (--update) or to merge back not only
       machine specific files (--merge).

       For --add --delete and --merge the --nick option might be required to
       use another than the current distribution. The --update command uses
       all configured distros if --nick is not specified.

       If --add is used without <idnt> a new machine-id is generated. Be aware
       that this will not create a AD/DC machine account. To add a new machine
       to a domain run 'centaurikerberos client' on the new machine.

The script generates '/etc/rsyncd.conf' to allow registered clients to access
the staging repository. So centauriconfig will not alter the main repository.
To sync staging from main centauricron calls "$CEN_NAME -U" hourly.
Updating main from staging must be done manually, see "$CEN_NAME -M".

examples:
       $CEN_NAME -A neptun pluto                # add two machines
       $CEN_NAME -D pluto                       # delete a machine
       $CEN_NAME -D neptun -N buster            # delete distro 'buster' only

       $CEN_NAME -U saturn                      # update a single machine
       $CEN_NAME -U                             # update all
       $CEN_NAME -M                             # merge back to main repository
       $CEN_NAME -U -M                          # udate and merge
!EOF
    usagecat -v "more:  Use -- to show the rsyncd configuration." << !EOF
config: $(do_config -)
!EOF
}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

#!/usr/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2007-2024; BSD License"
CEN_TITLE=$"Template using command line verbs (action syntax)"

MINIMAL="${MINIMAL:-false}" ####################################################
if $MINIMAL ; then #############################################################
# Import the bash library
PATH+=":${0%/*}" . _centauri_bash_lib -a -d - '0.10:2' || exit 2

# Data
CEN_OPT_XXX=                    # see --xxx

# ------------------------------------------------------------------------------
# xxx: -no args-
# ------------------------------------------------------------------------------
actionXxx() {
    :
}

else ###########################################################################
# Import the bash library, set name and version TODO
PATH+=":${0%/*}" . _centauri_bash_lib -a -d -i -t -y -m bat - '0.10:2' || exit 2

# Data

# TODO data for extra options
CEN_OPT_ARRAY=()        # DEMO see --array
CEN_OPT_EXTRA=          # DEMO see --extra
CEN_OPT_CHOICE=         # DEMO see --choice
CEN_OPT_NUMBER=         # DEMO see --number
CEN_OPT_RECURSE=        # DEMO see --recurse

# ------------------------------------------------------------------------------
# TODO implement an action
# ------------------------------------------------------------------------------
actionOne() {
    dryrun "Demo actionOne" && return

    # example of removing a '-' placeholder
    local arg1 ; [ "$1" = '-' ] || arg1="$1"

    # process
    [ -z "$arg1" ]    && error $"Got no argument value"
    [ "$arg1" = "+" ] && error $"Got a '+' as argument"
    error -t || return
    confirm -a $"Echo the argument" && message -i $arg1

    [ -n "${CEN_OPT_ARRAY[*]}" ] &&
        trace "array  : size=${#CEN_OPT_ARRAY[*]} data=(${CEN_OPT_ARRAY[@]})"
    [ -n "$CEN_OPT_NUMBER"     ] && trace -a -c  'number'  "$CEN_OPT_NUMBER"
    [ -n "$CEN_OPT_EXTRA"      ] && trace -a -c  'extra'   "$CEN_OPT_EXTRA"
    [ -n "$CEN_OPT_CHOICE"     ] && trace -a -c  'choice'  "$CEN_OPT_CHOICE"
    [ -n "$CEN_OPT_RECURSE"    ] && trace -a -c  'recurse' "$CEN_OPT_RECURSE"
}

# ------------------------------------------------------------------------------
# TODO implement an action
# ------------------------------------------------------------------------------
actionTwo() {
    # example to get a variable number of arguments
    local arg1='-' arg2='-' arg3='-'
    [ $# -gt 0 -a "$1" != '-' ] && arg1="arg1='$1'"
    [ $# -gt 1 -a "$2" != '-' ] && arg2="arg2='$2'"
    [ $# -gt 2 -a "$3" != '-' ] && arg3="arg3='$3'"
    message -a "$arg1" "$arg2" "$arg3"
}

# ------------------------------------------------------------------------------
# TODO implement an action
# ------------------------------------------------------------------------------
actionWood() {
    __file() {
        message -a $"File:" "$1"
        return 1
    }
    __dir() {
        message -a $"Dir: " "$1"
        return 1
    }

    walk ${CEN_OPT_RECURSE:+-r} -f __file -d __dir -i -- "$@"
}
fi #############################################################################

# ------------------------------------------------------------------------------
# TODO implement option parsing: <option> [<argument>]
# ------------------------------------------------------------------------------
options() {
if $MINIMAL ; then #############################################################
    case "$1" in

    -X|--XXXX)
        optarg 'xxxx'       -    -t ;;          # text argument

    esac
else ###########################################################################
    case "$1" in

    '')
        if [ "${CEN_OPT_BATCH:-none}" != 'none' ] ; then
            batchmode -c -- --number=3 one 1
            batchmode -c -- one 2 -- two tick tack
        fi ;;

    -A|--arr*)
        optarg 'array'      []  -t  ;;          # an array of text
    -C|--cho*)
        optarg 'choice'     -   'left|right' ;; # regular expression
    -N|--number)
        optarg 'number'     -   -n  ;;          # a number
    -R|--rec*)
        optarg 'recurse'    -       ;;          # a simple flag
    -X|--extra)
        optarg 'extra'      -   -t  ;;          # any text

    esac
fi #############################################################################
}

# ------------------------------------------------------------------------------
# TODO implement action parsing: <verb> <argument>...
# ------------------------------------------------------------------------------
actions() {
if $MINIMAL ; then #############################################################
    case "$1" in

    xxx)
        invoke 'xxx'    -           1 3 ;;                  # 1..3 args

    esac
else ###########################################################################
    case "$1" in

    '')
        trace -a -c 'Options'   -- "${CEN_CMDOPTS[@]}"
        trace -a -c 'Arguments' -- "${CEN_CMDARGS[@]}" ;;   # before 1st action

    one)
        invoke 'one'    -           1 ;;                    # one arg
    two)
        invoke -        -           1 3 ;;                  # 1..3 args
    thr*)
        invoke 'three'  actionWood  1 + ;;                  # more than one arg

    /*|.*|*.*)
        invoke '<file>' actionWood  - - "$@"                # implied action

    esac
fi #############################################################################
}

# ------------------------------------------------------------------------------
# TODO print usage info
# ------------------------------------------------------------------------------
usage() {
if $MINIMAL ; then #############################################################
    usageset \
        -o - \
        -o "-X --XXX    <text>   "$"an option"
else ###########################################################################
    usageset \
        -o - \
        -o "-A --array  <text>   "$"DEMO an array option" \
        -o "-C --choice <dir>    "$"DEMO (\"left\"|\"right\")" \
        -o "-N --number <number> "$"DEMO (number)" \
        -o "-R --recurse         "$"DEMO (flag)" \
        -o "-X --extra  <text>   "$"DEMO (text)"
    usageset \
        -a "one   <arg>          "$"action one   - takes one arg" \
        -a "two   <arg> [<arg>|- [<arg>|-]]" \
        -a "                     "$"action two   - takes 1..3 args" \
        -a "three <arg>...       "$"action three - at least one arg"
    usageset \
        -p "<arg>                "$"any argument" \
        -p "<text>               "$"any text" \
        -p "<dir>                "$"choice \"left\" or \"right\"" \
        -p "<number>             "$"any positive number"
fi #############################################################################
}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

#!/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Dr. J. Pfennig (c) 2020-2024; BSD License"
CEN_TITLE="Tool run by the SLAVE server to mirror the MASTER server"

PATH+=":${0%/*}" . _centauri_bash_lib -a -d -i -s - '0.02:4' || exit 2

CEN_OPT_DIST=                   # see --dist
CEN_OPT_MASTER=                 # ser --master

# Data
DAT_BASE="/mnt"
DAT_CRON_FLG=

# Map of destination volume paths
declare -A DAT_VOLUMES

# find_volumes: <mount>
find_volumes() {
    [ -n "$DAT_VOLUMES" ] && return 0
    if [ ! -d "$1" ] ; then
        error "Not a folder:" "$1" ; return 1
    fi

    local name path
    for path in "$1"/vol?/Volumes/* ; do
        name="${path##*/}"
        [ -z "${name//[A-Za-z]}" ] || continue
        [ "${name,,}" = "backup" ] && continue
        [ -d "$path" ] || continue
        DAT_VOLUMES["$name"]="$path"
        trace -a -c "Found volume" -- "$name ($path)"
    done
    return 0
}

# syncronize a volume to snapshot: <volume>
sync_volume() {
    message -a "Synchronize Volume: $1"

    local opts=("--quiet" "--silent" "--local=on" "--one")
    local repl orig
    local volu="${DAT_VOLUMES["$1"]}"
    local volp="$volu.mirror"
    local volo="$volu.old"

    if [ ! -d "$volp" ] && ! dryrun -s "Create $volp" ; then
        embed -v -- centaurisnapshot --windows=off --suffix=mirror save "$1" || return
    fi

    case "${1,,}" in
        root)   orig="${DAT_VOLUMES["$1"]}$CEN_OPT_DIST" ;;
        home)   orig="${DAT_VOLUMES["$1"]}$CEN_OPT_DIST" ;;
        *)      orig="/mnt/${1,,}"
    esac
    opts+=("--volume=${1^}")
    embed -v centauricopy "${opts[@]}" mirror "$CEN_OPT_MASTER:$orig" "$volp"
}

# backups: copy only Backup/{data|disk}
sync_backup() {
    local item
    for item in /mnt/backup/Backup/disk /mnt/backup/Backup/data ; do
        [ -d "$item" ] || continue
        embed -v -z -- centauriremove --free 40G --yes "$item"
        # don't delete anything
        embed -v -z -- centauricopy update --local=on --one "$CEN_OPT_MASTER:$item" "$item"
    done
}

# rename/copy volume: <volume>
commit_volume() {
    local volu="${DAT_VOLUMES["$1"]}"
    local volp="$volu.mirror"
    local volo="$volu.old"

    if [ ! -d "$volp" ] ; then
        message -a "Commit Volume: $1 (no mirror data: $volp)" ; return
    else
        message -a "Commit Volume: $1 ($volu)"
    fi
    if [ -d "$volo" ] ; then
        system -e -p -- btrfs subvolume delete "$volo" || return
    fi

    # rename volume tag file
    local host="${HOSTNAME^^}"
    local tags=("$volp"/${host%[0-9]}?_${1^^})
    [ -f "$tags" ] && rename -o -- "$tags" "$volp/${host}_${1^^}"

    # rename volume or copy data
    case "${1,,}" in
        root)   update_root "$volp" "$volu"
                ;;
        home)   update_home "$volp" "$volu"
                ;;
        # simple: replace volume with mirror
        *)      local vmnt="/mnt/${1,,}"
                if [ -e "$vmnt" ] && system -r -q -- mountpoint -q "$vmnt" ; then
                    message -a "Unmount Volume: $vmnt"
                    system -e -p -- sync "$vmnt"
                    system -e -p -- umount "$vmnt"
                fi

                rename -- "$volu" "$volo" || return
                rename -- "$volp" "$volu"
    esac
}

# copy_user: <folder> <volume>
update_root() {
    local opts=("--quiet" "--silent" "--one" "--delete")
    local mori="$1/var/Mail"
    local mdes="$2/var/Mail"
#
#    # partial sync of root (mail)
#    runservice stop cyrus-imapd
#    system -e -p -- find "$mdes/var_spool_cyrus/mail" \( -name cyrus.squat -o -name cyrus.cache \) -delete
#    embed -v -- centauricopy "${opts[@]}" -x cyrus.squat -x cyrus.cache copy "$mori" "$mdes"
#    embed -v -- centaurimail restore -- index

    copy_user "$1/root" "$2/root"
}

# update home folders: <source> <dest>
update_home() {
    local user
    for user in "$1"/* ; do
        copy_user "$user" "$2/${user##*/}"
    done
}

# copyr user data: <source> <dest>
copy_user() {
    [ -d "$1" ] || return
    trace -a "   $1  =>  $2"
    [ -d "$2" ] || folder -f -m -- "$2"

    # partial sync of home volume (no .dot dirs)
    local fldr opts=("--quiet" "--silent" "--one" "--delete")
    for fldr in "$1"/.encfs_*/*/WARNING_FOLDER_NOT_ARCHIVED ; do
        [ -f "$fldr" ] || continue
        fldr="${fldr%/*}"
        message -a "Encrypted cache: $fldr"
        opts+=("-x" "${fldr#$1}")
    done
    embed -v -- centauricopy copy "${opts[@]}" -i "/.encfs_*" -x '/.*' "$1" "$2"
}

# delete 'old' volume snapshot: <volume>
cleanup_volume() {
    local volu="${DAT_VOLUMES["$1"]}"
    local volo="$volu.old"

    case "${1,,}" in
        root|home)
                 message -a "Cleanup Volume: $1 (skip)" ; return
                ;;
    esac

    if [ ! -d "$volo" ] ; then
        message -a "Cleanup Volume: $1 (no backup data)" ; return
    else
        message -a "Cleanup Volume: $1"
    fi
    if [ -d "$volo" ] ; then
        system -e -p -- btrfs subvolume delete "$volo" || return
    fi
}

# ------------------------------------------------------------------------------
# action check
# ------------------------------------------------------------------------------
actionCheck() {
    find_volumes "$DAT_BASE" && return          # ok, got volumes
    local mesg
    [ -z "$CEN_OPT_SILENT" ] && mesg=message || mesg=trace
    $mesg "Found no volumes, no mirror action taken."
    error -s 11 ; quit
}

# ------------------------------------------------------------------------------
# action cleanup
# ------------------------------------------------------------------------------
actionCleanup() {
    [ -n "$DAT_CRON_FLG" ] && message "Cleanup server downloads"
    find_volumes "$DAT_BASE" || return

    local volu
    for volu in "${!DAT_VOLUMES[@]}" ; do
        filter -i -- "$volu" || continue
        cleanup_volume "$volu"
    done
}

# ------------------------------------------------------------------------------
# action commit
# ------------------------------------------------------------------------------
actionCommit() {
    [ -n "$DAT_CRON_FLG" ] && message "Commit server downloads"
    find_volumes "$DAT_BASE" || return

    local volu
    for volu in "${!DAT_VOLUMES[@]}" ; do
        filter -i -- "$volu" || continue
        commit_volume "$volu"
    done

    system -e -p -- mount -a                # remount fstab mounts

    runservice stop nfs-kernel-server       # don't block unmounts
    sleep 5 ; sync

    set -- /etc/systemd/system/*.wants/centaurimounter.service
    if [ -e "$1" ] ; then
        message -a "Restart centaurimounter"
        runservice restart centaurimounter  # refresh mounts
    else
        message -a "Restart autofs"
        runservice restart autofs           # refresh autofs
    fi
    runservice start nfs-kernel-server
    sleep 5
}

# ------------------------------------------------------------------------------
# action mirror
# ------------------------------------------------------------------------------
actionMirror() {
    [ -n "$DAT_CRON_FLG" ] && message "Mirror server volumes"
    find_volumes "$DAT_BASE" || return

    local volu
    for volu in "${!DAT_VOLUMES[@]}" backup ; do
        filter -i -- "$volu" || continue
        if [ "$volu" = "backup" ] ; then
            sync_backup
        else
            sync_volume "$volu"
        fi
    done
}

# ------------------------------------------------------------------------------
# action repository
# ------------------------------------------------------------------------------
actionRepository() {
    [ -n "$DAT_CRON_FLG" ] && message "Synchronize repository"
    embed -v -- centauriconfig cron --role=work --repository=alpha
}

# ------------------------------------------------------------------------------
# action shutdown: [<time>]
# ------------------------------------------------------------------------------
actionShutdown() {
    local stim="${1:-+10}"
    system -e -p -- /sbin/shutdown -h $stim \
           "$CEN_NAME: Shutdown sheduled, run 'sudo /sbin/shutdown -c' to cancel."
}

# ------------------------------------------------------------------------------
# option parsing: <option> <argument>
# ------------------------------------------------------------------------------
options() {
    case "$CEN_ACTION" in

    '')     [ -z "$CEN_OPT_MASTER" ] && netquery -f -s CEN_OPT_MASTER primary ;;

    -D|--dis*)
        optarg 'dist'       -       -v && CEN_OPT_DIST="-$2" ;;
    -M|--mas*)
        optarg 'master'     -       -v ;;           # variable name
    esac
}

# ------------------------------------------------------------------------------
# action parsing: <verb> <argument>...
# ------------------------------------------------------------------------------
actions() {
    case "$1" in

    '') # check if we are slave
        if ! netquery SLAVE ; then
            local mesg
            [ -z "$CEN_OPT_SILENT" ] && mesg=message || mesg=trace
            $mesg "This is not a SLAVE server, no mirror action taken."
            error -s 10 ; quit
        fi
        ;;

    che*)
        invoke -r 'check'        -  0 ;;
    cle*)
        invoke -r 'cleanup'      -  0 ;;
    com*)
        invoke -r 'commit'       -  0 ;;
    cro|cron)
        DAT_CRON_FLG=1
        invoke -r 'repository'   -  0
        invoke    'mirror'       -  0
        invoke    'commit'       -  0
        invoke    'cleanup'      -  0 ;;
    mir*)
        invoke -r 'mirror'       -  0 ;;
    rep*)
        invoke -r 'repository'   -  0 ;;
    shu*)
        invoke -r 'shutdown'     -  0 1 ;;

    esac
}

# ------------------------------------------------------------------------------
# print usage info
# ------------------------------------------------------------------------------
usage() {
    usagecat << !EOF
$CEN_USE_HEADER

$CEN_USE_OPTIONS

       -D --dist    <nick>  add distribution name to root/home btrfs-volumes
       -M --master  <host>  override name of master (default: $CEN_OPT_MASTER)

actions:
       check                test if we are a SLAVE and if there are btrfs volumes

       cron                 short for 'repository -- mirror -- commit -- cleanup'

       repository           update the configuration repository
       mirror               mirror data
       commit               make syncronized data current
       cleanup              remove .old volumes

       shutdown   [<time>]  shedule shutdown (not included in cron)
!EOF
}


# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

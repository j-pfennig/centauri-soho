#!/usr/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2017-2025; BSD License"
CEN_TITLE="Restore a centauribackup, optionally cloning an existing machine"

PATH+=":${0%/*}" . _centauri_bash_lib -a -d -m bat -r -y - '0.61:4' || exit 2

# Options

CEN_FLG_ALL=            # see --all
CEN_FLG_BOOT=           # see --boot
CEN_FLG_CLONE=()        # see --clone
CEN_FLG_DIST=           # see --dist
CEN_FLG_LABEL=          # see --label
CEN_FLG_MKFS=           # see --format
CEN_FLG_EXTFS=          # ext3=3 ext4=4 default=brtfs
CEN_FLG_PART=           # root partition, see --partion
CEN_FLG_SWAP=           # swap partition, see --swap
CEN_FLG_GRUB=
CEN_FLG_IMAGE=          # use image file, see --image
CEN_FLG_MOUNT=          # mount point,    see --mount
CEN_FLG_REST=
CEN_FLG_UNMOUNT=

# Data

CEN_DAT_DOMAIN=         # from --clone
CEN_DAT_LABEL=          # root label, see do_label()
CEN_DAT_LSWAP=          # swap label, see do_label()
CEN_DAT_FIXUP=          # run do_fixup once flag

CEN_DAT_VROOT='Volumes/Root'
CEN_DAT_VHOME='Volumes/Home'

CEN_TAR_OPTS='--numeric-owner'

# ------------------------------------------------------------------------------
# Helpers
# ------------------------------------------------------------------------------

# check a restore file argument: <file>
_do_chk_file=
do_chk_file() {
    _do_chk_file=
    [ -z "$1" -o "$1" = '-' ] && return
    prettypath -c -s _do_chk_file -- "$1"
    [ -r "$_do_chk_file" ] && return 0
    error "Cannot read file: $_do_chk_file"
    _do_chk_file= ; return 1
}

# check for writable block device: <device>
do_chk_block() {
    if [ ! -b "$1" ] ; then
        error "Not a block device: $1"
    elif [ ! -w "$1" ] ; then
        error "Cannot write to: $1"
    else
        return 0
    fi
    return 1
}

# check swap partition
do_chk_swap() {
    [ "${CEN_FLG_SWAP:--}" = '-' ] && return 0
    [ "${CEN_FLG_SWAP::1}" = '/' ] || CEN_FLG_SWAP="/dev/${CEN_FLG_SWAP#/dev/}"
    do_chk_block "$CEN_FLG_SWAP"              # return status
}

# check the given partion
do_chk_part() {
    [ -n "$1" ] && CEN_FLG_PART="$1"

    if [ -z "$CEN_FLG_PART" ] ; then
        error "No root partition specified"
        return 1
    fi
    [ "${CEN_FLG_PART::1}" = '/' ] || CEN_FLG_PART="/dev/${CEN_FLG_PART#/dev/}"
    [ -n "$CEN_FLG_IMAGE" ] && return
    do_chk_block "$CEN_FLG_PART"              # return status
}

# try to find a nice path name: [-p]
_do_nicename=
do_nicename() {
    local phys logi
    if [ "$1" = "-p" ] ; then
        phys=$(readlink -f "$2") ; _do_nicename="$phys"
    else
        phys=$(readlink -f "$1") ; _do_nicename="$1"
    fi

    case "$phys" in
    /.autolocal/*_*)    logi="/mnt/${phys#*_}"  ;;
    /.automount/*_*)    local host="${phys:12}"
                        logi="/data/${host%%_*}/${phys#*_}";;
    /run/shm|/run/tmp)  logi="/tmp" ;;
    /run/shm/*|/run/tmp/*)
                        logi="/tmp${phys:8}" ;;
    esac

    if [ -n "$logi" -a -e "$logi" ] ; then
        [ "$_do_nicename" -ef "$logi" ] && _do_nicename="$logi"
    fi
}

# ------------------------------------------------------------------------------
# create required /dev entries and folders
# ------------------------------------------------------------------------------
do_fixup() {
    [ -n "$CEN_DAT_FIXUP" ] && return
    message -a "Check/create required folders"
    CEN_DAT_FIXUP=1

    # make /tmp a symlink if missing
    [ -d 'tmp' ] || symlink -m '/dev/shm' 'tmp'

    # in case that udev is not used
    if [ -d 'dev' ] ; then
        [ -e 'dev/console' ] || system -e -p mknod -m 660 'dev/console' c 5 1
        [ -e 'dev/null'    ] || system -e -p mknod -m 660 'dev/null'    c 1 3
    fi

    system -e -p chmod 755 '.'
    attributes -d -k -m 755 -- 'dev' 'proc' 'sys' 'var' 'var/lib'
    attributes -d -k -m 755 -o root:wheel -- 'var/lib/centauri'

    # fix apt permissions (same code as in centaurisecurity)
    if [ -d 'var/lib/apt' ] ; then
        attributes -d -m 755 -o root:root -- 'var/lib/apt/lists'         'var/cache/apt/archives'
        attributes -d -m 700 -o _apt:root -- 'var/lib/apt/lists/partial' 'var/cache/apt/archives/partial'
    fi
}

# ------------------------------------------------------------------------------
# handle formatting and labelling
# ------------------------------------------------------------------------------
do_format() {
    [ -n "$CEN_DAT_LABEL" ] && message -a "Will label root partition as:" "$CEN_DAT_LABEL"

    # do we need a mount point?
    if [ -n "$CEN_FLG_MOUNT" ] ; then
        if [  -d "$CEN_FLG_MOUNT" ] ; then
            message -a "Using moint point:" "$CEN_FLG_MOUNT"
        else
            folder -f -m -r -t '_mount' ; CEN_FLG_MOUNT="$CEN_FOLDER"
            message -a "Created moint point:" "$CEN_FLG_MOUNT"
        fi
        [ -d "$CEN_FLG_MOUNT" ] || fatal "Not a directory:" "$CEN_FLG_MOUNT"
        [ -w "$CEN_FLG_MOUNT" ] || fatal "Cannot write to:" "$CEN_FLG_MOUNT"
    fi

    # --- formatting ---

    [ -n "$CEN_FLG_PART" ] && system -q -r umount "$CEN_FLG_PART"
    system -q -r umount "$CEN_FLG_MOUNT"

    if [ -n "$CEN_FLG_MKFS" ] ; then

        if [ -n "$CEN_FLG_EXTFS" ] ; then
           message -a "Creating ext$CEN_FLG_EXTFS filesystem ..."
           confirm -a "Format $CEN_FLG_PART" || quit -t
           mopt="-t ext4"
           [ "$CEN_FLG_EXTFS" = 3 ] && mopt="-O dir_index"
           system -f -p mke2fs -q -j -m0 $mopt "$CEN_FLG_PART"
        else
           message -a "Creating btrfs filesystem ..."
           confirm -a "Format $CEN_FLG_PART" || quit -t
           embed centaurisnapshot --yes init "$CEN_FLG_MOUNT" "$CEN_FLG_PART" "${CEN_FLG_LABEL:--}" || quit
        fi
        CEN_YESNO="y"
    fi

    if [ -n "$CEN_FLG_PART" ] ; then
        if [ "${CEN_DAT_LABEL:--}" = '-' ] ; then
            if [ -n "$CEN_FLG_EXTFS" ] ; then
                message -a "Disable disk checks ..."
                system -f -p tune2fs -c0 -i0 "$CEN_FLG_PART"
            fi
        else
            message -a "Writing Label '$CEN_DAT_LABEL' ..."
            if [ -n "$CEN_FLG_EXTFS" ] ; then
                system -f -p tune2fs -c0 -i0 -L "$CEN_DAT_LABEL" "$CEN_FLG_PART"
            else
                system -f -p btrfs filesystem label "$CEN_FLG_PART" "$CEN_DAT_LABEL"
            fi
        fi
    fi
}

# ------------------------------------------------------------------------------
# determine swap/root labels: <archive>
# ------------------------------------------------------------------------------
do_label() {
    # implicit label: see --name and archive
    [ -z "$CEN_FLG_LABEL" ] && CEN_FLG_LABEL="$CEN_FLG_CLONE"
    [ -z "$CEN_FLG_LABEL" ] && CEN_FLG_LABEL="${1##*/}" && CEN_FLG_LABEL="${CEN_FLG_LABEL%%[_-]*}"
    [ -n "$CEN_FLG_LABEL" ] || return                   # no archive

    local sufi='root'
    [ -z "$CEN_FLG_EXTFS" ] && sufi="vol0"

    # append "_root" and "_swap" suffixes
    case "$CEN_FLG_LABEL" in
    -)                                                  # no labels
                ;;
    *_swap)     CEN_DAT_LABEL="${CEN_FLG_LABEL%_*}_$sufi"
                CEN_DAT_LSWAP="${CEN_FLG_LABEL}"
                ;;
    *_*)        CEN_DAT_LABEL="${CEN_FLG_LABEL}"
                CEN_DAT_LSWAP="${CEN_FLG_LABEL%_*}_swap"
                ;;
    *)          CEN_DAT_LABEL="${CEN_FLG_LABEL}_$sufi"
                CEN_DAT_LSWAP="${CEN_FLG_LABEL}_swap"
    esac
}

# ------------------------------------------------------------------------------
# generate a new machine id
# ------------------------------------------------------------------------------
do_machine_id() {
    remove -f 'etc/machine-id' 'var/lib/dbus/machine-id'
    if type -t systemd-machine-id-setup >/dev/null ; then
        system -p systemd-machine-id-setup --root=.
        symlink '/etc/machine-id' 'var/lib/dbus/machine-id'
    fi
}

# ------------------------------------------------------------------------------
# write a marker: <folder> <text>
# ------------------------------------------------------------------------------
do_marker() {
    local host="${CEN_FLG_CLONE:--}"
    [ "$host" = '-' ] && host="${CEN_DAT_LABEL##*/}" && host="${host%%[_-]*}"
    [ -n "$host" ] || return
    [ -d "$1" ] || return
    local text="${2##*_}" ; [ -z "$text" ] && text='root'
    [ "$text" = 'root' ] && do_marker "$1/export" 'export'
    local mark="${host}_$text" ; mark="${mark^^}"
    [ -e "$1/$mark" ] && return
    eval set -- "$1/$mark" "$1"/[A-Z]*_"${text^^}"
    remove -- "$2"
    system -e -p -- touch -- "$1"
}

# ------------------------------------------------------------------------------
# rewrite a config file: <file> <regx>
# ------------------------------------------------------------------------------
do_rewrite() {
    local fnam="$1" ; shift
  #  if [ -n "$CEN_OPT_DRYRUN" ] ; then
  #      message -a "dryrun: not rewriting: $fnam" ; return 0
  #  fi
    dryrun -s "Not rewriting: $fnam" && return 0
    if [ ! -r "$fnam" ] ; then
        warning "Cannot rewrite: $fnam" ; return 1
    fi

    system -e -p sed --regexp-extended --in-place=".$CEN_NAME" -e "$1" "$fnam"
    message -a -c "Rewrote" "$fnam"
}

# ------------------------------------------------------------------------------
# rename the computer: -no args-
# ------------------------------------------------------------------------------
do_rename() {
    local full home base name="${CEN_FLG_CLONE:--}"
    local vroot="$CEN_DAT_VROOT" vhome="$CEN_DAT_VHOME"
    [ "$name" = '-' ] && name="${CEN_DAT_LABEL##*/}" && name="${name%%[_-]*}"

    if [ -z "$name" ] ; then
        error "Don't know new name, cannot rename" ; return 1
    fi

    if [ -n "$CEN_FLG_BOOT" ] ; then            # restoring efi partition
        do_update "$name" ; return              # update only grub and loader
    fi

    # on BRTFS
    if matchpath -d -o -s vroot "$vroot-$CEN_FLG_DIST" "$vroot" ; then
        base="$PWD"
        matchpath -d -o -p -s home "$vhome-$CEN_FLG_DIST" "$vhome" ||
            fatal "Missing 'Home' volume"
        folder -c -f "$vroot"

    elif [ -z "$CEN_OPT_DRYRUN" -a ! -d 'etc' ] ; then
        error "No '/etc' folder, cannot rename" ; return 1
    elif [ '../Root/etc' -ef 'etc' ] ; then     # on BTRFS ...
        base='../..' ; home='../Home'
    fi

    do_fixup                                    # fix missing things
    if [ "$name" = '+' ] ; then
        confirm -a "Generate a new machine-id" && do_machine_id
        return 0
    fi

    local item orig='<unknown>' conf="${CEN_ROOT:1}/default/centaurinetcfg"
    [ -r 'etc/hostname' ] && orig="$(< etc/hostname)"
    if [ "$orig" = "$name" ] ; then
        if [ -z "${CEN_FLG_CLONE[1]}" ] ; then
            trace -a "The machine name is '$name', no rename"
            return 0
        fi
    elif [ -z "$CEN_OPT_DRYRUN" ] ; then
        confirm -a "Rename machine: $orig => $name" || return 1
    else
        message -a "Rename machine: $orig => $name"
    fi

    do_marker "$base" 'vol0' ; do_marker "$home" 'home' ; do_marker '.'
    do_machine_id
    confirm -n -b "Generate new ssh host keys" &&
        embed -i -v centaurikeys -y -q hostkeys 'etc/ssh'

    # remove persistent device names (legacy)
    remove -f 'etc/udev/rules.d/'*-persistent-*
    # remove name override
    remove -f 'etc/sysctl.d/host+domain.conf'

    # clean dhcp and samba caches
    remove -f 'var/lib/dhcp'/*
    remove -f 'var/lib/samba/wins.dat' 'var/cache/samba/browse.dat'

    # generate network configuration
    if [ -e "$conf" ] ; then
        [ -n "$CEN_DAT_DOMAIN" ] && full="$name.$CEN_DAT_DOMAIN" || full="$name"
        trace -a "Update network configuration:" "$full"
        [ "$PWD" -ef '/' ] && orig= || orig='--output=.'
        embed -i -v centaurinetcfg $orig "--config=$conf" setup "$full"
    else
        create -t -v name -- 'etc/hostname' 644
        trace -a "No 'centaurinetcfg', skip network configuration"
    fi

    # create resume
    do_label "$name"
    if [ -d 'etc/initramfs-tools/conf.d' ] ; then
        if [ -z "$CEN_OPT_DRYRUN" ] ; then
            item="resume=LABEL=$CEN_DAT_LSWAP"
            create -t -v item -- 'etc/initramfs-tools/conf.d/resume'
            message -a "Run 'update-initramfs -u' manually to make hibernate work"
        fi
    fi

    # update grub/loader and fstab
    do_update "$name" +
}

# ------------------------------------------------------------------------------
# update grub and fstab: (1) do_update <name>       # grub/efi/firmware only
#                        (2) do_update <name> +     # ... also update fstab
# ------------------------------------------------------------------------------
do_update() {
    local name="${1:--}" what=() firm load
    [ "$name" = '-' -o "$name" = '+' ] && return

    local sboo="${CEN_FLG_CLONE[1]:-+}"             # 2nd --clone overrides boot label
    local sdsk="${CEN_FLG_CLONE[2]:-+}"             # 3rd --clone overrides root label
    local sgrb="${CEN_FLG_CLONE[3]:--}"             # 4th --clone is path of grub.cfg
    [ "$sboo" = '+' ] && sboo="$name"
    [ "$sdsk" = '+' ] && sdsk="$name"
    trace -a -c -p 'update boot' "boot-label=%s  root-label=%s  grub-path=%s" "$sboo" "$sdsk" "$sgrb"

    # grub: <boot-mpt>/efi/grub
    # load: <boot-mpt>/efi/loader/entries
    # firm: <boot-mpt>

    if [ "$sgrb" = '+' ] ; then
        matchpath -e -d -o -s sgrb -- mnt/boot/{grub,efi,EFI} boot/{grub,efi,EFI}
    elif [ -n "$CEN_FLG_BOOT" ] ; then
        matchpath -e -d -o -s sgrb -- ./{grub,efi,EFI} ./overlays
    fi

    if [ "${sgrb:--}" = '-' ] ; then
        if [ -n "$CEN_FLG_BOOT" ] ; then
            error "No boot path not found" "(base=$PWD)" ; return
        fi
        sgrb='-'
    else
        trace -a -c "Boot loader path" "$sgrb (base=$PWD)"
    fi

    local mpnt
    case "$sgrb" in
    -)  ;;
    */grub|*/efi|*/EFI|*/overlays)
        if [ -h "$sgrb" ] ; then
            error "Boot path must not be a symlink:" "$sgrb" ; return
        fi
        mpnt="${sgrb%/*}" ;;
    *)  error "Bad boot path (must match '*/grub|efi|overlays'):" "$sgrb" ; return
    esac

    if [ -z "$mpnt" ] ; then
        firm='-' ;  load='-' ;  sgrb='-'
    elif [ -d "$mpnt/efi" ] ; then
        firm='-' ; load="$mpnt/loader/entries" ; sgrb="$mpnt/grub"
    elif [ -d "$mpnt/EFI" ] ; then              # just to be sure
        firm='-' ; load="$mpnt/loader/entries" ; sgrb="$mpnt/grub"
    elif [ -d "$mpnt/grub" ] ; then
        firm='-' ; sgrb="$mpnt/grub" ; load='-'
    else
        firm="$mpnt" ; sgrb='-' ; load='-'
    fi
    trace -a -c -p "volume labels"   "%-20s %s" "boot=$sboo" "root=$sdsk"
    trace -a -c -p "bootloader conf" "%-20s %s" "grub=$sgrb" "systemd=$load"

    # LABEL=xxxx_boot    ->  LABEL=${sboo}_boot   # (1) boot label
    # LABEL=bootfs       ->  LABEL=${sboo}_boot   # (3) raspberrypi legacy
    # PARTUUID=*-01      ->  LABEL=${sboo}_boot   # (3)

    # LABEL=xxxx_root    ->  LABEL=${sdsk}_root   # (2) root label
    # LABEL=xxxx_($svol) ->  LABEL=${sdsk}_...    # (2)
    # LABEL=rootfs       ->  LABEL=${sdsk}_root   # (3)
    # PARTUUID=*-02      ->  LABEL=${sdsk}_root   # (3)

    # UUID=* /           ->  LABEL=${sdsk}_root
    # UUID=* none        ->  LABEL=${sdsk}_swap

    local stab svol='swap|vol0|vol1|archive|backup|shared|vbox|windows'
    if [ "$sboo$sdsk" != '--' -a -n "$2" ] ; then
        stab="s/^(LABEL=[a-zA-Z0-9-]*_boot|LABEL=bootfs|PARTUUID=[a-zA-Z0-9]*-01)/LABEL=${sboo}_boot/g"
        stab+="; s/^(#?LABEL=)([a-zA-Z0-9-]*)_(root|$svol)/\1${sdsk}_\3/g"
        stab+="; s/^(PARTUUID=[a-zA-Z0-9]*-02|LABEL=rootfs)/LABEL=${sdsk}_root/g"
        stab+="; s/^(UUID=[-a-zA-Z0-9 ]*\/ )/LABEL=${sdsk}_root \/ /g"
        stab+="; s/^(UUID=[-a-zA-Z0-9 ]*none )/LABEL=${sdsk}_swap none /g"
        what+=('etc/fstab')
        do_rewrite 'etc/fstab' "$stab"
    fi

    if [ "$firm" != '-' ] && [ -e "$firm/cmdline.txt" ] ; then
        local pref='root='
        stab="s/^$pref(#?LABEL=)([a-zA-Z0-9-]*)_(root|$svol)/${pref}\1${sdsk}_\3/g"
        stab+="; s/^$pref(PARTUUID=[a-zA-Z0-9]*-02|LABEL=rootfs)/${pref}LABEL=${sdsk}_root/g"
        what+=('firmware/cmdline.txt')
        do_rewrite "$firm/cmdline.txt" "$stab"
    elif [ "$sgrb" != '-' ] && [ ! -h "$sgrb" ] ; then
        if [ -z "$2" ] ; then                   # only if root is known, see fstab update
            :
        elif netoption 'sysdnames' "$name" ; then
            remove 'etc/systemd/network/99-default.link'
        else
            symlink -n '/dev/null' 'etc/systemd/network/99-default.link'
        fi
        [ "${sdsk:-}" = '-' ] && stab="$name" || stab="$sdsk"
        stab="s/^set myname=.*/set myname=$stab/"
        what+=('grub/grub.cfg')
        do_rewrite "$sgrb/grub.cfg" "$stab"
    fi

    # systemd loader and UKI cmdlines
    if [ "$load" != '-' ] && [ -d "$load" ] ; then
        local list item
        stab="s/root=LABEL=[a-zA-Z0-9-]*_vol0/root=LABEL=${name}_vol0/"
        stab+="; s/resume=LABEL=[a-zA-Z0-9-]*_swap/resume=LABEL=${name}_swap/"
        matchpath -f -a list -- "$load"/*.conf "$mpnt"/image*/cmdline &&
            what+=('loader/entries')
        for item in "${list[@]}" ; do
            do_rewrite "$item" "$stab"
        done
    fi

    message -a "New hostname is '$name'. Please check:" "${what[@]}"
}

# ------------------------------------------------------------------------------
# restore an archive: <dest> <file> <opt>...
# ------------------------------------------------------------------------------
do_restore() {
    [ -n "$2" ] || return                       # file not specified
    local dest="$1" ; shift
    local file="$1" ; shift

    # get compression and archive type

    local compr='--auto-compress'
    local isimg xpand
    case "$file" in
    *.tgz)      compr='--gzip' ;;
    *.tar.xz)   ;;
    *.tar.gz)   ;;
    *.tar.bz2)  ;;
    *.tar.lzo)  ;;
    *.tar.lzma) ;;
    *.tar.zstd) ;;
    *.img)      isimg=1 ;;
    *.img.xz)   isimg=1 ; xpand='xzcat' ;;
    *.img.gz)   isimg=1 ; xpand='zcat' ;;
    *.img.bz2)  isimg=1 ; xpand='bzcat' ;;
    *.img.lzo)  isimg=1 ; xpand='lzop -cd' ;;
    *.img.lzma) isimg=1 ; xpand='lzcat' ;;
    *.img.zstd) isimg=1 ; xpand='zstdcat' ;;
    *.img.*)    fatal "Unknown image compression: $file" ;;
    *)          fatal "Unknown archive type or compression: $file" ;;
    esac

    # do an ntfs-image restore

    if [ -n "$isimg" ] ; then
        message -a -p "Restore '%s' from '%s' ..." "$dest" "${file##*/}"
        do_chk_part "$dest" || return
        dest="$CEN_FLG_PART"
        if [ -z "$xpand" ] ; then
            system -f ntfsclone --restore-image --overwrite "$dest" "$file"
        else
            $xpand "$file" | ntfsclone --restore-image --overwrite "$dest" -
            local stat="$?"
            [ "$stat" = 0 ] || fatal "'ntfsclone' failed (status $stat)"
        fi
        return
    fi

    # restore a tar-archive

    message -a -p "Restore '%s' from '%s' ..." "$dest" "${file##*/}"
    folder -r -c -m -f -s dest "$CEN_FLG_MOUNT/$dest"
    system -f tar -xf "$file" --overwrite --recursive-unlink $compr $CEN_TAR_OPTS "$@"

    # change things like "/mnt/xxx/home/home" to "/mnt/xxx/home"

    local base="${dest##*/}"                    # gets home/usr
    if [ -z "$base" ] ; then                    # return for root
        do_marker "$dest" ; return
    fi

    set -- *
    base="${base,}"                             # lower case
    if [ "$*" = "$base" ] ; then
        trace -i "Change '${dest}/$base' to '$dest'"
        cd ..
        move -f -- "${dest}/$base" "$dest/$base.$$.$CEN_NAME"
        set -- $dest/$base.$$.$CEN_NAME/*
        [ "$dest/$base.$$.$CEN_NAME/*" = "$*" ] || move -f -- "$@" "$dest"
        set -- $dest/$base.$$.$CEN_NAME/.[!.]*
        [ "$dest/$base.$$.$CEN_NAME/.[!.]*" = "$*" ] || move -f -- "$@" "$dest"
        remove -d -- "$dest/$base.$$.$CEN_NAME"
    fi
    [ "$base" != "usr" ] && do_marker "$dest" "$base"
}

# ------------------------------------------------------------------------------
# create swap partition
# ------------------------------------------------------------------------------
do_swap() {
    [ -n "$CEN_DAT_LSWAP" ] && message -a "Will label swap partition as: $CEN_DAT_LSWAP"
    confirm -a "Make swap on $CEN_FLG_SWAP" || quit -t
    if [ -z "$CEN_DAT_LSWAP" ] ; then
        system -f -p mkswap "$CEN_FLG_SWAP"
    else
        system -f -p mkswap -L "$CEN_DAT_LSWAP" "$CEN_FLG_SWAP"
    fi
}

# ------------------------------------------------------------------------------
# restore a system: [<root> [<usr> [<home>]]]
# ------------------------------------------------------------------------------
do_sysrest() {
    # get the tar file names
    local froot="$1" fuser="$2" fhome="$3"
    if [ "${fuser:-+}" = '+' ] ; then
        fuser="${froot/_root_/_usr_}"
        [ "$fuser" = "$froot" ] && fuser=
    fi
    if [ "${fhome:-+}" = '+' ] ; then
        fhome="${froot/_root_/_home_}"
        [ "${fhome:-+}" = '+' -o "$fhome" = '-' ] && fhome="${fuser/_usr_/_home_}"
        [ "$fhome" = "$froot" ] && fhome=
        [ "$fhome" = "$fuser" ] && fhome=
    fi

    # check the file args
    do_chk_file "$froot" ; froot="$_do_chk_file"
    do_chk_file "$fuser" ; fuser="$_do_chk_file"
    do_chk_file "$fhome" ; fhome="$_do_chk_file"
    error -q

    # any tar file argument given?
    local fmount fstyp fname="$froot"
    [ -z "$fname" ] && fname="$fuser"
    [ -z "$fname" ] && fname="$fhome"
    message -a "System restore: ${froot:+/root} ${fuser:+/usr} ${fhome:+/home}"

    # do we need a partition? Yes for --format --grub --label
    [ -n "$CEN_FLG_MKFS$CEN_FLG_GRUB" -o "${CEN_FLG_LABEL:--}" != '-' -o \
      -n "$CEN_FLG_PART" ] && do_chk_part

    # do we need a mountpoint? Yes if no partition given
    if [ -z "$CEN_FLG_GRUB" -a -z "$fname" ] ; then
        CEN_FLG_MOUNT=
    elif [ -z "$CEN_FLG_MOUNT" ] ; then
        local devn="${CEN_FLG_PART##*/}"
        if [ -z "$devn" ] ; then
            error "A mount point must be specified"
        else
            CEN_FLG_MOUNT="/mnt/$devn"
        fi
    fi

    # can we proceed?
    do_chk_swap
    error -t || return

    # --- format and label ---

    if [ -z "$CEN_FLG_PART" -a -n "$CEN_FLG_MOUNT" ] ; then
        # what filesystem?
        system -r -p -f -s fstyp stat --format "%T" --file-system "$CEN_FLG_MOUNT"
        case "$fstyp" in
        ext3)       CEN_FLG_EXTFS=3 ;;
        ext4)       CEN_FLG_EXTFS=4 ;;
        btrfs)      ;;
        *)          CEN_FLG_EXTFS=0
        esac
        if [ -n "$CEN_FLG_BOOT" ] ; then
            CEN_FLG_EXTFS=0
        elif [ -z "$CEN_FLG_EXTFS" ] ; then
            if ! [ -d "$CEN_FLG_MOUNT/Volumes" ] ; then
                warning -a "Found no '$CEN_FLG_MOUNT/Volumes' (not mounted?)"
                CEN_FLG_EXTFS=0
            fi
        elif [ -z "$CEN_FLG_UNMOUNT" -a ! -d "$CEN_FLG_MOUNT/lost+found" ] ; then
            warning -a "Found no '$CEN_FLG_MOUNT/lost+found' (not mounted?)"
        fi
    fi

    do_label "$fname"
    [ -n "$CEN_FLG_SWAP" ] && do_swap
    [ -n "$CEN_FLG_PART" ] && do_format
    [ -z "$CEN_FLG_MOUNT" ] && quit "Nothing to restore"

    # --- mount and set folders ---

    if [ -n "$CEN_FLG_PART" ] ; then
       message -a "Mounting '$CEN_FLG_PART' at '$CEN_FLG_MOUNT' ..."
       [ -z "$CEN_FLG_EXTFS" ] && fmount='-o subvol=/'
       system -f -p -r -- mount "$CEN_FLG_PART" "$CEN_FLG_MOUNT" $fmount
    fi

    folder -c -f "$CEN_FLG_MOUNT" ; CEN_FLG_MOUNT="$PWD"
    local proot='/' phome='/home' puser='/usr'
    if [ -z "$CEN_FLG_EXTFS" ] ; then
        local vroot="$CEN_DAT_VROOT" vhome="$CEN_DAT_VHOME"
        if matchpath -d -o -s proot "$vroot-$CEN_FLG_DIST" "$vroot" ; then
            puser="$proot/usr"
            matchpath -d -o -s phome "$vhome-$CEN_FLG_DIST" "$vhome" ||
                fatal "Missing 'Home' volume"
            message -a "btrfs volumes: $proot $puser $phome"
        elif [ -n "$CEN_FLG_DIST" ] ; then
            fatal "Missing 'Root' volume:" "$vroot-$CEN_FLG_DIST"
        fi
    fi

    # --- restore root ---

    if [ -n "$froot" ] ; then
       confirm -a "Restore data to $CEN_FLG_MOUNT" || quit -t
       # restore but exclude grub stuff
       do_restore "$proot"  "$froot" \
            '--exclude=./boot/grub/locale'  \
            '--exclude=./boot/grub/fonts'   \
            '--exclude=./boot/grub/i386-pc' \
            '--exclude=./boot/grub/x86_64-efi' \
            '--exclude=./boot/grub/grubenv' \
            '--exclude=./boot/grub/*~'      \
            '--exclude=./boot/grub/*.o'     \
            '--exclude=./boot/grub/*.img'   \
            '--exclude=./boot/grub/*.pf2'   \
            '--exclude=./boot/grub/*.mod'   \
            '--exclude=./boot/grub/*.lst'
       # create required folders
       do_fixup
    fi

    # --- restore usr and home ---

    do_restore "$puser" "$fuser"
    do_restore "$phome" "$fhome"
    message -a "Waiting for queued disk writes to complete..."
    system -e -p -- sync

    # --- clone ---

    folder -c -f "$CEN_FLG_MOUNT${CEN_FLG_MOUNT:+/}$proot"
    folder -m -f 'home'
    [ -n "$CEN_FLG_CLONE" -o -n "$CEN_FLG_ALL" ] && do_rename

    # --- grub install ---

    if [ -n "$CEN_FLG_GRUB" ] ; then
       [ -n "$CEN_FLG_PART"  ] || fatal "Need device for grub (see --partition)"
       blkdevice -f -m -p -- "$CEN_FLG_PART"
       [ "${CEN_FLG_MOUNT:--}" = '-' ] && CEN_FLG_MOUNT="${CEN_BLKDEVICE[3]}"
       [ -d "$CEN_FLG_MOUNT" ] || fatal "Need mount-point for grub"
       local gloc='--root-directory'
       if [ -e 'boot' -o -h 'boot' ] ; then
            [ -h 'boot/grub' ]  && folder -f 'boot/grub'    # valid link?
           folder -c -f 'boot' ; gloc='--boot-directory'
       fi
       message -a "Installing grub ($gloc=$PWD) ..."
       system -e -p -- grub-install --target=i386-pc $gloc="$PWD" "$CEN_BLKDEVICE"
    fi

    # --- unmount ---

    folder -c -f '/'
    if [ -n "$CEN_FLG_PART" -a -n "$CEN_FLG_MOUNT" -a -n "$CEN_FLG_UNMOUNT" ] ; then
       message -a "Unmounting '$CEN_FLG_PART' from '$CEN_FLG_MOUNT' ..."
       system -q umount "$CEN_FLG_PART"
    fi
    return 0
}

# ------------------------------------------------------------------------------
# run it ...
# ------------------------------------------------------------------------------
run() {
    context -r
    umask 22                # create dirs with 0x755

    # rename a system
    if [ -n "$CEN_FLG_CLONE" -a $# = 0 ] ; then
        [ -n "$CEN_FLG_BOOT$CEN_FLG_LABEL$CEN_FLG_MKFS" ] &&
            fatal "Invalid option(s) used with --restore --clone"
        local dest="${CEN_FLG_REST:-/}"
        [ "$dest" -ef '/' ] && dest='/'
        folder -c -f "$dest"
        do_rename

    # restore (data) backup(s)
    elif [ -n "$CEN_FLG_REST" -o -n "$CEN_FLG_BOOT" ] ; then
        [ -n "$CEN_FLG_LABEL$CEN_FLG_MKFS$CEN_FLG_PART$CEN_FLG_MOUNT" -o \
          -n "$CEN_FLG_EXTFS$CEN_FLG_GRUB$CEN_FLG_UNMOUNT" ] &&
            fatal "Invalid option(s) used with --restore"
        local curr base="$PWD" marg='+'
        if [ -n "$CEN_FLG_BOOT" ] ; then
            marg='-' ; CEN_FLG_REST="$CEN_FLG_BOOT"
        elif [ -n "$CEN_FLG_CLONE" ] ; then
            fatal "Cannot use --clone with --restore"
        fi
        arguments 1 "$marg" "$@" || return

        if [ "${CEN_FLG_REST::5}" = '/dev/' ] ; then
            do_chk_block "$CEN_FLG_REST" || return
        else
            folder -c "$CEN_FLG_REST" || return
            CEN_FLG_REST="$PWD"
        fi

        for curr in "$@" ; do
            folder -f -c '/'
            [ "${curr::1}" = '/' ] || curr="$base/$curr"
            do_chk_file "$curr" || continue
            do_restore "$CEN_FLG_REST" "$_do_chk_file"
        done

        # rewrite grub.cfg/cmdline.txt but not fstab
        if [ -n "$CEN_FLG_BOOT" -a -n "$CEN_FLG_CLONE" ] ; then
            do_update "$CEN_FLG_CLONE"
        fi

    # restore a system
    else
        arguments 1 3 "$@" || return
        context -r
        do_sysrest "$@"
    fi
}

# ------------------------------------------------------------------------------
# Option parsing
# ------------------------------------------------------------------------------
options() {
    case "$CEN_ACTION" in

    -3|--ext3)
        optarg "ext3"       CEN_FLG_MKFS && CEN_FLG_EXTFS=3 ;;
    -4|--ext4)
        optarg "ext4"       CEN_FLG_MKFS && CEN_FLG_EXTFS=4 ;;
    -A|--all)
        optarg "all"        CEN_FLG_PART -t && CEN_FLG_ALL=1 ;;
    -B|--boo|--boot)
        optarg 'boot'       CEN_FLG_BOOT -t ;;
    -C|--clo*)
        optarg "clone"      CEN_FLG_CLONE[] -t ;;
    -D|--dis*)
        optarg "dist"       CEN_FLG_DIST '[^/ ]*' ;;
    -F|--for*|--fmt)
        optarg "format"     CEN_FLG_MKFS ;;
    -G|--gru*)
        optarg "grub"       CEN_FLG_GRUB ;;
    -I|--ima*)
        optarg "image"      CEN_FLG_IMAGE -t ;;
    -L|--lab*)
        optarg "label"      CEN_FLG_LABEL -t ;;
    -M|--mou*)
        optarg "mount"      CEN_FLG_MOUNT -t ;;
    -P|--par*)
        optarg "partition"  CEN_FLG_PART -t ;;
    -R|--res*)
        optarg "restore"    CEN_FLG_REST -t ;;
    -S|--swa*)
        optarg "swap"       CEN_FLG_SWAP -t ;;
    -U|--unm*)
        optarg "unmount"    CEN_FLG_UNMOUNT ;;

    # after option processing
    "")
        if [ -n "$CEN_FLG_ALL" ] ; then
            CEN_FLG_MKFS=1
            CEN_FLG_GRUB=1
        fi
        if [ -n "$CEN_FLG_MOUNT" ] ; then
            prettypath -c -e -f -s CEN_FLG_MOUNT -- "$CEN_FLG_MOUNT"
        elif [ -n "$CEN_FLG_IMAGE" ] ; then
            fatal "Option '--image' needs '--mount'"
        fi

        if [ -n "$CEN_FLG_IMAGE" ] ; then
            [ -n "$CEN_FLG_PART" ] && fatal "Cannot use '--partion' with '--image'"
            [ -n "$CEN_FLG_GRUB" ] && fatal "Cannot use '--grub' with '--image'"
            prettypath -c -e -f -s CEN_FLG_IMAGE -- "$CEN_FLG_IMAGE"
        fi
        CEN_DAT_DOMAIN="${CEN_FLG_CLONE#*.}"
        [ "$CEN_DAT_DOMAIN" = "$CEN_FLG_CLONE" ] && CEN_DAT_DOMAIN=
        CEN_FLG_CLONE="${CEN_FLG_CLONE%%.*}"
    esac
}

# ------------------------------------------------------------------------------
# print usage info
# ------------------------------------------------------------------------------
usage() {
    usagecat << !EOF
usage: $CEN_NAME [options...] -|<root> [-|+|<user> [-|+|<home>]]

       $CEN_TITLE.

$CEN_USE_OPTIONS

       -3 --ext3            make ext3 filesystem
       -4 --ext4            make ext4 filesystem
       -A --all     <part>  automatic formatting grub and clone
       -B --boot    <fldr>  restore EFI boot partition
       -C --clone   <name>  prepare a clone with hostname=<name>. Up to three
                            extra --clone options can follow to override (1)
                            the boot partition (2) the root partion and (3)
                            to specifiy a path to 'grub.cfg'. See example (8)
       -D --dist    <nick>  add distribution name to root/home btrfs-volumes
       -F --format          make btrfs filesystem
       -G --grub            run BIOS grub-install (i386-pc target)
       -I --image   <file>  restore to an image file
       -L --label   <text>  override partition label    (- for no label)
       -M --mount   <fldr>  alternate mount point       (must exist)
       -P --part    <part>  use the given partition     (example: sdb3)
       -R --restore <fldr>  restore archive(s) to a folder
       -S --swap    <part>  create a swap partition
       -U --unmount         unmount after restore

arguments:
       <file>               a file path
       <fldr>               a folder path
       <name>               a host name or '-' (from label) or '+' (fixup only)
       <nick>               nick name suffix  -or- '-' for current distribution
       <part>               a partition name or path
       <text>               volume label text
       <root>               tar-file with root data (excludes /home and /usr)
       <user> <home>        tar-file with /usr or /home, + generates from <root>

       When a - placeholder is used for a tar-file, the file is skipped. By
       default the label name is derived from the --clone name or the archive name.

examples:
       (1) $CEN_NAME -F -G -P sda1 mysys_root_2012-07-21.tgz
       (2) $CEN_NAME -F -G -P sda1 -C yoursys mysys_root_2012-07-21.tgz
       (3) $CEN_NAME -A sdb1 -S sdb2 jessie4_root_2015-07-13.tgz

       (4) $CEN_NAME -R /export mysys_export_2012-07-21.tgz
       (5) $CEN_NAME -M /mnt/xxx/ -C yoursys xxx_root_2019-05-05.tgz + -

       (6) $CEN_NAME -R / -C yoursys
       (7) $CEN_NAME -R /mnt/xxx -C +
       (8) $CEN_NAME -R /mnt/xxx -C yoursys -C - -C - -C /mnt/yyy/grub

       (9)  $CEN_NAME -B /mnt/yyy -C yoursys mysys_boot_2022-05-02.tgz
       (10) $CEN_NAME -G -P sda1 -

For (1) a mount-point /mnt/sda1 is created, /dev/sda1 is formatted and labeled
'mysys_root'. The usr and home tgz files are automatically used.  For case (2)
or (3) the machine is renamed as needed (see: centaurinetcfg setup).

Form (4) restores a backup to the actual machine. In case (5) root and user are
restored but home is left unmodified.

Form (6) renames the actual machine. (7) should be used after a manual untar to
fixup some devices, folders and the machine-id. (8) does not change fstab and
passes the base folder of grub.cfg.

An EFI boot partition is restored using form (9). The BIOS version of grub can
be installed using form (10).
!EOF
}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

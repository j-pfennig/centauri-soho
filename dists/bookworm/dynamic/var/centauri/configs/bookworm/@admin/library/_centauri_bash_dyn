#!/usr/bin/bash
# autogenerated by autoload - do not edit"

# ------------------------------------------------------------------------------
# _centauri_bash_dyn = centauri-bash-lib: Dynamic Module loading
#
# Call:     only via [[_centauri_bash_lib]] -a
#
#+This module is created by the **autoload** utility at installation time.
# It contains proxy function definitions to dynamically load modules and to
# enable loadable bash builtins.
# ------------------------------------------------------------------------------

CEN_MODULES["_centauri_bash_dyn"]="0.24:2"

# ------------------------------------------------------------------------------
# Dynamic loading + Dynamic loading of centauri-bash-lib modules
#
#+General:  The library is split into modules and these modules need to be loaded
#           somehow. The main module [[_centauri_bash_lib]] must be loaded explicitly
#           from the user script. For additional modules there exist four methods
#           of loading them:
#
#       (1) _centauri_bash_lib -m option: load a module by 3 letter name
#       (2) _centauri_bash_lib -g option: [[_centauri_bash_con]] or [[_centauri_bash_win]]
#       °   _centauri_bash_lib -v option: [[_centauri_bash_svc]] syslog/service
#       (3) _centauri_bash_lib -a option: autoload via [[_centauri_bash_dyn]]
#       (4) explicit loading via [[embed()]] option -m
#
# Examples: Loading [[_centauri_bash_win]] using method (1):
#.          PATH+=":${0%/*}" . _centauri_bash_lib -m win "$0" "0.00" || exit 2
#
#           Explicitly loading [[_centauri_bash_win]] using method (4):
#.          embed -m _centauri_bash_win
#
#+Options:  At load time options can be passed to a module. This either happens
#           implicitly (method 2) or explicitly (method 4). See [[embed()]]. The
#           available options are documented in the description of each module.
#
# Limits:   Some modules cannot be autoloaded:
#
#           [[_centauri_bash_dyn]] - must be loaded via "_centauri_bash_lib -a"
#           [[_centauri_bash_lib]] - must be loaded by user script
#           [[_centauri_bash_dbg]] - debug module: use "embed _centauri_bash_dbg -m -a"
#                                    to debug [[main()]] and [[options()]]
#
#+          For some modules an explicit load (before invoking [[main()]]) adds command
#           line options:
#
#           [[_centauri_bash_bat]] - use **_centauri_bash_lib -m bat**
#           [[_centauri_bash_con]] - use **_centauri_bash_lib -m con** or **-g**
#           [[_centauri_bash_iom]] - use **embed -m _centauri_bash_iom <option>...**
#           [[_centauri_bash_mnt]] - use **embed -m _centauri_bash_mnt <option>...**
#           [[_centauri_bash_tra]] - use **_centauri_bash_lib -m tra**
#           [[_centauri_bash_win]] - use **_centauri_bash_lib -m win** or **-g**
#
#+Setup:    The [[_centauri_bash_dyn]] module, that handles autoload, is generated
#           using the program **autoload**. Usually called as (see help for [[builtin]]):
#
#           > **$CEN_ROOT/library/autoload --builtin**
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Builtin + Using loadable bash builtins
#
#+General:  The library tries to avoid calls to external (e.g. non-builtin) tools
#           whenever possible. Bash has a lot of builtins, see "help°enable". For
#           your Linux distribution some extra builtins (bash examples) may be
#           provided (on a Debian system use "apt°install°bash-builtins"). The
#           library will use installed builtins for **mkdir**, **rmdir**, **rm**,
#           **ln**, **unlink**, **mkfifo**,  **sleep** and **realpath**.
#
#+          The "$CEN_ROOT/library/autoload" tool can generate wrappers that
#           attempt to autoload bash builtins, not causing harm if a builtin is
#           not installed. See **autoload** option --builtin.
#
#+Warnings: (1) The builtins coming with bash have less functionality than the
#           corresponding GNU tools. [[_centauri_bash_ext]] is aware of this and
#           uses builtins in a safe way.
#
#.          # For example builtin 'ln' does not support option '-r'
#.                              # per default system does not use builtins ...
#.          system -- ln -s -r something unsafe
#.          °                   # but sysrun needs option -i ...
#.          sysrun -i -- ln -s -r something unsafe
#
#+          (2) Builtins are only loaded if [[_centauri_bash_dyn]] is enabled
#               via CEN_FEATURE_A (library option -a).
#
#.          # add option '-a' to load _centauri_bash_dyn
#.          PATH+=":${0%/*}" . _centauri_bash_lib -a -d -r "$0" "0.00:1" || exit 2
#
#+          (3) Builtins are best used via [[sysrun()]] or by the library code
#           itself, for example [[move()]], [[remove()]] or [[symlink()]].
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Preprocessing + Preprocessing modules sources to reduce startup time
#
#+General:  The modules contain a lot of documentation and other comments. In
#           order to load faster, these can be removed or extracted using [[uglify]].
#           For script code this tool also removes extra spaces and replaces some
#           strings that are noted using quotes by strings using apostrophes. When
#           preprocessing documentation only the necessary data is retained.
#
#+          The resulting files receive a ".p" (script) or ".d" (documentation)
#           ending. Preprocessed code is loaded via proxy or [[_centauri_bash_lib]]
#           whenever the preprocessed file is newer than the source. For documentation
#           [[_centauri_bash_doc]] does the same with ".d" files.
#
#           [[uglify]] preserves line numbers in order to help debugging.
#
# Setup:    > **$CEN_ROOT/library/uglify -U -D**
#
#+Warning:  [[uglify]] is stupid. It well understands the coding style of the library
#           modules but may fail to process other coding styles correctly.
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Custom Modules + Extending _centauri_bash_lib with custom library modules
#
# General:  Two kinds of custom library modules are supported
#
#           (1) in-tree
#               - placed inside **$CEN_LIBRARY**
#               - naming pattern must be '*_*_usr'
#               - dynamic loading is supported
#               - recognized by **autoload**, **uglify** and **centaurihelp**
#
#           (2) out-of-tree
#               - can be at any place
#               - can have any name
#               - must be loaded explicitly
#               - help needs **centaurihelp --use=**<module>
#
#+          The module kind is defined by its installation location. The code
#           itself makes no difference (except for the naming pattern).
#
# Example:  See [[centauricreate]] and **$CEN_TOOLS/templates/_custom_module_usr**
# ------------------------------------------------------------------------------

[ "$1" = "-f" ] ||
    fatal "Cannot load '_centauri_bash_dyn' via embed, use '_centauri_bash_lib -a'"

# dynamic loader: <module> <arg>...
_cen_dyn_load() {
    set +x
    local _stat=0 _modu="$1" _func="${FUNCNAME[1]}" _snot="$CEN_NOTRACE" ; CEN_NOTRACE=:
    [ "${#_modu}" = 3 ] && _modu="_centauri_bash_$_modu"
    # $CEN_DEBUG trace -a "dynamic load '$_modu' for '$_func'"
    unset -f "$_func"          # delete proxy
    embed -m "$_modu" -A       # load module
    shift
    if [ -z "$_snot" ] ; then
        CEN_NOTRACE= ; set -x
    fi
    $_func "$@" || _stat=$?  # call real function
    return $_stat
}

# enable builtin: <name> [<args>] (FUNCNAME does not work here)
_cen_dyn_builtin() {
    local _path _func="$1" _user="$CEN_PATHS/usr" ; shift
    unset -f $_func                         # delete proxy
    # try to enable via BASH_LOADABLES_PATH 1st, then custom list...
    if ! enable -a "$_func" &>/dev/null ; then
        for _path in lib lib64 lib32 - ; do
            if [ "$_path" = '-' ] ; then    # builtin not found
               [ $# = 0 ] && return 1       # check for builtin FAILED
               break
            fi
            _path="$_user/$_path/bash"
            [ -r "$_path/$_func" ] || continue
            [ -n "$CEN_DYN_NOLOADABLES" ] && break
            enable -f "$_path/$_func" "$_func" &>/dev/null && break
        done
    fi
    [ $# = 0 ] && return 0                  # check for builtin OK
    $_func "$@"                             # run builtin/tool return status
}

attributes() { _cen_dyn_load atr "$@" ; }
filestat() { _cen_dyn_load atr "$@" ; }

backup() { _cen_dyn_load bak "$@" ; }

cgiapp() { _cen_dyn_load cgi "$@" ; }

console() { _cen_dyn_load con "$@" ; }
decorate() { _cen_dyn_load con "$@" ; }
output() { _cen_dyn_load con "$@" ; }
tabulator() { _cen_dyn_load con "$@" ; }

debug() { _cen_dyn_load dbg "$@" ; }

documentation() { _cen_dyn_load doc "$@" ; }

copy() { _cen_dyn_load ext "$@" ; }
joinpath() { _cen_dyn_load ext "$@" ; }
matchpath() { _cen_dyn_load ext "$@" ; }
move() { _cen_dyn_load ext "$@" ; }
prettypath() { _cen_dyn_load ext "$@" ; }
readline() { _cen_dyn_load ext "$@" ; }
redirect() { _cen_dyn_load ext "$@" ; }
remove() { _cen_dyn_load ext "$@" ; }
rename() { _cen_dyn_load ext "$@" ; }
resolve() { _cen_dyn_load ext "$@" ; }
splitkeyval() { _cen_dyn_load ext "$@" ; }
splitpath() { _cen_dyn_load ext "$@" ; }
suffixpath() { _cen_dyn_load ext "$@" ; }
symlink() { _cen_dyn_load ext "$@" ; }
sysrun() { _cen_dyn_load ext "$@" ; }
tmpfile() { _cen_dyn_load ext "$@" ; }
walk() { _cen_dyn_load ext "$@" ; }

inpdata() { _cen_dyn_load iom "$@" ; }
inpfile() { _cen_dyn_load iom "$@" ; }
outdata() { _cen_dyn_load iom "$@" ; }
outfile() { _cen_dyn_load iom "$@" ; }
cachefile() { _cen_dyn_load iom "$@" ; }
configfile() { _cen_dyn_load iom "$@" ; }
serialize() { _cen_dyn_load iom "$@" ; }
spliteval() { _cen_dyn_load iom "$@" ; }

automount() { _cen_dyn_load mnt "$@" ; }
blkdevice() { _cen_dyn_load mnt "$@" ; }
findmount() { _cen_dyn_load mnt "$@" ; }

netconfig() { _cen_dyn_load net "$@" ; }
netconv() { _cen_dyn_load net "$@" ; }
netgetip() { _cen_dyn_load net "$@" ; }
nethost() { _cen_dyn_load net "$@" ; }
netiface() { _cen_dyn_load net "$@" ; }
netindex() { _cen_dyn_load net "$@" ; }
netoption() { _cen_dyn_load net "$@" ; }
netparse() { _cen_dyn_load net "$@" ; }
nettemp() { _cen_dyn_load net "$@" ; }
netlink() { _cen_dyn_load net "$@" ; }
netfile() { _cen_dyn_load net "$@" ; }
netpath() { _cen_dyn_load net "$@" ; }
netproxy() { _cen_dyn_load net "$@" ; }
netquery() { _cen_dyn_load net "$@" ; }
netresolv() { _cen_dyn_load net "$@" ; }
netserver() { _cen_dyn_load net "$@" ; }
nettool() { _cen_dyn_load net "$@" ; }

sysbind() { _cen_dyn_load pip "$@" ; }
syspager() { _cen_dyn_load pip "$@" ; }
syspipe() { _cen_dyn_load pip "$@" ; }
sysloop() { _cen_dyn_load pip "$@" ; }

progress() { _cen_dyn_load pro "$@" ; }

repository() { _cen_dyn_load rep "$@" ; }

launcher() { _cen_dyn_load run "$@" ; }
shortpath() { _cen_dyn_load run "$@" ; }
terminal() { _cen_dyn_load run "$@" ; }

background() { _cen_dyn_load svc "$@" ; }
inhibit() { _cen_dyn_load svc "$@" ; }
pidfile() { _cen_dyn_load svc "$@" ; }
isservice() { _cen_dyn_load svc "$@" ; }
runsysddir() { _cen_dyn_load svc "$@" ; }
runservice() { _cen_dyn_load svc "$@" ; }

sysversion() { _cen_dyn_load sys "$@" ; }
syssetup() { _cen_dyn_load sys "$@" ; }
sysinfo() { _cen_dyn_load sys "$@" ; }
sysconfig() { _cen_dyn_load sys "$@" ; }

trash() { _cen_dyn_load tra "$@" ; }

txtsort() { _cen_dyn_load txt "$@" ; }
extsort() { _cen_dyn_load txt "$@" ; }
txtgrep() { _cen_dyn_load txt "$@" ; }
extgrep() { _cen_dyn_load txt "$@" ; }
txtfold() { _cen_dyn_load txt "$@" ; }

usageparser() { _cen_dyn_load use "$@" ; }
usagecat() { _cen_dyn_load use "$@" ; }
usageset() { _cen_dyn_load use "$@" ; }
usageopt() { _cen_dyn_load use "$@" ; }

listsearch() { _cen_dyn_load utl "$@" ; }
number() { _cen_dyn_load utl "$@" ; }
optmake() { _cen_dyn_load utl "$@" ; }
pluralize() { _cen_dyn_load utl "$@" ; }
splitcall() { _cen_dyn_load utl "$@" ; }
timer() { _cen_dyn_load utl "$@" ; }
trimjoin() { _cen_dyn_load utl "$@" ; }

webapp() { _cen_dyn_load web "$@" ; }

windows() { _cen_dyn_load win "$@" ; }
windialog() { _cen_dyn_load win "$@" ; }

xml_anchor() { _cen_dyn_load xml "$@" ; }
xml_comment() { _cen_dyn_load xml "$@" ; }
xml_document() { _cen_dyn_load xml "$@" ; }
xml_element() { _cen_dyn_load xml "$@" ; }
xml_flush() { _cen_dyn_load xml "$@" ; }
xml_input() { _cen_dyn_load xml "$@" ; }
xml_list() { _cen_dyn_load xml "$@" ; }
xml_script() { _cen_dyn_load xml "$@" ; }
xml_sequence() { _cen_dyn_load xml "$@" ; }
xml_table() { _cen_dyn_load xml "$@" ; }
xml_text() { _cen_dyn_load xml "$@" ; }

sleep() { _cen_dyn_builtin sleep "$@" ; }
mkdir() { _cen_dyn_builtin mkdir "$@" ; }
mkfifo() { _cen_dyn_builtin mkfifo "$@" ; }
rm() { _cen_dyn_builtin rm "$@" ; }
rmdir() { _cen_dyn_builtin rmdir "$@" ; }
unlink() { _cen_dyn_builtin unlink "$@" ; }
ln() { _cen_dyn_builtin ln "$@" ; }
realpath() { _cen_dyn_builtin realpath "$@" ; }
stat() { _cen_dyn_builtin stat "$@" ; }

# End

#!/usr/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL='Dr. J. Pfennig (c) 2024-2025; '$"BSD License"
CEN_TITLE=$"Tool to (un)install and run WeeWX"

# ------------------------------------------------------------------------------
# Note: this tool implements service actions like start/stop/status but does not
#       use the _centauri_bash_svc module. Together with a few other code lines
#       this keeps the size of a packaged version small at the cost of slightly
#       reduced functionality. See CEN_PACKAGE and centauri-bash-lib's uglify.
# ------------------------------------------------------------------------------

# Import the bash library, set name and version
PATH+=":${0%/*}" . _centauri_bash_lib -a -d -f -m con -o -s -t -y - '0.04:5' || exit 2

# configurable data, see default file
DAT_NICK='WeeWX'                        # friendly product name
DAT_BASE="/opt/$DAT_NICK"               # binaries go here
DAT_NAME="${DAT_NICK,,}"                # internally used name
DAT_SERV="$CEN_NAME.service"            # custom service name
DAT_USER="$DAT_NAME"                    # system user name
DAT_VENV="$DAT_BASE/venv"               # python virtualenv
DAT_ENAB="$DAT_VENV/service-enabled"    # custom, see autorun action
DAT_EXEC="$DAT_VENV/bin/weewxd"         # weewx daemon
DAT_HTML='/var/www/html'                # web server folder for export
DAT_VERS='5.1.0'                        # see https://pypi.org/search

# specify browser and editor (not used whenn centaurilauncher is intalled)
DAT_BROWSER=('x-www-browser')
DAT_EDITOR=('editor')

# nothing configurable below ...

if [ "${CEN_NAME::1}" = '.' ] ; then    # started as appliance ...
    CEN_NAME='centauriweewx' ; set -- --quiet web
fi
if [ -n "$CEN_PACKAGE" ] ; then         # packaged script...
    # file to be sourced instead of /etc/default/$CEN_NAME
    CEN_APPCONF="$CEN_ROOT/$CEN_NAME.default"
    # in a packaged script CEN_ROOT is the base folder of the script
    # source. Here we replace it with the base folder path ...
    CEN_ROOT="$DAT_BASE"
    DAT_HOME="$CEN_ROOT/home"           # config and transient data
    TEXTDOMAINDIR="$CEN_ROOT/locale"
    embed -c '_centauri_bash_atr'       # dependencies ...
    embed -c '_centauri_bash_cfm'
    embed -c '_centauri_bash_utl'
else                                    # shared script ...
    DAT_HOME="$CEN_ROOT/home/$DAT_USER" # config and transient data
fi
DAT_DATA="$DAT_HOME/weewx-data"         # weewx data folder
DAT_CONF="$DAT_DATA/weewx.conf"         # default config file (created by weewx)
DAT_HDIR="$DAT_DATA/public_html"        # folder for html generated by weewx

# this service comes with weewx and is used in service_stop
DAT_SVCW='weewx.service'
# optional: service file provided by centauri-bash-lib
DAT_SVCC="$CEN_ROOT/systemd/system/$DAT_SERV"

DAT_APT_UPDATE=                         # flag to run apt update

# data for extra options
CEN_OPT_HTML=
CEN_OPT_USER=
CEN_OPT_VERSION=

# ------------------------------------------------------------------------------
# Is the service active: <name>
# ------------------------------------------------------------------------------
check_active() {
    system -q -r systemctl is-active "$1" && return 0
    system -q -r systemctl is-masked "$1" &&
        warning -p $"Service '%s' is masked" "$1"
    return 1
}

# ------------------------------------------------------------------------------
# Is the service enabled: <name> [<vnam>]
# ------------------------------------------------------------------------------
check_enabled() {
    local _cmsg _stat
    LANG=C system -s _cmsg -q -r systemctl is-enabled "$1" ; _stat=$?
    [ "${2:--}" != '-' ] && printf -v "$2" '%s' "$_cmsg"
    return "$_stat"
}

# ------------------------------------------------------------------------------
# Is WeeWX installed at all: [-n]
# ------------------------------------------------------------------------------
check_installed() {
    if [ -x "$DAT_EXEC" ] ; then
        if [ -d "$DAT_HOME" ] ; then
            [ "$1" = '-n' ] || return 0
            message -p $"'%s' already installed. try '%s'" "$DAT_NICK" "${0##*/} upgrade"
        else
            message -p $"User '%s' home missing, run '%s' to re-install" \
                "$DAT_USER" "${0##*/} install"
        fi
    else
        [ "$1" = '-n' ] && return 0
        message -p $"'%s' not found, run '%s' to install it" "$DAT_NICK" "${0##*/} install"
    fi
    error -s 2                                  # set exit code
    return 1
}

# ------------------------------------------------------------------------------
# Package installation: <list>
# ------------------------------------------------------------------------------
inst_packages() {
    local   oupd
    if [ -z "$DAT_APT_UPDATE" ] ; then
        oupd='-U1' ; DAT_APT_UPDATE=1
    fi
    if sysfind -q -c centauripackage ; then             # have centauripackage ...
        embed -v -y -t centauripackage -y -I -L -T -X \
            $oupd ${CEN_OPT_SILENT:+-s} "$@" ; return   # return status
    fi

    # fall back to native apt
    local slnt ; [ -n "$CEN_OPT_SILENT" ] && slnt='-p'
    [ -n "$oupd" ] && system -t -e $slnt -- apt update
    system -t -e $slnt -- apt --yes install "$@"
}

# ------------------------------------------------------------------------------
# Create service unit file
# ------------------------------------------------------------------------------
service_unit() {
    [ -e "$DAT_SVCC" ] && return
    DAT_SVCC="$DAT_BASE/$DAT_SERV"
    create -c -- "$DAT_SVCC" <<!EOF
# ${DAT_SVCC##*/} - Run $DAT_NICK
[Unit]
Description=$DAT_NICK Server
After=networking.service
Wants=networking.service

StartLimitBurst=10
StartLimitIntervalSec=1000

# see $CEN_NAME auto on/off
ConditionPathExists=$DAT_ENAB

[Service]
User=$DAT_USER
IgnoreSIGPIPE=no
KillMode=process
GuessMainPID=no
RemainAfterExit=no

TimeoutSec=60
Restart=on-failure
RestartSec=30s
ExecStart=$DAT_EXEC

[Install]
WantedBy=multi-user.target
!EOF
}

# ------------------------------------------------------------------------------
# Make sure that the service does not run
# ------------------------------------------------------------------------------
service_stop() {
    local serv
    for serv in "$DAT_SVCC" "$DAT_SVCW" ; do
        serv="${serv##*/}"
        check_active "$serv" || continue            # active and not masked ...
        system -e -p -- systemctl stop "$serv" || continue
        message -a -p $"Stopped '%s' service" "${serv%.*}"
        done
}

# ------------------------------------------------------------------------------
# Create python venv: [-c|-r]
# ------------------------------------------------------------------------------
venv_setup() {
    if [ -n "$1" ] ; then
        while [ -e "$DAT_VENV" ] ; do
            if [ "$1" != '-r' ] ; then
                ((CEN_OPT_QUIRK & 128)) || break
                confirm -n -b $"Remove existing python environment (recommended)" || break
            fi
            remove -d -- "$DAT_VENV"
            error -t || return 1
            ((CEN_OPT_QUIRK |= 128)) ; break
        done

            system -p -- python3 -m venv "$DAT_VENV" || return 1
        message -a $"Using python virtual environment:" "$DAT_VENV"
    fi

    [ -e "$DAT_VENV/bin/activate" ] && source "$DAT_VENV/bin/activate" && return 0
    error $"Failed to activate python environment:" "$DAT_VENV" ; return 1
}

# ------------------------------------------------------------------------------
# WeeWX service: on|off|status
# ------------------------------------------------------------------------------
actionAutorun() {
    check_installed || return
    local word vsee="# This file is a start condition for '$DAT_SERV'"

    if ! listsearch -u -m word -- "${1:-status}" 'on' 'off' 'status' ; then
        invoke -a 'on off status' ; return
    fi

    # Use 'service-enabled' to control if WeeWX should run or not. This is why
    # we only enable the service but never disable it. The service unit checks
    # for file 'service-enabled'.

    # Optional: The 'centaurisysinit' service starts '$DAT_SERV', even if not
    # enabled, when kernel parameter 'centaurilogin=weewx' is set.

    case "$word" in
    on)     create -- "$DAT_ENAB"
            check_enabled "$DAT_SERV" && return
            service_unit
            system -e -p -- systemctl enable "$DAT_SVCC" &&
                message -a -p $"Enabled '%s', autostart" "$DAT_SERV"
            ;;
    off)    remove -- "$DAT_ENAB" ;;
    *)      actionStatus
    esac
}

# ------------------------------------------------------------------------------
# WeeWX dependencies: -no args-
# ------------------------------------------------------------------------------
actionDeps() {
    if [ "$CEN_ACTION" = 'deps' ] ; then
        confirm -a -y -f $"Install '%s' build dependencies" "$DAT_NICK" || return
    elif [ -e "$DAT_VENV/bin/python3" ] ; then
        trace -a -p $"'%s' already installed" 'python3' ; return
    fi

    message -i
    inst_packages sudo python3 python3-venv || return 1
    message -i

    # set permissions
    attributes -m - -o "$DAT_USER:staff" -s -- "$DAT_BASE"
    attributes -m - -o "$DAT_USER:" -s -- "$DAT_HOME"
    message $"Build dependencies are installed"
}

# ------------------------------------------------------------------------------
# Launch tty editor
# ------------------------------------------------------------------------------
actionEdit() {
    check_installed || return
    if [ -e "$DAT_CONF" ] ; then
        if system -c centaurilauncher ; then
            system -e -u "$DAT_USER" -- centaurilauncher --desk=tty editor "$DAT_CONF"
        elif system -c "$DAT_EDITOR" ; then
            # in a debian system we can run 'editor' directly
            system -e -u "$DAT_USER" -- "${DAT_EDITOR[@]}" "$DAT_CONF"
        else
            error $"Don't know how to start an editor"
        fi
    else
        error -p $"Missing configuration, did you run '%s'?" "$CEN_NAME install"
    fi
}

# ------------------------------------------------------------------------------
# install Home weewx step 1: -no args-
#
#   step 1: create folder, python, create user (needs root)
#   step 2: build python stuff (must run as weewx)
# ------------------------------------------------------------------------------
actionInstall() {
    check_installed -n || return                    # stop if already installed
    confirm -a -y -f $"Install '%s' version '%s'" "$DAT_NICK" "$DAT_VERS" || return
    folder -m "${DAT_HOME%/*}" 775                  # applicances home should exist

    # create user, add to dialout and bluetooth groups
    system -q -r -- getent passwd "$DAT_USER" ||
       system -e -p -- useradd -rm "$DAT_USER" -d "$DAT_HOME"
    error -t || return

    # install it
    [ -h "$DAT_HOME" ] && remove -- "$DAT_HOME"     # legacy
    if [ ! -d "$DAT_HOME" ] ; then                  # init a missing home folder
        folder -f -m -- "$DAT_HOME"
        copy -a "${CEN_PATHS[2]}/skel/".* "$DAT_HOME"
        attributes -m - -o "$DAT_USER:" -s -- "$DAT_HOME"
    fi

    if [ -z "$CEN_PACKAGE" ] ; then                 # shared script only ...
        folder -f -m -- "$DAT_BASE"                 # binaries folder
        symlink "$DAT_HOME" "$DAT_BASE/home"
    fi
    folder -f -m -- "$DAT_HDIR"                     # link private html to web svr
    [ -d "$DAT_HTML" ] && symlink "$DAT_HDIR" "$DAT_HTML/$DAT_NAME"
    error -t || return

    service_stop                                    # must not run now
    actionDeps                                      # auto-install dependencies
    error -t || return

    # install running as service user
    local opts=()
    optmake -a opts -b force
    optmake -a opts -b silent
    optmake -a opts -n version -v "$CEN_OPT_VERSION"
    embed -r -t -u "$DAT_USER" -v -y -z -- "$0" "${opts[@]}" setup install

    # install lighttpd
    local mosq ; check_enabled 'lighttpd.service' mosq
    case "$mosq" in
    enabl*) return ;;
    diabl*) warning $"The 'lighttpd' web server service is disabled" ; return ;;
    masked) warning $"The 'lighttpd' web server service is masked" ; return ;;
    esac
    confirm -y $"Also install 'lighttpd' web server" || return
    inst_packages lighttpd
    [ -d "$DAT_HTML" ] && symlink "$DAT_HDIR" "$DAT_HTML/$DAT_NAME"
}

# ------------------------------------------------------------------------------
# install/update weewx step 2: install|update
# ------------------------------------------------------------------------------
actionSetup() {
    if [ "$USER" != "$DAT_USER" ] ; then
        invoke -e $"The current user must be '%s'" "$DAT_USER" ; return
    fi
    if check_active "$DAT_SERV" ; then
        invoke -e $"Service active, run '%s' and retry" "systemctl stop $DAT_SERV"
        return
    fi
    folder -c -f "$DAT_BASE"

    local slnt ; [ -n "$CEN_OPT_SILENT" ] && slnt='-q'

    if [ "$1" = 'install' ] ; then
        venv_setup -c || return
        # do not use the cached path of distro python
        system -e -q -- "$DAT_VENV/bin/python3" -m pip install wheel
        error -t || return
        if [ -z "$CEN_OPT_FORCE" ] && [ -e "$DAT_CONF" -a -e "$DAT_EXEC" ] ; then
            message -a "Already installed (consider using option '--force')"
            return
        fi
        confirm -y -f $"Continue to install '%s'" "$DAT_NICK" || return
        message -i
        [ -n "$slnt" ] && progress -a -l -- $"Installing..."
        system -e -- pip3 $slnt install "$DAT_NAME==$DAT_VERS" || return
        [ -e "$DAT_CONF" ] || system -e -- weectl station create
     else
        venv_setup || return                        # activate venv
        confirm -y -f $"Continue to upgrade '%s'" "$DAT_NICK" || return
        message -i
        system -e -- pip3 $slnt install --upgrade "$DAT_NAME"
     fi
     message -i
     error -t && message -p $"Success, try '%s' to run service" "$CEN_NAME --force start"
}

# ------------------------------------------------------------------------------
# run WeeWX: -no args-
# ------------------------------------------------------------------------------
actionRun() {
    check_installed || return
    service_stop                                    # must not run now
    local verb ; [ "$CEN_VERB" -gt 1 ] && verb='-v'
    system -e -u "$DAT_USER" -- bash -c \
        "cd ; . '$DAT_VENV/bin/activate' ; exec '$DAT_EXEC' $verb"
 }

# ------------------------------------------------------------------------------
# WeeWX shell: -no args-
# ------------------------------------------------------------------------------
actionShell() {
    check_installed || return
    folder -c -f "$DAT_HOME"
    system -e sudo -u "$DAT_USER" -H -s
}

# ------------------------------------------------------------------------------
# show status: -no args-
# ------------------------------------------------------------------------------
actionStatus() {
    check_installed || return
    local word sise enab

    check_enabled "$DAT_SERV" && enab=1

    [ -n "$enab" ] && sise=$"enabled" || sise=$"not enabled"
    [ -f "$DAT_ENAB" ] && word='on' || word='off'
    message -a -p $"Autorun: %s   Service: %s" "$word" "$sise"

    [ -z "$enab" ] && return
    message -a
    system -e -g 3 -- systemctl status "$DAT_SERV"
}

# ------------------------------------------------------------------------------
# run systemctl: -no args-
# ------------------------------------------------------------------------------
actionSystemctl() {
    check_installed || return

    # centaurisysinit uses 'centauriweewx --quiet --force start' ...
    local temp
    if [ -n "$CEN_OPT_FORCE" ] ; then
        if [ "$CEN_ACTION" = 'start' ] ; then
            service_unit                            # create unit if needed
            system -e -p -- systemctl enable "$DAT_SVCC" || return
            if [ ! -e "$DAT_ENAB" ] ; then
            temp=1 ; create -- "$DAT_ENAB"          # enable temporarily
        fi
        fi
    elif [ ! -e "$DAT_ENAB" ] ; then
        error -m "Service '$DAT_SERV' is not enabled. Please" \
                 "run '$CEN_NAME auto on' to enable or use option '--force'"
        return
    fi

    local list=("$DAT_SERV")
    trace -a -c "Start services" "${list[*]}"
    system -e -p -z systemctl --no-block "$CEN_ACTION" "${list[@]}"
    [ -n "$temp" ] && remove -- "$DAT_ENAB"
}

# ------------------------------------------------------------------------------
# uninstall WeeWX: -no args-
# ------------------------------------------------------------------------------
actionUninst() {
    if [ ! -d "$DAT_VENV" ] ; then
        warning -p $"No known '%s' installation" "$DAT_NICK" ; return
    fi
    folder -c -f "$DAT_VENV"
    confirm -n $"Uninstall '$DAT_NAME'" || return
    service_stop                                    # must not run now
    system -q -- systemctl disable "$DAT_SERV"
    remove -- "$DAT_ENAB"
    remove -d -- bin/ cache/ include/ share/ lib* \
                 pyvenv.cfg LICENSE .gitignore .lock "../$DAT_SERV"
    folder -c -f '/tmp'
    remove -d -- "$DAT_BASE/home"
    remove -- "$DAT_VENV" && remove -- "$DAT_BASE"
    if [ -d "$DAT_HOME" ] ; then
        message -a -p $"Please remove folder '%s' and user '%s' manually" "$DAT_HOME" "$DAT_USER"
    else
        message -a -p $"Please remove user '%s' manually" "$DAT_USER"
    fi
}

# ------------------------------------------------------------------------------
# upgrade WeeWX: -no args-
# ------------------------------------------------------------------------------
actionUpgrade() {
    check_installed || return
    service_stop                                    # must not run now
    actionDeps
    local opts=()
    optmake -a opts -b force
    optmake -a opts -b silent
    optmake -a opts -n version -v "$CEN_OPT_VERSION"
    embed -r -t -u "$DAT_USER" -v -y -z -- "$0" "${opts[@]}" setup upgrade
}

# ------------------------------------------------------------------------------
# Show web interface: [<url>|<host>]
# ------------------------------------------------------------------------------
actionWeb() {
    context -g 1                                    # always try gui mode
    local wurl="${1:--}" mode
    case "$wurl" in
    http://*|https://*)
        ;;
    -)  if [ -z "$CEN_PACKAGE" ] ; then             # centauri-bash-lib only ...
            if nethost "$DAT_NAME" || nethost 'weewx' ; then
                wurl="http://$_nethost_ip/$DAT_NAME"
            fi
        elif echo 2>/dev/null >'/dev/tcp/localhost/80' ; then
            wurl="http://localhost/$DAT_NAME"
        fi
        ;;
    http:/*|https:/*)
        ;;
    *)  wurl="http://$wurl/$DAT_NAME"
    esac

    if [ "$wurl" = '-' ] ; then
        invoke -e $"Please specify the '$DAT_NICK' URL to use" ; return
    elif system -c centaurilauncher ; then
        embed -x -v centaurilauncher --terminal view "$wurl"
    elif system -c -- "$DAT_BROWSER" ; then
        system -e -- "${DAT_BROWSER[@]}" "$wurl"
    else
         invoke -e $"Neither 'centaurilauncher' nor 'x-www-browser' found"
    fi
}

# ------------------------------------------------------------------------------
# option parsing: <option> [<argument>]
# ------------------------------------------------------------------------------
options() {
    case "$1" in
    '') [ -n "$CEN_OPT_USER" ] && DAT_USER="$CEN_OPT_USER"
        [ -n "$CEN_OPT_HTML" ] && DAT_HTML="$CEN_OPT_HTML"
        [ -n "$CEN_OPT_VERSION" ] && DAT_VERS="$CEN_OPT_VERSION"
        ;;
    -H|--htm|--html)
        optarg 'html'       -       -t ;;       # any text
    -U|--use|--user)
        optarg 'user'       -       -t ;;       # any text
    -V|--vers*)
        optarg 'version'    -       -t ;;       # any text

    esac
}

# ------------------------------------------------------------------------------
# action parsing: <verb> <argument>...
# ------------------------------------------------------------------------------
actions() {
    case "$1" in
    aut*)
        invoke -r 'autorun' -        0 1 ;;     # one optional arg
    dep*)
        invoke -r 'deps'    -          0 ;;     # no args
    edi|edit)
        invoke -s 'edit'    -          0 ;;
    ins*)
        invoke -r 'install' -          0 ;;     # no args
    run)
        invoke -r 'run'     -          0 ;;     # no args
    set*)
        invoke    'setup'   -          1 ;;     # one optional arg
    sh*|log*)
        invoke -s 'shell'   -          0 ;;     # no args
    uni*)
        invoke -r 'uninst'  -          0 ;;     # no args
    upg*)
        invoke -r 'upgrade' -          0 ;;     # no args
    web)
        invoke    'web'     -        0 1 ;;     # one optional arg

    status)
        invoke    -         -          0 ;;     # no args
    start|stop|restart)
        invoke -s -  actionSystemctl   0 ;;     # no args
    esac
}

# ------------------------------------------------------------------------------
# usage info
# ------------------------------------------------------------------------------
usage() {
    usageset \
        -o - \
        -o '-H --html    <fldr>'  $"Web server base folder   (default: $DAT_HTML)" \
        -o '-U --user    <user>'  $"specify a different user (default: $DAT_USER)" \
        -o '-V --version <vers>'  $"Version to be installed  (default: $DAT_VERS)" \

    usageset \
        -a 'autorun      <auto>'  $"behaviour of service '$DAT_SERV'" \
        -a 'deps'                 $"install build dependencies" \
        -a 'install'              $"install '$DAT_NICK'" \
        -a 'run'                  $"run the '$DAT_NICK' binary ${DAT_EXEC##*/}" \
        -a 'setup        <what>'  $"[internal] called by 'install' and 'upgrade'" \
        -a 'shell'                $"open a shell as user '$DAT_USER'" \
        -a 'uninstall'            $"uninstall '$DAT_NICK'" \
        -a 'upgrade'              $"upgrade '$DAT_NICK'" \
        -a 'web         [<url>]'  $"show '$DAT_NICK' web interface" \
        -a - \
        -a 'restart'              $"run ""'systemctl restart $DAT_SERV'" \
        -a 'start'                $"run ""'systemctl start $DAT_SERV'" \
        -a 'status'               $"... ""'systemctl status $DAT_SERV'" \
        -a 'stop'                 $"... ""'systemctl stop $DAT_SERV'" \

    usageset \
        -p '<auto>'               $"one of: on off status" \
        -p '<user>'               $"Linux user name" \
        -p '<url>'                $"something like 'http://your-host'" \
        -p '<vers>'               $"'$DAT_NICK' version to install" \

    usageset \
        -t $"The installation process is run with a simple command:" \
        -t - \
        -t "°   ${0##*/} install          # install the default version" \
        -t - \
        -t $"Do a release upgrade (via pip) and restart:" \
        -t - \
        -t "°   ${0##*/} upgrade -- restart" \
        -t - \
        -t $"To start '$DAT_NAME' at boot time as a service enter:"\
        -t - \
        -t "°   ${0##*/} autorun on        # "$"enable service" \
        -t "°   ${0##*/} autorun off       # "$"disable service" \
        -t - \
        -t $"Action 'autorun' also creates or removes the '${DAT_ENAB##*/}' file" \
        -t $"that is checked by the service as a start condition." \

     [ -z "$CEN_PACKAGE" ] && usageset \
        -t - \
        -t $"Run 'centaurisysinit default $DAT_NAME' if you want your machine to" \
        -t $"start in kiosk mode with $DAT_NAME web interface at boot time." \

}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

#!/usr/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Dr. JÃ¼rgen Pfennig (c) 2021-2024; BSD License"
CEN_TITLE=$"Handle differences between text files"

# Import the bash library, set name and version
PATH+=":${0%/*}" . _centauri_bash_lib -a -d -i -r -s -y - '0.05:3' 2 2 || exit 2

# Data
CEN_OPT_ACCEPT=             # see --accept
CEN_OPT_CHANGE=             # see --change
CEN_OPT_EDIT=               # see --edit
CEN_OPT_FIX=                # see --fix
CEN_OPT_MERGE=              # see --merge
CEN_OPT_KOMPARE=            # see --kompare
CEN_OPT_PROMPT=             # see --prompt
CEN_OPT_REVERT=             # see --revert
CEN_OPT_ROOT=               # see --root
CEN_OPT_SHELL=              # see --shell
CEN_OPT_TIME=               # see --time

# ------------------------------------------------------------------------------
# Compare two files: -s|-v <fscr> <fdes>
# ------------------------------------------------------------------------------
do_compare() {
    local   fsrc="$2" fdes="$3" mesg='message -a -c' temp
    [ "$2" = '-s' ] && message='trace -a -c'

    if [ ! -f "$fdes" ] ; then
        $mesg $"Source only" "${fsrc#$PWD/}"
        return 2
    fi

    if [ "$fsrc" -nt "$fdes" ] ; then
        temp=$"Source is newer"
    elif [ "$fdes" -nt "$fsrc" ] ; then
        temp=$"Source is older"
    elif [ -n "$CEN_OPT_TIME" ] ; then
        [ -z "$CEN_OPT_SILENT" ] && $mesg $"Same timestamp" "${fsrc#$PWD/}"
        return 1
    fi

    if system -r -q -- cmp --quiet "$fsrc" "$fdes" ; then
        [ -n "$CEN_OPT_SILENT" ] && return 0
        if [ -n "$temp" ] ; then
            $mesg "$temp" "${fsrc#$PWD/}"
        else
            message -c -a $"Files are equal" "${fsrc#$PWD/}"
        fi
        return 0
    fi
    $mesg $"Content differs" "${fsrc#$PWD/}"
    return 1
}

# ------------------------------------------------------------------------------
# Find file in distro repository: <vnam> <path>
# ------------------------------------------------------------------------------
do_dist() {
    ___do_dist_walk() {
        [ "${1##*/}" = "$name" ] || return 1    # no match: ignore
        file="$1" ;                 return 3    # match: stop walk
    }

    local -n vdis="$1" ; shift
    local file name="${1##*/}"
    if [ "$vdis" = '@' ] ; then                 # get current nick name
        sysversion -u
        vdis="$CEN_SYS_NICKNAME"
        set -- "$CEN_ROOT/configs/$vdis"
    else
        set -- "$CEN_ROOT/configs/"*${vdis:1}*
    fi
    if ! [ $# = 1 -a -d "$1" ] ; then
        error "No such repository:" "${vdis:1}"
        return 1
    fi
    walk -r -f ___do_dist_walk -i "$1"
    if [ -z "$file" ] ; then                        # not found
        error -p "File '%s' not found in repository: %s" "$name" "$1"
        return 1
    else
        vdis="$file"
        return 0
    fi
}

# ------------------------------------------------------------------------------
# Fix ownership and mode: -b|-e <file> <tag>
# ------------------------------------------------------------------------------
do_fix() {
    local _fflg _argl
    folder -b 'transient' -t -s _fflg -- "_$3"
    if [ "$1" = '-b' ] ; then
        create -- "$_fflg"
        _argl=(--reference "$2" "$_fflg")
        system -e -p -- chmod "${_argl[@]}"
        system -e -p -- chown "${_argl[@]}"
    elif [ "$1" = '-e' ] ; then
        if [ -e "$2" ] ; then                       # might be deleted!
            _argl=(--reference "$_fflg" "$2")
            system -e -p -- chmod "${_argl[@]}"
            system -e -p -- chown "${_argl[@]}"
        fi
        remove -q -- "$_fflg"
    fi
}

# ------------------------------------------------------------------------------
# run diff tool: <left> <right>
# ------------------------------------------------------------------------------
run_diff() {
    console -m 1 -c "${CEN_COLS:-0}"            # init to fancy mode
    local fsrc="$1" fdes="$2"
    local lsrc="${#1}" ldes="${#2}"
    local lhlf cols="$CEN_COLS"
    [ -z "$cols" ] && cols=100
    lhlf="$((cols / 2 - 1))"
    output "$CEN_DECO_BOLD"
    output -l -d one -x "$cols" .
    output "$CEN_DECO_BOLD"                     # repeat for pager
    if [ "$lsrc" -lt "$lhlf" -a "$ldes" -lt "$lhlf" ] ; then
        printf "%-${lhlf}s %s\n" "$fsrc" "$fdes"
    else
        printf "Left : %s\nRight: %s\n" "$fsrc" "$fdes"
    fi
    output "$CEN_DECO_BOLD"                     # repeat for pager
    output -l -d one -x "$cols" .
    output "$CEN_DECO_NORM"
    system -r -- diff -y --suppress-common -W $cols "$fsrc" "$fdes"
    output "$CEN_DECO_BOLD"
    output -l -d one -x "$cols" .
    output "$CEN_DECO_NORM"
}

# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
run_edit() {
    if [ -z "$CEN_OPT_EDIT" ] ; then
        run_replace -i "$@"
        confirm -v "none left right both" -d "none" -p " [left|rigth|both]: " \
                   "Which file(s) to edit"
        case "$?" in
            1) system editor "$1" ;;
            2) system editor "$2" ;;
            3) system editor "$1" "$2" ;;
        esac
    elif [ "${CEN_OPT_EDIT::1}" = 'l' ] ; then
        system -r -- editor "$1"
    elif [ "${CEN_OPT_EDIT::1}" = 'r' ] ; then
        system -r -- editor "$2"
    else
        system -r -- editor "$1" "$2"
    fi
}

# ------------------------------------------------------------------------------
# Move file, show status: -a|-r|-s <left> <right>
# ------------------------------------------------------------------------------
run_replace() {
    local fopt="$1" ; shift
    if [ "$fopt" = '-s' ] ; then
        message -a -n "Left file is  (\$L): $1" '\n' "Right file is (\$R): $2"
    else
        message -a -n "Left file is : $1" '\n' "Right file is: $2"
    fi

    case "$fopt" in
        -a) confirm -a -y "Replace the right file (accept)" || return
            ;;
        -r) confirm -a -y "Replace the left file (revert)" || return
            set -- "$2" "$1"
            ;;
        *)  return
    esac

    copy -a -f -- "$1" "$2" || return
    if [ "$1" -nt "$2" ] ; then
        system -q -- touch --reference "$1" "$2"
    elif [ "$2" -nt "$1" ] ; then
        system -q -- touch --reference "$2" "$1"
    fi
}

# ------------------------------------------------------------------------------
# run 'kompare' tool: <src> <dest>
#
# Kompare does not preserce file attributes, doing this by hand
# ------------------------------------------------------------------------------
run_kompare() {
    system -e -c -- kompare && kompare "$1" "$2" &>/dev/null
}

# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
run_merge() {
    local ahlp=("ignore  -  do nothing" '\n'
                "help    -  show this text" '\n'
                "quit    -  termiate the program" '\n'
                "shell   -  run the 'bash' shell")
    local vcmd='ignore help quit shell' flef frig
    [ -f "$1" ] && flef=1
    [ -f "$2" ] && frig=1

    if [ -n "$flef" ] && [ -n "$frig" -o ! -e "$2" ] ; then
        vcmd+=' accept'
        ahlp+=('\n' "accept  -  replace the right file")
    fi
    if [ -n "$frig" ] && [ -n "$flef" -o ! -e "$1" ] ; then
        vcmd+=' revert'
        ahlp+=('\n' "revert  -  replace the left file")
    fi
    if [ -n "$flef" -a -n "$frig" ] ; then
        vcmd+=' diff kompare'
        ahlp+=('\n' "diff    -  show differences between files")
        ahlp+=('\n' "kompare -  run the 'kompare' program")
    fi

    CEN_YESNO='y' ; CEN_HISTORY='-'
    while ! confirm -a -p " [ignore]: " -d "ignore" -v "$vcmd" "Enter merge command" ; do
        case "$CEN_CONFIRM" in
            help)   message -a -n "${ahlp[@]}" ;;
            quit)   error -s 4 ; return 1 ;;
            shell)  run_shell "$1" "$2" ;;
            accept) run_replace -a "$1" "$2" ; break ;;
            revert) run_replace -r "$1" "$2" ; break ;;
            diff)   run_diff "$1" "$2" ;;
            komp*)  run_kompare "$1" "$2" ;;
        esac
        CEN_AUTOIND=
     done
     return 0
}

# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
run_shell() {
    console -m 1                                # init to fancy mode, no cols
    run_replace -s "$@"
    export L="$1" R="$2"
    export PS1="$CEN_DECO_MARK$CEN_NAME$CEN_DECO_NORM \w\$ "
    system -r -- bash --norc
}

# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
run_prompt() {
    until confirm -d "help" -p ' [help]: ' \
                  -v "quit accept diff edit help kompare revert shell" \
                  "Enter command" ; do
        case "$?" in
        1)                                      # accept
            run_replace -a "$@" ; return ;;
        2)                                      # diff
            run_diff "$@" ;;
        3)                                      # edit
            run_edit "$@" ;;
        4)                                      # help
            message -m "quit    -  end this loop" \
                       "accept  -  replace right file and quit" \
                       "diff    -  show differences" \
                       "edit    -  edit file(s)" \
                       "help    -  show the text" \
                       "kompare -  run the 'kompare' program" \
                       "revert  -  replace left file and quit" \
                       "shell   -  run the 'bash' shell"
            ;;
        5)                                      # kompare
            run_kompare "$@" ;;
        6)                                      # revert
            run_replace -r "$@" ; return ;;
        7)                                      # shell
            run_shell "$@" ;;
        esac
    done
}

# ------------------------------------------------------------------------------
# make symlinks in temp folder and run kompare
# ------------------------------------------------------------------------------
DAT_TMPDIR=
run_files() {
    ___skip_equal() {
        local item="${2#./}" ides="${2#./}"
        if [ "$item" -ef "$orig/$ides" ] ; then
            trace -a -c "Skip folder" "$item"
            return 2
        fi
        return 0
    }

    local ddes dsrc orig
    resolve -e -m -s orig -- "$1" || return 1
    folder -c -f -- "$2" ; ddes="$PWD"
    walk -i -r -d ___skip_equal '.'
    trace -a -p "Found %s destination files" "${#CEN_WALK_FILES[@]}"
    folder -m -s DAT_TMPDIR -t -- "+$$"

    trace "Mirroring source folder:" "$orig ($DAT_TMPDIR)"
    local item fldr curr
    for item in "${CEN_WALK_FILES[@]}" ; do
        item="${item:2}"
        if [ ! -e "$orig/$item" ] ; then
            trace -a -c "No such file" -- "$orig/$item"
            continue
        fi
        fldr="${item%/*}"
        if [ "$fldr" != "$item" ] ; then
            [ "$fldr" != "$curr" ] && folder -f -m -- "$DAT_TMPDIR/$fldr"
            curr="$fldr"
        fi
        symlink "$orig/$item" "$DAT_TMPDIR/$item"
    done
    system kompare "$DAT_TMPDIR" "$ddes"
  }

# ------------------------------------------------------------------------------
# merge folders
# ------------------------------------------------------------------------------
run_folders() {
    local -A ddic

    ___dest_equal() {
        local item="${2#$dest}" ides="${2#$dest}"
        [ -n "$chgf" ] && ides="${item//$chgf/$chgt}"
        if [ ! -d "$orig/$ides" ] ; then
            message -a -c "No origin" "$ides"
            return 2
        elif [ "$item" -ef "$orig/$ides" ] ; then
            trace -a -c "Skip folder" "$item"
            return 2
        fi
        return 0
    }

    ___dest_dict() {
        ddic["${1#$dest/}"]=0
    }

    ___skip_equal() {
        local item="${2#./}" ides="${2#./}"
        [ -n "$chgf" ] && ides="${item//$chgf/$chgt}"
        if [ ! -d "$dest/$ides" ] ; then
            message -a -c "No destination" "$ides"
            return 2
        elif [ "$item" -ef "$dest/$ides" ] ; then
            trace -a -c "Skip folder" "$item"
            return 2
        fi
        return 0
    }

    local orig dest item ides chgf chgt
    [ -n "$CEN_OPT_CHANGE" ] && splitkeyval "$CEN_OPT_CHANGE" chgf chgt '/'
    resolve -e -m -s dest -- "$2" || return 1
    folder -c -- "$1" || return 1
    orig="$PWD"

    walk -i -n -r -d ___dest_equal -f ___dest_dict -- "$dest" || return 1
    trace -a -p "Found %s destination files" "${#ddic[@]}"

    walk -i -n -r -d ___skip_equal '.' || return 1
    trace -a -p "Found %s source files" "${#CEN_WALK_FILES[@]}"
    CEN_AUTOIND=

    for item in "${CEN_WALK_FILES[@]}" ; do
        item="${item:2}" ; ides="$item"
        [ -n "$chgf" ] && ides="${item//$chgf/$chgt}"
        ddic["$ides"]=1
        do_compare -v "$orig/$item" "$dest/$ides" && continue
        [ "$CEN_YESNO" = 'n' ] && continue
        run_merge "$orig/$item" "$dest/$ides" || return
    done

    CEN_AUTOIND=
    for item in "${!ddic[@]}" ; do
        [ "${ddic[$item]}" = 1 ] && continue
        message -a -c "Destination only" "$item"
    done
}

# ------------------------------------------------------------------------------
# check if we got a real file: <vsav> <path> <mesg>
# ------------------------------------------------------------------------------
do_check() {
    local info
    prettypath -s "$1" -t "$PWD" -- "$2"

    if [ ! -e "$2" ] ; then
        info="does not exit"
    elif [ ! -f "$2" ] ; then
        info="is not a file"
    elif [ ! -r "$2" ] ; then
        info=" not readable"
    elif [ ! -w "$2" ] ; then
        info="not writeable"
    else
        return 0
    fi

    console -m 1                                # init to fancy mode, no cols
    message -a -d bold "$3 $info:" "${2#$PWD/}" ; return 1
}

# ------------------------------------------------------------------------------
# Check for allowed options
# ------------------------------------------------------------------------------
do_badopts() {
    local sopt sval
    for sopt in "$@" ; do
        sval="CEN_OPT_$sopt"
        eval sval=\$$sval
        [ -z "$sval" ] || error "Bad use of option" "'--${sopt,,}'"
    done
}

# ------------------------------------------------------------------------------
# The one and only action: <src> @<dist>|<dest>
# ------------------------------------------------------------------------------
run() {
    local ffix scmd fsrc="$1" fdes="$2" ferr=0

    # using repository names?
    if [ "${fsrc::1}" = '@' ] ; then
        do_dist fsrc "$fdes" || return
    elif [ "${fdes::1}" = '@' ] ; then
        do_dist fdes "$fsrc" || return
    fi

    # using folders?
    if   [ -d "$fdes" ] ; then
        if [ -d "$fsrc" ] ; then
            do_badopts 'ACCEPT' 'EDIT' 'FIX' 'KOMPARE' 'PROMPT' 'REVERT' 'SHELL'
            error -t || return
            if [ -n "$CEN_OPT_MERGE" ] ; then
                run_folders "$fsrc" "$fdes"
            else
                run_files "$fsrc" "$fdes" ; remove -d -- "$DAT_TMPDIR"
            fi
            return
        fi
        [ -f "$fsrc" ] && fdes+="/${fsrc##*/}"
    elif [ -d "$fsrc" -a -f "$fdes" ] ; then
        fsrc+="/${fdes##*/}"
    fi

    do_badopts 'CHANGE' ; error -t || return
    if do_compare -s "$fsrc" "$fdes" ; then
        [ -z "$CEN_OPT_PROMPT" -a -z "$CEN_OPT_SHELL" ] && return
    fi

    do_check fsrc "$fsrc" $"Left  side" || ((ferr |= 1))
    do_check fdes "$fdes" $"Right side" || ((ferr |= 2))

    if [ -n "$CEN_OPT_ACCEPT" ] ; then
        [ "$ferr" = 2 -a ! -e "$fdes" ] && ferr=
        scmd='accept'
    elif [ -n "$CEN_OPT_EDIT" ] ; then
        ffix=1 ; scmd='edit'
    elif [ -n "$CEN_OPT_KOMPARE" ] ; then
        ffix=1 ; scmd='kompare'
    elif [ -n "$CEN_OPT_MERGE" ] ; then
        [ "${ferr:-0}" = 0 ] && ffix=1
        scmd='merge' ; ferr=
    elif [ -n "$CEN_OPT_PROMPT" ] ; then
        ffix=1 ; scmd='prompt'
    elif [ -n "$CEN_OPT_REVERT" ] ; then
        [ "$ferr" = 1 -a ! -e "$fsrc" ] && ferr=
        scmd='revert'
    elif [ -n "$CEN_OPT_SHELL" ] ; then
        [ "${ferr:-0}" = 0 ] && ffix=1
        scmd='shell' ; ferr=
    else
        scmd='diff'
    fi

    if [ "${ferr:-0}" != 0 ] ; then
        error "Cannot run command:" "$scmd" ; return
    fi

    [ "$scmd" = 'accept' ] && scmd='files -a'
    [ "$scmd" = 'revert' ] && scmd='files -r'

    [ -z "$CEN_OPT_FIX" ] && ffix=
    if [ -n "$ffix" ] ; then
        do_fix -b "$fsrc" 0 ; do_fix -b "$fdes" 1
        run_$scmd "$fsrc" "$fdes"
        do_fix -e "$fsrc" 0 ; do_fix -e "$fdes" 1
    else
        run_$scmd "$fsrc" "$fdes"
    fi
}

# ------------------------------------------------------------------------------
# option parsing: <option> <argument>
# ------------------------------------------------------------------------------
options() {
    case "$1" in

    '')     local opts="$CEN_OPT_ACCEPT$CEN_OPT_REVERT"
            optarg "$opts" - -m '--accept --revert'
            opts+="$CEN_OPT_EDIT$CEN_OPT_KOMPARE$CEN_OPTMERGE$CEN_OPT_PROMPT$CEN_OPT_SHELL"
            optarg "$opts" - -m '--edit --kompare --merge --prompt --shell --accept --revert'
            [ -n "$CEN_OPT_FIX" -o -n "$CEN_OPT_ROOT" ] && context -s
            CEN_HISTORY='-' ;;

    -A|--acc*)
        optarg 'accept'     -       ;;   # simple flag
    -C|--cha*)
        optarg 'change'     - -t    ;;  # any text
    -E|--edi|--edit)
        optarg 'edit'       - 'l|lef|left|r|rig|righ|right|b|bot|both|-' ;;
    -F|--fix)
        optarg 'fix'        -       ;;   # simple flag
    -K|--kom*)
        optarg 'kompare'    -       ;;   # simple flag
    -M|--mer*)
        optarg 'merge'      -       ;;   # simple flag
    -P|--pro*)
        optarg 'prompt'     -       ;;   # simple flag
    -R|--rev*)
        optarg 'revert'     -       ;;   # simple flag
    -S|--she*)
        optarg 'shell'      -       ;;   # simple flag
    -T|--tim|--time)
        optarg 'time'       -       ;;   # simple flag
    -U|--roo|--root)
        optarg 'root'       -       ;;   # simple flag

    esac
}

# ------------------------------------------------------------------------------
# print usage info
# ------------------------------------------------------------------------------
usage() {

    usageset \
        -u "(1) $CEN_NAME <opt>... [-E|-K|-M|-P|-S] [-A|-R|-T] [-F] <arg1> <arg2>" \
        -u "(2) $CEN_NAME <opt>... [-M] [-T] <dir1> <dir2>" \
        -u - \
        -u "$CEN_TITLE. Form (1) works for single files," \
        -u "whereas form (2) operates recursively on folders." \
        -o - \
        -o '-A --accept'         $"accept changes" \
        -o '-R --revert'         $"revert changes" \
        -o '-T --time'           $"treat pair with same timestamp as equal" \
        -o - \
        -o '-C --change  <expr>' $"fix ownership, mode and timestamp" \
        -o '-F --fix'            $"fix ownership, mode and timestamp" \
        -o '-U --root'           $"run as root user" \
        -o - \
        -o '-E --edit    <what>' $"[*] edit left|right|both files" \
        -o '-K --kompare'        $"[*] run 'kompare' gui tool" \
        -o '-M --merge'          $"[*] smart interactive mode" \
        -o '-P --prompt'         $"[*] simple interactive mode" \
        -o '-S --shell'          $"[*] open a shell" \
        -o - \
        -o $"[*] these options are mutually exclusive"
    usageset \
        -p '<argN>'   '         '$"folder, file or @<dist> (repository argument)" \
        -p '<dirN>'   '         '$"folder or @<dist>       (repository argument)" \
        -p '<expr>'   '         '$"path string change expression: <from>/<to>" \
        -p '<what>'   '         '$"one of ..." \

    local tlnk="${CEN_INSTALL#*:*:}" ; tlnk="${tlnk%%:*}"
    usageset \
        -e 'Â°                    '$"# run diff tool (default) ..." \
        -e ". somefile otherfile" \
        -e 'Â°                    '$"# run kompare (existing files only) ..." \
        -e ". somedir otherdir" \
        -e 'Â°                    '$"# run kompare (gui only) ..." \
        -e ". --kompare --fix $CEN_NAME.bak $CEN_NAME" \
        -e 'Â°                    '$"# merge dialog (centauriconfig)..." \
        -e ". --merge somefile otherfile" \
        -e 'Â°                    '$"# repository argument ..." \
        -e ". $tlnk/$CEN_NAME @bullseye" \
        -e ". --edit @eye $tlnk/$CEN_NAME"
}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

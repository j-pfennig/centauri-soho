#!/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Dr. JÃ¼rgen Pfennig (c) 2021-2024; "$"BSD License"
CEN_TITLE=$"Centauri initialization and launcher for appliances"

# Import the bash library, set name and version
PATH+=":${0%/*}" . _centauri_bash_lib -a -d -t -v -y - '0.10:2' || exit 2

CEN_SVC_WANTED_BY='sysinit.target'

# This service type does not use actionStop.
CEN_SVC_TYPE='once'

# no root user check for custom commands
CEN_SVC_NOROOT=1

# folder for issue data
DAT_ISSUE_DIR="$CEN_ROOT/persistent/issue.d"

# ------------------------------------------------------------------------------
# appliances configuration support
# ------------------------------------------------------------------------------

# array filled in get_appliances() ...
DAT_APPL_LABEL=
DAT_APPL_LEVEL=
DAT_APPL_MODE=
DAT_APPL_CONF=
DAT_APPL_ARGS=
DAT_APPL_AUTO=

# homeassistant user
DAT_APPL_HASS='homeassistant'

# dummy function to skip 'appliance' config lines
appliance() { : ; }

get_appliances() {
    [ -n "$DAT_APPL_LABEL" ] && return 0        # already loaded

    ___appl_reader() {                          # reader callback
        [ "${1::9}" = 'appliance' ] || return 0
        set -f ; eval set -- $1 ; set +f

        # user kiosk or homeassistant must exist for these appliances
        local auto
        if [[ "$6" == *centaurilogin=* ]] ; then
             auto="${6#*centaurilogin=}" ; auto="${auto%% *}"
             system -q -r -- getent passwd "$auto" || return 0
        fi

        DAT_APPL_LABEL+=("$2") ; DAT_APPL_LEVEL+=("$3")
        DAT_APPL_MODE+=("$4") ; DAT_APPL_CONF+=("$5")
        DAT_APPL_ARGS+=("$6") ; DAT_APPL_AUTO+=("$auto")
    }

    DAT_APPL_LABEL=() ; DAT_APPL_LEVEL=()
    DAT_APPL_MODE=() ; DAT_APPL_CONF=()
    DAT_APPL_ARGS=() ; DAT_APPL_AUTO=()
    configfile -r ___appl_reader || return 1
    [ -n "$DAT_APPL_LABEL" ] && return 0
    invoke -w $"Found no 'appliance' definitions" ; return 1
}

# set boot default to an appliance: <appl>
cfg_appliances() {
    local indx frmt acmd labl
    case "$1" in
    0)      [ "$CEN_ACTION" = 'default' ] || return
            if [ -d '/boot/efi/loader' ] ; then
                embed -v centauriefilinux -y menu 90 default 5
            else
                embed -v centauriraspi -y default
            fi ; return
            ;;
    [1-9])  indx="$(($1 - 1))"
            if [ -z "${DAT_APPL_LABEL[indx]}" ] ; then
                invoke -e $"Invalid appliance index:" "$1" ; return
            fi
            ;;
    *)      if ! listsearch -n indx -u -i DAT_APPL_LABEL -- "*$1*" ; then
                invoke -e $"Appliance not found" ; return
            fi
    esac

    local name="${DAT_APPL_LABEL[indx]}" swit args=()
    case "$CEN_ACTION" in
    enable)     acmd='create' ; frmt=$"Add appliance '%s' to boot menu" ;;
    disable)    acmd='delete' ; frmt=$"Remove appliance '%s' from boot menu" ;;
    *)          acmd='default' ; frmt=$"Boot as appliance '%s'" ;;
    esac
    confirm -a -y -f "$frmt" "$name" || return

    if [ "$acmd" != 'delete' ] ; then
        local opti="${DAT_APPL_CONF[indx]}"
        netoption "$opti" "$HOSTNAME" ||
            warning -p "Appliance '%s' is not in network config, no automatic setup" "$name"
    fi

    if [ "$acmd" = 'create' ] ; then
        remove -- "$CEN_ROOT/persistent/centauriswitch-override"
        [ -n "${DAT_APPL_MODE[indx]#-}" ] && swit="${DAT_APPL_MODE[indx]}"
        [ -n "${DAT_APPL_CONF[indx]#-}" ] && swit="${swit:-smart}:${DAT_APPL_CONF[indx]}"
        [ -n "$swit" ] && args+=("centauriswitch=$swit") #|| args+=('-')
        [ -n "${DAT_APPL_ARGS[indx]}" ] && args+=("${DAT_APPL_ARGS[indx]}")
        [ -n "${DAT_APPL_LEVEL[indx]}" ] && args+=("systemd.unit=runlevel${DAT_APPL_LEVEL[indx]}.target")
        # must register to launch the menu ...
        [ -n "${DAT_APPL_AUTO[indx]}" ] && embed -t -v centauristartup install
    fi

    if [ -d '/boot/efi/loader' ] ; then
        acmd="4$((indx + 1))"
        case "$CEN_ACTION" in
            enable)      embed -v centauriefilinux -y menu --- "$acmd" create "$name" "${args[@]}" ;;
            disable)     embed -v centauriefilinux -y menu --- "$acmd" delete ;;
            *)           embed -v centauriefilinux -y menu --- "$acmd" default
        esac
    elif [ -d '/boot/firmware' ] ; then
        name="${DAT_APPL_CONF[indx]}" ; acmd=
        if [ "$name" = 'disabled' ] ; then
            name='bootmenu' ; swit='splash'
        elif [ "$name" = '-' ] ; then
            name='kiosk' ; swit='splash'
        else
            swit='nosplash'
        fi
        if [ "${DAT_APPL_AUTO[indx]}" = "$DAT_APPL_HASS" ] ; then
            [ "${name:--}" = '-' ] && name='hass' || name="hass-${name::3}"
            acmd='minimal'
        else
            [ "${name:--}" = '-' ] && name="${DAT_APPL_MODE[indx]}"
            [ "${name:--}" = '-' ] && name='bootmenu'
        fi
        case "$CEN_ACTION" in
            enable)      embed -v centauriraspi -y entry  --- "$name" + "$swit" "${args[@]}" ;;
            disable)     embed -v centauriraspi -y remove --- "$name" ;;
            *)           embed -v centauriraspi -y config --- "$name" "$acmd" ;;
        esac
    else
        invoke -e $"No supported boot method implemented"
    fi
}

# ------------------------------------------------------------------------------
# called at service start
# ------------------------------------------------------------------------------
run_appliances() {
    # undo /etc/XWrapper.conf config override (see centauristartx)
    local wrap="${CEN_PATHS[2]}/X11/Xwrapper.config"
    [ -f "$wrap.default" ] && move -q -x -- "$wrap.default" "$wrap"

    local sarg wrds word levl netw auto
    if [ $# = 0 ] ; then
        readline -e -a wrds -i '/proc/cmdline'  # get the boot parametes
    else
        wrds=("$@")
    fi
                                                # are we in runlevel 2/3 ?
    listsearch -g -m word -i wrds -- 'systemd.unit=runlevel[23].target' || return
    word="${word#*=}" ; levl="${word%.*}"
    trace -a -c "Runlevel" -- "$levl"

    listsearch -g -m word -i wrds -- 'centauriswitch=*'
    netw="${word#*=}"
    trace -a -c "centauriswitch" -- "$netw"

    listsearch -g -m word -i wrds -- 'centaurilogin=*'
    auto="${word#*=}"
    trace -a -c "centaurilogin" -- "$auto"

    case "$netw" in
        router:*)   ;;
        switch:*)   ;;
        *)          netw=                       # no network services
    esac
    message -a -c $"Appliance mode" "${netw:-$auto}"

    if [ -z "$netw" ] ; then
        :
    elif [ "$levl" = 'runlevel2' ] ; then
        # networking is not configured in runlevel2
        system -e -p -- systemctl --no-block start networking
    fi

    # centaurilogin action ...
    if [ "$auto" = "$DAT_APPL_HASS" ] ; then
        message -a -c $"Start service" 'centaurihass'
        system -e -p -- systemctl --no-block start centaurihass
    elif [ -n "$auto" ] ; then
        message -a -c $"Autologin user" "$auto"
        system -e -p -- systemctl --no-block start centauriautologin@"$auto"
    fi

    # enable anacron and swap ...
    system -w -p -- systemctl --no-block start anacron.timer centauriswap
}

# ------------------------------------------------------------------------------
# called at service start
# ------------------------------------------------------------------------------
run() {
    if [ "${CEN_PATHS[6]}/centaurinetcfg" -nt "$CEN_ROOT/persistent/centaurinetcfg" ] ; then
        message $"Updating network configuration cache"
        embed centaurinetcfg setup
    fi

    # get script path and source it
    local scrp="${CEN_PATHS[6]}/$CEN_NAME"
    if [ -e "$scrp" ] ; then
        message -c $"Running script" "$scrp"
        . "$scrp"
        run_appliances
    else
        warning -c $"Missing script" "$scrp"
    fi
}

# ------------------------------------------------------------------------------
# action config: [<appl>]
# ------------------------------------------------------------------------------
actionConfig() {
    local indx=0 icfg frst=1 wrds=$"quit" opti optw

    if [ "${CEN_PATHS[6]}/centaurinetcfg" -nt "$CEN_ROOT/persistent/centaurinetcfg" ] ; then
        message $"Running full network setup"
        embed centaurinetcfg setup -
    fi

    get_appliances || return

    if [ $# -gt 0 ] ; then
        cfg_appliances "$1" ; return
    fi

    message -m $"Configured appliances are:" ''
    if [ "$CEN_ACTION" = 'default' ] ; then
        message -i '0:' $"Default boot mode"
        wrds+=' 0' ; frst=0
    fi

    while [ -n "${DAT_APPL_LABEL[indx]}" ] ; do
        opti="${DAT_APPL_CONF[indx]}"
        [ -z "$opti" ] && opti="${DAT_APPL_MODE[indx]}"
        if [ "$opti" = '-' ] ; then
            opti=
        elif netoption "$opti" "$HOSTNAME" ; then
            opti=
        else
            opti=' [*]' ; optw=1
        fi
        ((indx += 1)) ; wrds+=" $indx"
        message -i "$indx:" "${DAT_APPL_LABEL[indx-1]}$opti"
    done
    message -i ' '
    if [ -n "$optw" ] ; then
        message -i -m $"[*] This appliance is not enabled by network configuration. Please" \
                      $"    adjust the appropriate 'option <what> <host>...' statement in" \
                      $"    file '/etc/default/centaurinetcfg' to enable it." ''
    fi
    [ "$CEN_ACTION" = 'list' ] && return
    while ! confirm -p - -s icfg -v "$wrds" \
            $"Select an Appliance or hit <return> when finished"" [$frst..$indx]" ; do
        if [ "$CEN_ACTION" = 'default' ] ; then
            CEN_ACTION='enable'  ; cfg_appliances "$icfg"
            CEN_ACTION='default' ; cfg_appliances "$icfg"
            return
        fi
        cfg_appliances "$icfg"
    done
}

# ------------------------------------------------------------------------------
# action config:    add   <file> <args>     # must be execute to have args
#                   clear                   # no args
#                   exec                    # no args
#                   test  <wtim>            # optional arg
# ------------------------------------------------------------------------------
actionIssue() {
    local fldr="$DAT_ISSUE_DIR" cmd3="${1::3}" arg0="$2" arg1="$3"
    [ "$cmd3" = 'tes' ] || context -r
    case "$#$cmd3" in
    2add)   folder -f -m -- "$fldr" ; copy -a -- "$2" "$fldr" ; return
            ;;
    ?add)   sysfind -f -s arg0 -- "$arg0"
            arg1="${2##*/} ${*:3}" ; arg1="${arg1//[\.\/[:space:]]/_}"
            folder -f -m -- "$fldr"
            local list=("#!$BASH" "$arg0 ${*:3}")
            create -v list -c "$fldr/$arg1" 775 ; return
            ;;
    1cle)   remove -d -- "$fldr" ; return
            ;;
    1exe)   ;;
    1tes)   [ -d "$fldr" ] || quit 1 ; return
            ;;
    2tes)   if [ "$arg0" = '-' ] ; then
                [ -d "$fldr" ] || return
                system -e -p -u - -- systemctl --no-ask-password start centauriissue
                return
            fi
            while [ "$arg0" -gt 0 ] ; do
                [ -d "$fldr" ] || break
                timer -w 1 ; ((arg0 -= 1))
            done ; return
            ;;
    *)      invoke -e $"Invalid arguments:" "$*"
    esac

    ## no active session - wait a little to let boot message drain
    if runservice status 'sddm' || runservice status 'lightdm' ; then
        timer -w 1
    else
        timer -w 5
    fi

    setupcon --current-tty
    local item
    for item in "$fldr"/* ; do
        if [ -x "$item" ] ; then
            "$item"
        else
            cat "$item"
            read -N1 -p $"Press any key to continue"
        fi
        remove -- "$item"
        clear
    done
    system -q -- rmdir "$fldr"

    # some heuristics to find the 'right' active session
    local sesa sesn sesi
    system -q -a sesa loginctl list-sessions --no-legend || return
    for sesn in "${sesa[@]}" ; do
        set -- $sesn
        [ "${4::4}" = 'seat' ] || continue
        sesi="$1"
        [ "${5::3}" = 'tty' ] || continue
        sesi="$1" ; break
    done

    [ -n "$sesi" ] && system -e -p loginctl activate "$sesi" && return
    read -N1 -p $"Cannot find active console, use <Alt><Fn> to switch manually"
    system -q chvt 1
}

# ------------------------------------------------------------------------------
# action parsing: <verb> <argument>...
# ------------------------------------------------------------------------------
actions() {
    case "$1" in

    def*)
        invoke -r 'default'    actionConfig 0 1 ;;  # one optional arg
    dis*)
        invoke -r 'disable'    actionConfig 0 1 ;;  # one optional arg
    ena*)
        invoke -r 'enable'     actionConfig 0 1 ;;  # one optional arg
    iss*)
        invoke    'issue'      -            1 + ;;  # at least one arg
    lis|list)
        invoke    'list'       actionConfig 0 ;;    # no args

    #test)                                          # helper for testing
    #   invoke    'test'       run_appliances
    esac
}

# ------------------------------------------------------------------------------
# Print usage info
# ------------------------------------------------------------------------------
usage() {
    # resolve the config folder path (/etc/default for debian)
    prettypath -c -- "$CEN_ROOT/default/$CEN_NAME"

    # more help text ...
    usageset \
        -a 'list'               $"list configured appliances" \
        -a 'default  [<appl>]'  $"[*] set/remove a boot default" \
        -a 'disable  <appl>'    $"[*] disable an appliance in boot menu" \
        -a 'enable   <appl>'    $"[*] enable an appliance in boot menu" \
        -a - \
        -a 'issue add  [<args>]' $"add a issue file or an exucutable" \
        -a 'issue clear'         $"remove any pending issues" \
        -a 'issue execute'       $"show or run issues, used by 'centaurissues.service'" \
        -a 'issue test [<wtim>]' $"test for pending service, can wait until done" \
        -a - \
        -a $"[*] these actions use the 'centauriefilinux' or 'centauriraspi' tools." \
        -a $"    Grub's boot menu must be adapted manually (if used at all)."

    usageset \
        -p '<appl>'              $"appliance name or index (see 'list' action)" \

    usageset \
        -t "While linux servers or workstations typically launch a stack of network" \
        -t "related services at startup (e.g. runlevel > 3), an appliance starts at" \
        -t "runlevel=2 and handles further service starts via centauriswitch configs." \
        -t - \
        -t "$CEN_NAME sources '$CEN_PRETTYPATH' which can execute" \
        -t "additional startup code (like 'rc.local' once did). Optionally an array" \
        -t "named 'appliances' can be added to configure supported appliances." \
        -t - \
        -t "Appliances use <conf> from the 'centauriswitch=<mode>:<conf>' kernel boot cmd" \
        -t "to start services and other things via '${CEN_PRETTYPATH%/*}/centauriswitch'." \
        -t - \
        -l "issue" \
        -t "This mechanism can run programs or show messages on a console before any" \
        -t "GUI tool gets started. This is done via service 'centauriissue' that runs" \
        -t "'$CEN_NAME execute' when '$DAT_ISSUE_DIR' exists." \
        -t - \
        -t "The 'lightdm' and 'sddm' display manager services have override files to" \
        -t "run 'centauristartx' before starting the dm. This tool checks for pending" \
        -t "issues to prevent the dm to switch away from the issues console." \
        -t - \
        -t "Finally 'centaurisession' (which runs at login) checks for pending issues" \
        -t "and can run a user notification."
}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

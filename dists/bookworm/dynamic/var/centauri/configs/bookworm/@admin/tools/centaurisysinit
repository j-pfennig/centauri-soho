#!/usr/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Dr. JÃ¼rgen Pfennig (c) 2021-2025; "$"BSD License"
CEN_TITLE=$"Centauri initialization and launcher for appliances"

# Import the bash library, set name and version
PATH+=":${0%/*}" . _centauri_bash_lib -a -d -t -v -y - '0.14:6' || exit 2

CEN_SVC_WANTED_BY='sysinit.target'

# This service type does not use actionStop.
CEN_SVC_TYPE='once'

# no root user check for custom commands
CEN_SVC_NOROOT=1

# folder for issue data
DAT_ISSUE_DIR="$CEN_PERSISTENT/issue.d"

# invoke 'issue' action if called via .centauriautologin symlink (see centaurisession)
DAT_AUTOLOGIN='.centauriautologin'
if [ "$CEN_NAME" = "$DAT_AUTOLOGIN" ] ; then
    CEN_NAME='centaurisysinit'
    set -- issue execute
fi

DAT_BOOT_YESN='-y'      # for confirm boot

# ------------------------------------------------------------------------------
# appliances configuration support
# ------------------------------------------------------------------------------

# arrays filled in get_appliances() ...
DAT_APPL_NAME=          # mode name
DAT_APPL_LABL=          # descriptive text
DAT_APPL_LEVL=          # systemd runlevel
DAT_APPL_MODE=
DAT_APPL_CONF=
DAT_APPL_ARGS=          # extra kernel args
DAT_APPL_AUTO=          # centauriautologin account

# homeassistant user
DAT_APPL_HASS='homeassistant'

## dummy functions to skip 'appliance' config lines
#appliance() { : ; }                 # TODO: legacy, remove
#apptimers() { : ; }
#appusers()  { : ; }

# get home folder: <name>
get_home() {
    [ "${1:--}" = '-' ] && return 0             # network appliance
    local stat home ; eval home=~"$1"
    if [ -d "$home" ] ; then
        if [ -e "$home/$DAT_AUTOLOGIN" ] ; then
            [ "$home/$DAT_AUTOLOGIN" -ef '/dev/null' ] &&
                stat=$"'$DAT_AUTOLOGIN' is a symlink to '/dev/null'"
        else
            stat=$"Missing '$DAT_AUTOLOGIN' file"
        fi
    else
        stat=$"No home folder"
    fi
    [ -z "$stat" ] && return 0
    trace -a -c -p "Appliance ignored" "$1 - $stat" ; return 1
}

# appliance definitions are provided by centauristartup...
get_appliances() {
    [ -n "$DAT_APPL_LABL" ] && return 0        # already loaded
    DAT_APPL_NAME=() ; DAT_APPL_LABL=() ; DAT_APPL_LEVL=()
    DAT_APPL_MODE=() ; DAT_APPL_CONF=() ; DAT_APPL_ARGS=() ; DAT_APPL_AUTO=()

    local list entr flds auto
    embed -r -a list -d '\n' -- centauristartup list
    for entr in "${list[@]}" ; do
        splitjoin -s flds -i entr
        auto="${flds[1]}"
        if [ "$CEN_ACTION" = 'default' ] && ! get_home "$auto" ; then
            flds[3]= ; flds[4]= ; flds[5]= ; flds[6]=
        fi
        DAT_APPL_NAME+=("${flds[0]}") ; DAT_APPL_LABL+=("${flds[2]}")
        DAT_APPL_LEVL+=("${flds[3]}") ; DAT_APPL_MODE+=("${flds[4]}")
        DAT_APPL_CONF+=("${flds[5]}") ; DAT_APPL_ARGS+=("${flds[6]}")
        DAT_APPL_AUTO+=("$auto")
    done
    [ -n "$DAT_APPL_LABL" ] && return 0
    invoke -w $"Found no 'appliance' definitions" ; return 1
}

# set boot default to an appliance: <appl>
cfg_appliances() {
    local indx frmt acmd labl
    case "$1" in
    0)      [ "$CEN_ACTION" = 'default' ] || return
            if [ -d '/boot/efi' ] && findmount '/boot/efi' ; then
                embed -v centauriefilinux -y menu 90 default 5 ; return
            elif [ -d '/boot/firmware' ] && findmount '/boot/firmware' ; then
                embed -v centauriraspi -y default ; return
            fi
            ;;
    [1-9]|1[0-9])
            indx="$(($1 - 1))"
            if [ -z "${DAT_APPL_LABL[indx]}" ] ; then
                invoke -e $"Invalid appliance index:" "$1" ; return
            fi
            ;;
    *)      if ! listsearch -n indx -u -i DAT_APPL_LABL -- "*$1*" ; then
                invoke -e $"Appliance not found" ; return
            fi
    esac

    local name="${DAT_APPL_LABL[indx]}" swit args=()
    case "$CEN_ACTION" in
    enable)     if [ -z "${DAT_APPL_LEVL[indx]}" ] ; then
                    error $"Cannot enable this appliance:" "$name"
                    return
                fi
                acmd='create' ; frmt=$"Add appliance '%s' to boot menu" ;;
    disable)    acmd='delete' ; frmt=$"Remove appliance '%s' from boot menu" ;;
    *)          acmd='default' ; frmt=$"Boot as appliance '%s'" ;;
    esac
    confirm -a "$DAT_BOOT_YESN" -f "$frmt" "$name" || return
    [ "$acmd" = 'default' ] && DAT_BOOT_YESN='-n'

    if [ "$acmd" != 'delete' ] ; then
        local opti="${DAT_APPL_CONF[indx]}"
        if [ "${opti:--}" != '-' ] ; then
            netoption "$opti" "$HOSTNAME" ||
                warning -p $"Mode '%s' no configured for host, no automatic setup" "$opti"
        fi
    fi

    if [ "$acmd" = 'create' ] ; then
        override -d 'centauriswitch*'
        [ -n "${DAT_APPL_MODE[indx]#-}" ] && swit="${DAT_APPL_MODE[indx]}"
        [ -n "${DAT_APPL_CONF[indx]#-}" ] && swit="${swit:-smart}:${DAT_APPL_CONF[indx]}"
        [ -n "$swit" ] && args+=("centauriswitch=$swit")
        [ -n "${DAT_APPL_ARGS[indx]#-}" ] && args+=("${DAT_APPL_ARGS[indx]}")
        [ -n "${DAT_APPL_LEVL[indx]}" ] && args+=("systemd.unit=runlevel${DAT_APPL_LEVL[indx]}.target")
        # must register to launch the menu ...
        auto="${DAT_APPL_AUTO[indx]}"
        if [ -n "$auto" ] ; then
            args+=("centaurilogin=$auto")
            embed -t -v centauristartup -q install "$auto"
        fi
    fi

    if [ -d '/boot/efi' ] && findmount '/boot/efi' && [ -d '/boot/efi/loader' ] ; then
        acmd="$((indx + 41))"
        case "$CEN_ACTION" in
            enable)     case "${DAT_APPL_LEVL[indx]}" in
                        2)  name=$"Display: ""$name" ;;
                        3)  name=$"Network: ""$name" ;;
                        *)  name=$"Linux:   ""$name"
                        esac
                        embed -v centauriefilinux -y menu --- "$acmd" create "$name" "${args[@]}" ;;
            disable)    embed -v centauriefilinux -y menu --- "$acmd" delete ;;
            *)          embed -v centauriefilinux -y menu --- "$acmd" default
        esac
    elif [ -d '/boot/firmware' ] && findmount '/boot/firmware' ; then
        [ "${DAT_APPL_LEVL[indx]}" = 3 ] && swit='nosplash' || swit='splash'
        [ "$name" = 'clock' -o "$name" = 'hass' ] && acmd='minimal' || acmd='default'
        case "$CEN_ACTION" in
            enable)      embed -v centauriraspi -y entry  --- "$name" + "$swit" "${args[@]}" ;;
            disable)     embed -v centauriraspi -y remove --- "$name" ;;
            *)           embed -v centauriraspi -y config --- "$name" "$acmd" ;;
        esac
    else
        invoke -e $"No supported boot method implemented"
    fi
}

# ------------------------------------------------------------------------------
# called at service start
# ------------------------------------------------------------------------------
# Appliances are started only in runlevel2 or 3 (see systemd.unit kernel param).
#
# *** Network Appliances ***
#
#   When kernel argument centaurilogin=<user> is NOT present, this routine does
#   nothing, network appliances use the centauriswitch configuration to start
#   services.
#
# *** Display Appliances ***
#
# For runlevel2 the services networking and inetd are started unless networking
# is disabled via centauriswitch=disabled|manual.
#
# Display appliances are handled by service centauriautologin which is started
# here. In turn this causes centauristartup to run.
# ------------------------------------------------------------------------------
run_appliances() {
    # undo /etc/XWrapper.conf config override (see centauridisplay)
    local wrap="${CEN_PATHS[2]}/X11/Xwrapper.config"
    [ -f "$wrap.default" ] && move -q -x -- "$wrap.default" "$wrap"

    local sarg wrds word levl netw auto
    if [ $# = 0 ] ; then
        readline -e -a wrds -i '/proc/cmdline'  # get the boot parametes
    else
        wrds=("$@")
    fi
                                                # are we in runlevel 2/3 ?
    listsearch -g -m word -i wrds -- 'systemd.unit=runlevel[23].target' || return
    word="${word#*=}" ; levl="${word%.*}"
    trace -a -c "Runlevel" -- "$levl"

    listsearch -g -m word -i wrds -- 'centauriswitch=*'
    netw="${word#*=}"
    trace -a -c 'centauriswitch' -- "$netw"

    listsearch -g -m word -i wrds -- 'centaurilogin=*'
    auto="${word#*=}"
    trace -a -c 'centaurilogin' -- "$auto"

    [ -z "$auto" ] && return    # no display appliance to run

    case "$netw" in
        disab*) netw= ;;
        manual) netw= ;;
    esac
    message -a -c $"Appliance mode" "${netw:-$auto}"

    if [ -n "$netw" -a "$levl" = 'runlevel2' ] ; then
        # networking is not default in runlevel2
        message -a -c $"Starting network" networking inetd
        system -e -p -- systemctl --no-block start networking inetd
    fi

    # run service centauriautologin
    local hdir ; eval hdir=~$auto
    if [ -e "$hdir/$DAT_AUTOLOGIN" ] ; then
        if [ "$hdir/$DAT_AUTOLOGIN" = '/dev/null' ] ; then
            message -a -c $"Autologin user" "$auto" $"Disabled via symlink to '/dev/null'"
            system -q -- plymouth quit
        else
            message -a -c $"Autologin user" "$auto" $"Starting up"
            system -e -p -- systemctl --no-block start centauriautologin@"$auto"
        fi
    elif [ "$auto" = 'local' ] ; then
        symlink -n -- "$CEN_TOOLS/centauristartup" "$hdir/$DAT_AUTOLOGIN"
        message -a -c $"Autologin user" "$auto" $"Enabled by default"
        system -e -p -- systemctl --no-block start centauriautologin@"$auto"
    else
        message -a -c $"Autologin user" $"Not enabled, try 'centauristartup install $auto'"
        system -q -- plymouth quit
    fi
}

# ------------------------------------------------------------------------------
# called at service start
# ------------------------------------------------------------------------------
run_netconfig() {
    # get the following info: <host> <method> <ifnames> <iflist>
    local imog ; readline -a imog -i "$CEN_PERSISTENT/centaurinetgen"

    if [ "${imog[0]}" != "$HOSTNAME" ] ; then       # full setup ...
        message -c $"Network config" $"hostname changed"
        embed centaurinetcfg setup -
        return
    fi

    # make sure to have cached network config
    if [ "$CEN_DEFAULT/centaurinetcfg" -nt "$CEN_PERSISTENT/centaurinetcfg" ] ; then
        message -c $"Network config" $"configuration update"
        embed centaurinetcfg setup
        netconfig -r                    # re-read configuration
    fi

    # check if interfaces have to be reconfigured
    local icon ; netquery -s icon 'connect'
    local imok ; netiface -k && imok='systemd' || imok='bios'
    local ilis="${*##*/}"               # interfaces without path
    if [ "${imog[3]}" != "${ilis// /;}" ] ; then
        message -p -c $"Network config" $"interface list changed to '%s'" "$ilis"
    elif [ "${imog[1]}" != "$icon" ] ; then
        message -p -c $"Network config" $"connect method changed to '%s'" "$icon"
    elif [ "${imog[2]}" != "$imok" ] ; then
        message -p -c $"Network config" $"naming mode changed to '%s'" "$imok"
    else
        return
    fi

    embed -v centaurinetgen --keep interfaces
}

# ------------------------------------------------------------------------------
# Called when running as a service or by action mode
# ------------------------------------------------------------------------------
run() {
    if [ -w '/dev/console' ] ; then
        echo $"System startup..." >/dev/console
    fi

    # update networking, pass list of interfaces
    run_netconfig /sys/class/net/*

    # get script path and source it
    local scrp="$CEN_DEFAULT/$CEN_NAME"
    if [ -e "$scrp" ] ; then
        message -c $"Running script" "$scrp"
        source "$scrp"
        run_appliances
    else
        warning -c $"Missing script" "$scrp"
    fi
}

# ------------------------------------------------------------------------------
# action config: [<appl>]
# ------------------------------------------------------------------------------
actionConfig() {
    local indx=0 icfg frst=1 wrds=$"quit" name opti optu optw

    if [ "$CEN_DEFAULT/centaurinetcfg" -nt "$CEN_PERSISTENT/centaurinetcfg" ] ; then
        message $"Running full network setup"
        embed centaurinetcfg setup -
    fi

    # migrate systemd boot entry 50 -> 80
    sysversion
    local suff="maintenance-mode-$CEN_SYS_NICKNAME.conf"
    if [ -e "/boot/entries/50-$suff" ] ; then
        rename "/boot/entries/50-$suff" "/boot/entries/80-$suff"
    fi

    get_appliances || return

    if [ $# -gt 0 ] ; then
        cfg_appliances "$1" ; return
    fi

    message -a -m $"Selectable boot modes and appliances are:" ''
    if [ "$CEN_ACTION" = 'default' -o "$CEN_ACTION" = 'list' ] ; then
        message -a -m ' 0: '$"Default boot mode"
        wrds+=' 0' ; frst=0
    fi

    while [ -n "${DAT_APPL_LABL[indx]}" ] ; do
        name="${DAT_APPL_CONF[indx]}"
        [ "${name:--}" = '-' ] && name="${DAT_APPL_MODE[indx]}"
        if [ "$name" = '-' -o "${DAT_APPL_LEVL[indx]}" = 2 ] ; then
            opti=
        elif [ -z "${DAT_APPL_LEVL[indx]}" ] ; then
            opti=' [#]'
            [ "$CEN_ACTION" = 'default' ] || wrds+=" $((indx + 1))"
            [ -n "$optu" ] && optu+='|'; optu+="${DAT_APPL_AUTO[indx]}"
        elif netoption "$name" "$HOSTNAME" ; then
            opti=
        else
            opti=' [*]' ; optw=1 ; DAT_APPL_LEVL[indx]=
        fi
        ((indx += 1)) ; [ -z "$opti" ] && wrds+=" $indx"
        message -i -p '%2s: %-30s %s' "$indx" "${DAT_APPL_LABL[indx-1]}" "$opti"
    done
    message -i ' '
    [ -n "$optu" ] &&
        message -i -m $"[#] This appliance is currently not enabled. To use it, please run" \
                      $"    'centauristartup install $optu'."
    [ -n "$optw" ] &&
        message -i -m $"[*] This appliance is not enabled by network configuration. Please" \
                      $"    adjust the appropriate 'option <what> <host>...' statement in" \
                      $"    file ""'$CEN_DEFAULT/centaurinetcfg'"$" to enable it." ''
    [ "$CEN_ACTION" = 'list' ] && return
    while ! confirm -p - -s icfg -v "$wrds" \
            $"Select an Appliance or hit <return> when finished"" [$frst..${wrds##* }]" ; do
        if [ "$CEN_ACTION" = 'default' ] ; then
            CEN_ACTION='enable'  ; cfg_appliances "$icfg"
            CEN_ACTION='default'
        fi
        cfg_appliances "$icfg"
    done
}

# ------------------------------------------------------------------------------
# action config:    add   [<file> [<args>]] # must be executable to have args
#                   clear                   # no args
#                   exec  [<cons>]          # console#
#                   test  <wtim>            # optional arg
# ------------------------------------------------------------------------------
actionIssue() {
    local fldr="$DAT_ISSUE_DIR" cmd3="${1::3}" arg0="$2" arg1="$3"
    [ "$cmd3" = 'exe' -o "$cmd3" = 'tes' ] || context -r
    case "$#$cmd3" in
    1add)   folder -f -m -- "$fldr"
            create -c -- "$fldr/$EPOCHSECONDS" 644 ; return
            ;;
    2add)   folder -f -m -- "$fldr"
            copy -a -- "$2" "$fldr" ; return
            ;;
    ?add)   sysfind -f -s arg0 -- "$arg0"
            arg1="${2##*/} ${*:3}" ; arg1="${arg1//[\.\/[:space:]]/_}"
            folder -f -m -- "$fldr"
            local list=("#!$BASH" "$arg0 ${*:3}")
            create -v list -- "$fldr/$arg1" 775 ; return
            ;;
    1cle)   remove -d -- "$fldr" ; return
            ;;
    ?exe)   ;;
    1tes)   [ -d "$fldr" ] || quit 1 ; return
            ;;
    2tes)   if [ "$arg0" = '-' ] ; then
                [ -d "$fldr" ] || return
                system -e -p -u - -- systemctl --no-ask-password start centauriissue
                return
            fi
            while [ "$arg0" -gt 0 ] ; do
                [ -d "$fldr" ] || break
                timer -w 1 ; ((arg0 -= 1))
            done ; return
            ;;
    *)      invoke -e - "$*"
    esac

    # --- execute - do we have anything to display? ---

    set -- "$fldr"/* ; [ -e "$1" ] || return

    # no active session - wait a little to let boot message drain
    if runservice status 'sddm' || runservice status 'lightdm' ; then
        timer -w 1
    else
        timer -w 1
        [ "${arg0:--}" = '-' ] || system -q chvt "$arg0"
        timer -w 3
    fi
    [ "${arg0:--}" = '-' ] || system -q chvt "$arg0"

    system -q -- setupcon --current-tty
    local item data coun
    for item in "$@" ; do
        if [ -x "$item" ] ; then
            "$item"
        else
            message -p $"Issue message #%s" $((coun++))
            echo
            inpdata -a data -- "$item" ; outdata -a -o data
            echo
            read -N1 -p "$CEN_NAME: "$"Press any key to continue"
        fi
        remove -- "$item"
        clear
    done
    system -q -- rmdir "$fldr"

    # some heuristics to find the 'right' active session
    local sesa sesn sesi
    system -q -a sesa loginctl list-sessions --no-legend || return
    for sesn in "${sesa[@]}" ; do
        set -- $sesn
        [ "${4::4}" = 'seat' ] || continue
        sesi="$1"
        [ "${5::3}" = 'tty' ] || continue
        sesi="$1" ; break
    done

    [ -n "$sesi" ] && system -e -p loginctl activate "$sesi" && return
    read -N1 -t2 -p $"Cannot find active console, use <Alt><Fn> to switch manually"
    echo
    system -q chvt 2
}

# ------------------------------------------------------------------------------
# Start appliance
# ------------------------------------------------------------------------------
actionMode() {
    run_appliances "centauriswitch=$1" "centauriautologin=$2" "systemd.unit=runlevel$3.target"
}

# ------------------------------------------------------------------------------
# action parsing: <verb> <argument>...
# ------------------------------------------------------------------------------
actions() {
    case "$1" in

    def*)
        invoke -r 'default'    actionConfig     0 1 ;;  # one optional arg
    dis*)
        invoke -r 'disable'    actionConfig     0 1 ;;  # one optional arg
    ena*)
        invoke -r 'enable'     actionConfig     0 1 ;;  # one optional arg
    iss*)
        invoke    'issue'      -                1 + ;;  # at least one arg
    lis|list)
        invoke    'list'       actionConfig     0   ;;  # no args
    mod|mode)
        invoke -r 'mode'       -                3   ;;  # three args
    esac
}

# ------------------------------------------------------------------------------
# Print usage info
# ------------------------------------------------------------------------------
usage() {
    usageset \
        -a 'issue add'           $"add an issue text from stdin" \
        -a 'issue add  [<argi>]' $"add a issue file or an exucutable" \
        -a 'issue clear'         $"remove any pending issues" \
        -a 'issue exec [<cons>]' $"show or run issues, used by 'centaurissues.service'" \
        -a 'issue test [<wtim>]' $"test for pending service, can wait until done" \
        -a 'â¢â¢â¢ '$"Appliance actions"' â¢â¢â¢' - \
        -a 'list'                $"list configured appliances" \
        -a 'mode     <netw> <user> <rlvl>' - \
        -a -                     $"enter an appliance mode" \
        -a 'default  [<appl>]'   $"[*] set/remove a boot default" \
        -a 'disable  <appl>'     $"[*] disable an appliance in boot menu" \
        -a 'enable   <appl>'     $"[*] enable an appliance in boot menu" \
        -a - \
        -a $"[*] these actions use the 'centauriefilinux' or 'centauriraspi' tools." \
        -a $"    Grub's boot menu must be adapted manually (if used at all)."

    usageset \
        -p '<appl>'             $"appliance name or index (see 'list' action)" \
        -p '<argi>'             $"an executable and arguments" \
        -p '<cons>'             $"console tty number  (usually: 8)" \
        -p '<netw>'             $"a centauriswitch networking mode" \
        -p '<rlvl>'             $"appliance run-level (usually: 2|3)" \
        -p '<user>'             $"appliance user      (usually: local|kiosk|clock)" \
        -p '<wtim>'             $"issue service test maximum wait time" \

    usageset \
        -t "While linux servers or workstations typically launch a stack of network" \
        -t "related services at startup (e.g. runlevel > 3), an appliance starts at" \
        -t "runlevel=2 and handles further service starts via centauriswitch configs." \
        -t - \
        -t "$CEN_NAME sources '$CEN_DEFAULT/$CEN_NAME' which can execute" \
        -t "additional startup code (like 'rc.local' once did). Optionally an array" \
        -t "named 'appliances' can be added to configure supported appliances." \
        -t - \
        -t "Appliances use <conf> from the 'centauriswitch=<mode>:<conf>' kernel boot cmd" \
        -t "to start services and other things via '$CEN_DEFAULT/centauriswitch'." \
        -t - \
        -l "issue" \
        -t "This mechanism can run programs or show messages on a console before any" \
        -t "GUI tool gets started. This is done via service 'centauriissue' that runs" \
        -t "'$CEN_NAME execute' when '$DAT_ISSUE_DIR' exists." \
        -t - \
        -t "The 'lightdm' and 'sddm' display manager services have override files to" \
        -t "run 'centauridisplay' before starting the dm. This tool checks for pending" \
        -t "issues to prevent the dm to switch away from the issues console." \
        -t - \
        -t "Finally 'centaurisession' (which runs at login) checks for pending issues" \
        -t "and can run a user notification."

    usageset \
        -e "# Configuration file example" \
        -e "Â° appliance 'Networking Menu' 2  disabled -  'centaurilogin=local'" \
        -e "Â° appliance 'Network Switch'  3  switch" \
        -e "Â° appliance 'Home Assistant'  2  smart    -  'centaurilogin=homeassistant'" \
        -e "Â° appliance 'Digital Clock'   2  smart    -  'centaurilogin=clock'" \
        -e "Â° appliance 'Kiosk Mode'      3  simple   -  'centaurilogin=kiosk'" \
        -e "# timers to be started in appliance modes" \
        -e "Â° apptimers   anacron apt-daily apt-daily-upgrade" \
        -e "# any bash script code to be run ..." \
        -e "Â° [ -x hello-sysinit ] && hello_sysinit"
}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

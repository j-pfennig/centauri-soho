#!/usr/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Dr. J. Pfenig (c) 2023-2024; BSD License"
CEN_TITLE=$"Tool to (un)install and run Home Assistant"

# Import the bash library, set name and version
PATH+=":${0%/*}" . _centauri_bash_lib -a -d -y - '0.14:2' || exit 2

# Data
DAT_BASE='/opt/HomeAssistant'
DAT_HOME="$DAT_BASE/home"
DAT_VENV="$DAT_BASE/homeassistant"

# data for extra options
CEN_OPT_VERSION='2024.1.6'

# ------------------------------------------------------------------------------
# Home Assistant service: on|off|status
# ------------------------------------------------------------------------------
actionAutorun() {
    folder -b 'persistent' -c -f
    local word
    if ! listsearch -u -m word -- "${1:-status}" 'on' 'off' 'status' ; then
        invoke -e "Argument must be one of: on off status" ; return
    fi
# TODO autologin
    case "$word" in
    on)     create -- 'centaurihass.enabled'
            system -q systemctl is-enabled 'centaurihass.service' || system -e -p \
                systemctl enable "$CEN_ROOT/systemd/system/centaurihass.service"  ;;
    off)    remove -- 'centaurihass.enabled' ;;
    *)      actionStatus
    esac
}

# ------------------------------------------------------------------------------
# Home Assistant dependencies: -no args-
# ------------------------------------------------------------------------------
actionDeps() {
    system -e -u - apt-get install -y python3 python3-dev python3-venv \
        python3-pip bluez libffi-dev libssl-dev libjpeg-dev zlib1g-dev \
        autoconf build-essential libopenjp2-7 libtiff6 libturbojpeg0-dev \
        tzdata ffmpeg liblapack3 liblapack-dev libatlas-base-dev
}

# ------------------------------------------------------------------------------
# install Home Assistant core step 1: -no args-
#
#   step 1: create folder, python, create user (needs root)
#   step 2: build python stuff (must run as homeassistant)
# ------------------------------------------------------------------------------
actionInstall() {
    system -q -r -- getent passwd 'homeassistant' ||
       system -f -p -- useradd -rm 'homeassistant' -d "$DAT_HOME" -G dialout,bluetooth
    attributes -d -m - -o 'homeassistant:staff' -- "$DAT_BASE"
    embed -r -t -u homeassistant -v -y -z -- \
                   "$CEN_NAME" --version="$CEN_OPT_VERSION" setup install
}

# ------------------------------------------------------------------------------
# install/update Home Assistant core step 2: install|update
# ------------------------------------------------------------------------------
actionSetup() {
    if [ "$USER" != 'homeassistant' ] ; then
        invoke -e "The current user must be 'homeassistant'" ; return
    fi

    folder -c -f "$DAT_BASE"
    system -f -p -r -- virtualenv "$DAT_VENV"
    source "$DAT_VENV/bin/activate" || quit -e "python venv activate failed"

    if [ "$1" = 'install' ] ; then
        system -e -q -- python3 -m pip install wheel
        error -t || return

        message -i ' '
        message -n $'\n'"Ready to install homeassistant.  This can take a very long time." \
                $'\n'"You can stop the installation now and continue later by running:" $'\n' \
                $'\n'"    sudo $CEN_NAME --version='$CEN_OPT_VERSION' install" $'\n'" "

        confirm -y "Continue to install homeassistant" || return

        system -e -- pip3 install homeassistant=="$CEN_OPT_VERSION"

     else
        confirm -y "Continue to update homeassistant" || return
        system -e -- pip3 install --upgrade homeassistant
     fi
}

# ------------------------------------------------------------------------------
# run Home Assistant: -no args-
# ------------------------------------------------------------------------------
actionRun() {
    local verb ; [ "$CEN_VERB" -gt 1 ] && verb='-v'
    system -e -u homeassistant -x -- "$DAT_VENV/bin/hass" $verb
}

# ------------------------------------------------------------------------------
# Home Assistant shell: -no args-
# ------------------------------------------------------------------------------
actionShell() {
    folder -c -f "$DAT_BASE"
    system -e sudo -u homeassistant -H -s
}

# ------------------------------------------------------------------------------
# show status: -no args-
# ------------------------------------------------------------------------------
actionStatus() {
    folder -b 'persistent' -c -f
    local word sise

    system -q systemctl is-enabled 'centaurihass.service' &&
        sise="enabled" || sise="not enabled"

    [ -f 'centaurihass.enabled' ] && word="on" || word="off"
    message -a -p "Autorun: %s   Service: %s" "$word" "$sise"
}

# ------------------------------------------------------------------------------
# run systemctl: -no args-
# ------------------------------------------------------------------------------
actionSystemctl() {
    system -e -p -z systemctl "$CEN_ACTION" "$CEN_NAME"
}

# ------------------------------------------------------------------------------
# uninstall Home Assistant: -no args-
# ------------------------------------------------------------------------------
actionUninst() {
    if [ ! -d "$DAT_VENV" ] ; then
        warning "No known 'Home Assistant' installation" ; return
    fi
    folder -c -f "$DAT_VENV"
    confirm -n "Uninstall Home Assistant" || return
    remove -d -- bin/ cache/ include/ lib/ share/ pyvenv.cfg LICENSE
    actionAutorun off
    message -a "Please remove folder '$DAT_VENV' and user 'homeassistant' manually"
}

# ------------------------------------------------------------------------------
# upgrade Home Assistant: -no args-
# ------------------------------------------------------------------------------
actionUpgrade() {
    embed -r -t -u homeassistant -v -y -z -- "$CEN_NAME" setup upgrade
}

# ------------------------------------------------------------------------------
# option parsing: <option> [<argument>]
# ------------------------------------------------------------------------------
options() {
    case "$1" in

    -V|--vers*)
        optarg 'version'    -       -t ;;       # any text

    esac
}

# ------------------------------------------------------------------------------
# action parsing: <verb> <argument>...
# ------------------------------------------------------------------------------
actions() {
    case "$1" in

    aut*)
        invoke -r 'autorun' -        0 1 ;;     # one optional arg
    dep*)
        invoke -r 'deps'    -          0 ;;
    ins*)
        invoke -r 'install' -          0 ;;     # no args
    run)
        invoke -r 'run'     -          0 ;;     # no args
    set*)
        invoke    'setup'   -          1 ;;
    sh*|log*)
        invoke -r 'shell'   -          0 ;;
    uni*)
        invoke -r 'uninst'  -          0 ;;
    upg*)
        invoke    'upgrade' -          0 ;;

    status)
        invoke    -         -          0 ;;
    start|stop|restart)
        invoke -r -  actionSystemctl   0 ;;
    esac
}

# ------------------------------------------------------------------------------
# usage info
# ------------------------------------------------------------------------------
usage() {
    usageset \
        -o - \
        -o '-V --version <vers>'  $"homeassistant version (default: $CEN_OPT_VERSION)" \

    usageset \
        -a 'autorun      <auto>'  $"behaviour of 'centaurihass.service'" \
        -a 'deps'                 $"install build dependencies" \
        -a 'install'              $"install homeassistant core" \
        -a 'run'                  $"run homeassistant 'hass' binary" \
        -a 'setup        <what>'  $"[internal] called by 'install' and 'upgrade'" \
        -a 'shell'                $"open a shell as user homeassistant" \
        -a 'uninstall'            $"uninstall homeassistant" \
        -a 'upgrade'              $"upgrade homeassistant" \
        -a - \
        -a 'start'                $"run ""'systemctl start $CEN_NAME'" \
        -a 'status'               $"... ""'systemctl status $CEN_NAME'" \
        -a 'stop'                 $"... ""'systemctl stop $CEN_NAME'" \

    usageset \
        -p '<auto>'               $"one of: on off status" \
        -p '<vers>'               $"homeassistant version to install" \

    usageset \
        -t $"To run homeassistant as a service enter:"\
        -t - \
        -t "    $CEN_NAME autorun on        # enable service " \
        -t "    $CEN_NAME autorun off       # disable service " \
        -t - \
        -t $"Action 'autorun' also creates or removes the '$CEN_NAME.enabled'" \
        -t $"file that is checked by the service as a start condition." \

    usageset \
        -e $"# A full build on a raspberry pi can take about one hour, in particular" \
        -e $"# the first 'run'. Try this command line and be patient:" \
        -e ". deps -- install -- run" \
        -e - \
        -e $"# Release upgrade via pip and restart:" \
        -e ". upgrade -- restart" \

}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

#!/usr/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL='Dr. J. Pfennig (c) 2023-2025; '$"BSD License"
CEN_TITLE=$"Tool to (un)install and run Homeassistant Core"

# ------------------------------------------------------------------------------
# Note: this tool implements service actions like start/stop/status but does not
#       use the _centauri_bash_svc module. So using opt -g with the proxy is OK.
# ------------------------------------------------------------------------------

# Import the bash library, set name and version
PATH+=":${0%/*}" . _centauri_bash_lib -a -d -f -g -s -y - '0.22:4' || exit 2

# Data
DAT_BASE='/opt/HomeAssistant'
DAT_HOME="$DAT_BASE/home"
DAT_VENV="$DAT_BASE/homeassistant"
DAT_ENAB="$DAT_VENV/service-enabled"    # see autorun
DAT_SERV="$CEN_NAME"                    # service name

DAT_NAME='homeassistant'
DAT_VERSION_311='2024.3.3'              # last python 3.11 version
DAT_VERSION_312='2025.1.4'              # known working python 3.12 version
DAT_VERSION_313='2025.2.3'              # known working python 3.13 version

# map HA version to python version
DAT_VERSIONS=("$DAT_VERSION_311" '3.11' # debian bookworm
              "$DAT_VERSION_312" '3.12'
              -                  '3.13'
              )
DAT_HAVER="${DAT_VERSIONS[0]}"
DAT_PYVER="${DAT_VERSIONS[1]}"          # the debian version, see vers_quirk

# data for extra options
CEN_OPT_QUIRK=                          # installation quirks
CEN_OPT_USER="$DAT_NAME"
CEN_OPT_VERSION=

# ------------------------------------------------------------------------------
# Is HA installed at all?
# ------------------------------------------------------------------------------
check_installed() {
    [ -d "$DAT_VENV/bin" ] && return 0
    message - $"Homeassistant not found, run '%s' to install it" "$CEN_NAME install"
    error -s 2                          # set exit code
    return 1
}

# ------------------------------------------------------------------------------
# python version compare: <syst> <want>
# ------------------------------------------------------------------------------
#   returns:    2   syst  >  want
#               1   syst  <  want
#               0   syst  == want
# ------------------------------------------------------------------------------
vers_compare() {
    local arg1=(${1//./ } 0 0 0) arg2=(${2//./ } 0 0 0)
    [ "${arg1[0]}" -gt "${arg2[0]}" ] && return 2
    [ "${arg1[0]}" -lt "${arg2[0]}" ] && return 1
    [ "${arg1[1]}" -gt "${arg2[1]}" ] && return 2
    [ "${arg1[1]}" -lt "${arg2[1]}" ] && return 1
    [ "${arg1[2]}" -gt "${arg2[2]}" ] && return 2
    [ "${arg1[2]}" -lt "${arg2[2]}" ] && return 1
    return 0
}

# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
vers_quirk() {
    system -f -c python

    # find required version from HA version
    if [ "${CEN_OPT_VERSION:--}" = '-' ] ; then
        if [ "$CEN_OPT_QUIRK" = 0 ] ; then          # limit to distribution vers
            trace -a $"Using distribution versions"
        else                                        # latest version
            trace -a $"Using latest known versions"
            DAT_PYVER="${DAT_VERSIONS[${#DAT_VERSIONS[@]}-1]}"
            DAT_HAVER="${DAT_VERSIONS[${#DAT_VERSIONS[@]}-2]}"
        fi
    else
        local want="$CEN_OPT_VERSION" vers indx=0
        while [ "$indx" -lt "${#DAT_VERSIONS[@]}" ] ; do
            vers="${DAT_VERSIONS[indx]}"
            [ "${vers:--}" = '-' ] && break
            vers_compare "$want" "$vers"
            [ $? = 2 ] || break
            ((indx += 2)) ; vers=
        done
        if [ "${vers:--}" = '-' ] ; then
            DAT_PYVER="${DAT_VERSIONS[${#DAT_VERSIONS[@]}-1]}"
        else
            DAT_PYVER="${DAT_VERSIONS[indx+1]}"
        fi
    fi
    if [ "$DAT_PYVER" != "${DAT_VERSIONS[1]}" ] ; then
        ((CEN_OPT_QUIRK |= 1))
        warning -a -p $"Need custom python '%s', activate --quirk=1 " "$DAT_PYVER"
    fi

    ((CEN_OPT_QUIRK & $1))                      # get status
}

# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
vers_setup() {
    if [ "$1" = '-c' ] ; then
        while [ -e "$DAT_VENV" ] ; do
            confirm -n -b $"Remove existing python environment (recommended)" || break
            remove -d -- "$DAT_VENV"
            error -t || return 1 ; break
        done

        if vers_quirk 1 ; then
            system -p -- "python$DAT_PYVER" -m venv "$DAT_VENV" || return 1
        else
            system -p -- virtualenv "$DAT_VENV" || return 1
        fi
        message -a $"Created python environment:" "$DAT_VENV"
    fi
    [ -s "$DAT_VENV/bin/activate" ] && source "$DAT_VENV/bin/activate" && return 0
    error $"Failed to activate python environment:" "$venv"
}

# ------------------------------------------------------------------------------
# Home Assistant service: on|off|status
# ------------------------------------------------------------------------------
actionAutorun() {
    check_installed || return
    local word vsee="# This file is a start condition for '$DAT_SERV.service'"

    if ! listsearch -u -m word -- "${1:-status}" 'on' 'off' 'status' ; then
        invoke -a 'on off status' ; return
    fi

    # we use 'service-enabled' to control if HA should run or not. This is why
    # we only enable the service but never disable it. The service unit checks
    # for file 'service-enabled'.

    # The 'centaurisysinit' service starts '$DAT_SERV', even if not
    # enabled, when kernel parameter 'centaurilogin=HomeAssistant' is set.

    case "$word" in
    on)     create -- "$DAT_ENAB"
            system -q systemctl is-enabled "$DAT_SERV" || system -e -p \
                systemctl enable "$CEN_ROOT/systemd/system/$DAT_SERV.service"  ;;
    off)    remove -- "$DAT_ENAB" ;;
    *)      actionStatus
    esac
}

# ------------------------------------------------------------------------------
# Home Assistant dependencies: -no args-
# ------------------------------------------------------------------------------
actionDeps() {
    embed -v -y centauripackage -s -y -I -L -T -X python3 python3-dev python3-venv \
        python3-pip bluez libffi-dev libssl-dev libjpeg-dev zlib1g-dev \
        autoconf build-essential libopenjp2-7 libtiff6 libturbojpeg0-dev \
        tzdata ffmpeg liblapack3 liblapack-dev libatlas-base-dev virtualenv
    error -t || return 1

    if vers_quirk 1 ; then
        if [ -n "$CEN_OPT_FORCE" ] || [ ! -s '/etc/apt/keyrings/deb-pascalroeleven.gpg' ] ; then
            tmpfile -r || return 1
            system -e  -u _apt -- wget -qO- 'https://pascalroeleven.nl/deb-pascalroeleven.gpg' \
                >"$CEN_TMPFILE" && copy "$CEN_TMPFILE" '/etc/apt/keyrings/deb-pascalroeleven.gpg'

        fi
        error -t || return 1
        create -c -t -- '/etc/apt/sources.list.d/pascalroeleven.sources' <<!EOF
Types: deb
URIs: http://deb.pascalroeleven.nl/python$DAT_PYVER
Suites: bookworm-backports
Components: main
Signed-By: /etc/apt/keyrings/deb-pascalroeleven.gpg
!EOF
        embed -t -v -y centauripackage -s -y -I -T -X -U1 \
            "python$DAT_PYVER" "python$DAT_PYVER"-venv "python$DAT_PYVER"-dev
        error -t || return 1
    fi

    message -a $"Build dependencies are installed"
}

# ------------------------------------------------------------------------------
# install Home Assistant core step 1: -no args-
#
#   step 1: create folder, python, create user (needs root)
#   step 2: build python stuff (must run as homeassistant)
#   step 3: (optional) install mqtt broker
# ------------------------------------------------------------------------------
actionInstall() {

    # create HA user, add to dialout and bluetooth groups

    if system -q -r -- getent passwd "$CEN_OPT_USER" ; then
        system -e -p -- adduser "$CEN_OPT_USER" bluetooth
        system -e -p -- adduser "$CEN_OPT_USER" dialout
    else
       system -e -p -- useradd -rm "$CEN_OPT_USER" -d "$DAT_HOME" -G dialout,bluetooth
    fi
    error -t || return

    # install HA

    if [ ! -d "$DAT_HOME" ] ; then
        folder -f -m -- "$DAT_HOME"
        copy -a "${CEN_PATHS[2]}/skel/".* "$DAT_HOME"
        system chown -R "$CEN_OPT_USER:" "$DAT_HOME" ; system chmod 775 "$DAT_HOME"
    fi
    folder -m "$CEN_ROOT/home" 775
    symlink "$DAT_HOME" "$CEN_ROOT/home/$CEN_OPT_USER"
    error -t || return

    attributes -d -m - -o "$CEN_OPT_USER:staff" -- "$DAT_BASE"
    system -c virtualenv || actionDeps
    embed -r -t -u "$CEN_OPT_USER" -v -y -z -- "$CEN_NAME" ${CEN_OPT_SILENT:+--silent} \
                   --version="${CEN_OPT_VERSION:--}" setup install
    error -t || return

    # install mosquitto

    local mosq
    LANG=C system -s mosq -q systemctl is-enabled 'mosquitto.service'
    case "$mosq" in
    enabl*) return ;;
    diabl*) warning $"The 'mosquitto' mqtt broker service is disabled" ; return ;;
    masked) warning $"The 'mosquitto' mqtt broker service is masked" ; return ;;
    esac
    confirm -y $"Also install 'mosquitto' mqtt broker" || return
    embed -v -y centauripackage -s -y -I -T mosquitto mosquitto-clients
}

# ------------------------------------------------------------------------------
# install/update Home Assistant core step 2: install|update
# ------------------------------------------------------------------------------
actionSetup() {
    if [ "$USER" != "$CEN_OPT_USER" ] ; then
        invoke -e $"The current user must be '%s'" "$CEN_OPT_USER" ; return
    fi
    if system -q -- systemctl is-active "$CEN_NAME" ; then
        invoke -e $"Please stop the service and retry" ; return
    fi

    folder -c -f "$DAT_BASE"

    local   slnt
    [ -n "$CEN_OPT_SILENT" ] && slnt='-q'

    if [ "$1" = 'install' ] ; then
        vers_setup -c || return
        system -e -q -- python3 -m pip install wheel
        error -t || return

        if [ -z "$slnt" ] ; then
            message -i ' '
            message -n $'\n'"Ready to install $DAT_NAME.  This can take a very long time." \
                    $'\n'"You can stop the installation now and continue later by running:" $'\n' \
                    $'\n'"    sudo $CEN_NAME --version='$DAT_HAVER' install" $'\n'" "
        fi
        confirm -y $"Continue to install $DAT_NAME" || return

        [ -n "$slnt" ] && progress -a -l -- $"Installing..."
        ((CEN_OPT_QUIRK & 1)) && system -e -- pip3 $slnt install --upgrade pip
        if [ "${DAT_HAVER:--}" = '-' ] ; then
            system -e -- pip3 $slnt install "$DAT_NAME"
        else
            system -e -- pip3 $slnt install "$DAT_NAME==$DAT_HAVER"
        fi
     else
        vers_setup || return
        confirm -y $"Continue to upgrade $DAT_NAME" || return
        [ -n "$slnt" ] && progress -a -l -- $"Upgrading..."
        ((CEN_OPT_QUIRK & 1)) && system -e -- pip3 $slnt install --upgrade pip
        system -e -- pip3 $slnt install --upgrade "$DAT_NAME"
     fi
     [ -n "$slnt" ] && error -t && message -a -- $"Done."
}

# ------------------------------------------------------------------------------
# run Home Assistant: -no args-
# ------------------------------------------------------------------------------
actionRun() {
    check_installed || return
    local verb ; [ "$CEN_VERB" -gt 1 ] && verb='-v'
    system -e -u "$CEN_OPT_USER" -x -- "$DAT_VENV/bin/hass" $verb
}

# ------------------------------------------------------------------------------
# Home Assistant shell: -no args-
# ------------------------------------------------------------------------------
actionShell() {
    check_installed || return
    folder -c -f "$DAT_BASE"
    system -e sudo -u "$CEN_OPT_USER" -H -s
}

# ------------------------------------------------------------------------------
# show status: -no args-
# ------------------------------------------------------------------------------
actionStatus() {
    check_installed || return
    local word sise enab

    system -q systemctl is-enabled "$DAT_SERV" && enab=1

    [ -n "$enab" ] && sise=$"enabled" || sise=$"not enabled"
    [ -f "$DAT_ENAB" ] && word=$"on" || word=$"off"
    message -a -p $"Autorun: %s   Service: %s" "$word" "$sise"

    [ -z "$enab" ] && return
    message -a
    system -e systemctl status "$DAT_SERV"
}

# ------------------------------------------------------------------------------
# run systemctl: -no args-
# ------------------------------------------------------------------------------
actionSystemctl() {
    check_installed || return

    # centaurisysinit uses 'centaurihass --quiet --force start' ...
    local temp
    if [ -n "$CEN_OPT_FORCE" ] ; then
        if [ "$CEN_ACTION" = 'start' ] && [ ! -e "$DAT_ENAB" ] ; then
            temp=1 ; create -- "$DAT_ENAB"          # enable temporarily
        fi
    elif [ ! -e "$DAT_ENAB" ] ; then
        error -m "Service '$DAT_SERV' is not enabled. Please" \
                 "run '$CEN_NAME auto on' to enable or use option '--force'"
        return
    fi

    local list=("$DAT_SERV") coun=30
    [ -d '/etc/mosquitto' ] && list+=('mosquitto')
    trace -a -c "Start services" "${list[*]}"
    system -e -p -z systemctl --no-block "$CEN_ACTION" "${list[@]}"
    [ -n "$temp" ] && remove -- "$DAT_ENAB"
}

# ------------------------------------------------------------------------------
# uninstall Home Assistant: -no args-
# ------------------------------------------------------------------------------
actionUninst() {
    if [ ! -d "$DAT_VENV" ] ; then
        warning $"No known '$DAT_NAME' installation" ; return
    fi
    folder -c -f "$DAT_VENV"
    confirm -n $"Uninstall $DAT_NAME" || return
    remove -d -- bin/ cache/ include/ lib/ share/ pyvenv.cfg LICENSE
    actionAutorun off
    message -a -p $"Please remove folder '%s' and user '%s' manually" "$DAT_VENV" "$CEN_OPT_USER"
}

# ------------------------------------------------------------------------------
# upgrade Home Assistant: -no args-
# ------------------------------------------------------------------------------
actionUpgrade() {
    check_installed || return
    embed -r -t -u "$CEN_OPT_USER" -v -y -z -- "$CEN_NAME" \
                    ${CEN_OPT_SILENT:+--silent} setup upgrade
}

# ------------------------------------------------------------------------------
# Get version info
# ------------------------------------------------------------------------------
actionVersion() {
    vers_quirk 0
    message -p $"Versions: %s (HomeAssistant)  %s (Python)" "$DAT_HAVER" "$DAT_PYVER"
}

# ------------------------------------------------------------------------------
# Show web interface: [<url>]
# ------------------------------------------------------------------------------
actionWeb() {
    context -g 1                                # always try gui mode
    local wurl="${1:--}" mode

    case "$wurl" in
    http://*:[0-9]*)
        ;;
    https://*:[0-9]*)
        ;;
    http://*)
        wurl+=':8123'
        ;;
    https://*)
        wurl+=':8123'
        ;;
    *:[0-9]*)
        wurl="http://$wurl"
        ;;
    -)  if [ -f "$DAT_ENAB" ] && system -q systemctl is-enabled "$DAT_SERV" ; then
            if ! embed centauriroute wait localhost 8123 30 ; then
                error $"Local '$DAT_NAME' instance not responding" ; return
            fi
            wurl="http://localhost:8123"
        elif nethost "$DAT_NAME" || nethost 'hass' ; then
            wurl="http://$_nethost_ip:8123"
        else
            invoke -e $"Please specify the '$DAT_NAME' URL to use" ; return
        fi
        ;;
    *)  wurl="http://$wurl:8123"
    esac

    embed -x -v centaurilauncher --terminal view "$wurl"
}

# ------------------------------------------------------------------------------
# option parsing: <option> [<argument>]
# ------------------------------------------------------------------------------
options() {
    case "$1" in

    -Q|--quir|--quirk)
        optarg 'quirk'      -       -n ;;       # numeric arg
    -U|--use|--user)
        optarg 'user'       -       -t ;;       # any text
    -V|--vers*)
        optarg 'version'    -       '(20[0-9][0-9]\.[0-9]+\.[0-9])|-' ;;

    esac
}

# ------------------------------------------------------------------------------
# action parsing: <verb> <argument>...
# ------------------------------------------------------------------------------
actions() {
    case "$1" in

    aut*)
        invoke -r 'autorun' -        0 1 ;;     # one optional arg
    dep*)
        invoke -r 'deps'    -          0 ;;     # no args
    ins*)
        invoke -r 'install' -          0 ;;     # no args
    run)
        invoke -r 'run'     -          0 ;;     # no args
    set*)
        invoke    'setup'   -          1 ;;     # one optional arg
    sh*|log*)
        invoke -r 'shell'   -          0 ;;     # no args
    uni*)
        invoke -r 'uninst'  -          0 ;;     # no args
    upg*)
        invoke    'upgrade' -          0 ;;     # no args
    web)
        invoke    'web'     -        0 1 ;;     # one optional arg

    ver*)
        invoke    'version' -          0 ;;

    status)
        invoke    -         -          0 ;;     # no args
    start|stop|restart)
        invoke -r -  actionSystemctl   0 ;;     # no args
    esac
}

# ------------------------------------------------------------------------------
# usage info
# ------------------------------------------------------------------------------
usage() {
    usageset \
        -o - \
        -o '-Q --quirk   <bits>'  $"a bit mask of quirks to be applied" \
        -o '-U --user    <user>'  $"specify a different user (default: $DAT_NAME)" \
        -o '-V --version <vers>'  $"$DAT_NAME version (default: $CEN_OPT_VERSION)" \

    usageset \
        -a 'autorun      <auto>'  $"behaviour of service '$DAT_SERV'" \
        -a 'deps'                 $"install build dependencies" \
        -a 'install'              $"install $DAT_NAME core" \
        -a 'run'                  $"run $DAT_NAME 'hass' binary" \
        -a 'setup        <what>'  $"[internal] called by 'install' and 'upgrade'" \
        -a 'shell'                $"open a shell as user $DAT_NAME" \
        -a 'uninstall'            $"uninstall $DAT_NAME" \
        -a 'upgrade'              $"upgrade $DAT_NAME" \
        -a 'web         [<url>]'  $"show $DAT_NAME web interface" \
        -a - \
        -a 'start'                $"run ""'systemctl start $DAT_SERV'" \
        -a 'status'               $"... ""'systemctl status $DAT_SERV'" \
        -a 'stop'                 $"... ""'systemctl stop $DAT_SERV'" \

    usageset \
        -p '<auto>'               $"one of: on off status" \
        -p '<bits>'               $"1 - https://github.com/pascallj/python3.x-backport'" \
        -p '<user>'               $"linux user name" \
        -p '<url>'                $"something like 'http://your-host:8123'" \
        -p '<vers>'               $"$DAT_NAME version to install" \

    usageset \
        -t $"To start Homeassistant Core at boot time as a service enter:"\
        -t - \
        -t "°   $CEN_NAME autorun on        # "$"enable service" \
        -t "°   $CEN_NAME autorun off       # "$"disable service" \
        -t - \
        -t $"Action 'autorun' also creates or removes the '${DAT_ENAB##*/}'" \
        -t $"file that is checked by the service as a start condition." \
        -t - \
        -t $"Run 'centaurisysinit default $DAT_NAME' if you want your machine to" \
        -t $"start in kiosk mode with $DAT_NAME web interface at boot time." \

    usageset \
        -e $"# A full build on a raspberry pi can take about one hour, in particular" \
        -e $"# the first 'run'. Try this command line and be patient:" \
        -e ". deps -- install -- run" \
        -e - \
        -e $"# Release upgrade via pip and restart:" \
        -e ". upgrade -- restart" \

}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end

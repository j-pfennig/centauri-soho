#!/bin/bash
#-------------------------------------------------------------------------------
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2007-2022; BSD License"
CEN_TITLE="Tool to retrieve Network Names"

[ "${CEN_ROOT:-.}" = "." ] && CEN_ROOT="/var/centauri"    # installation folder
DAT_VAR_LIB="$CEN_ROOT/persistent"
DAT_VAR_RUN="$CEN_ROOT/transient"

get_status() {
    [ -n "$CEN_NET_MODE" ] && return
    [ -r "$DAT_VAR_RUN/network_status" ] || return 1
    . "$DAT_VAR_RUN/network_status"
}

get_config() {
    [ -n "$CEN_NET_DOMAIN" ] && return 0
    [ -r "$DAT_VAR_LIB/centaurinetcfg" ] || return 1
    . "$DAT_VAR_LIB/centaurinetcfg"
}

get_switch() {
    [ -n "$DAT_SWITCH_MODE" ] && return 0
    [ -r "$DAT_VAR_RUN/centauriswitch" ] || return 1
    . "$DAT_VAR_RUN/centauriswitch"
}

out_qual() {
    case "$1" in
    ""|-)       echo "-"  ;;
    *.*)        echo "$1" ;;
    *)          echo "$1$DAT_QNAME"
    esac
}

do_server() {
    get_status
    local nout="$CEN_NET_MASTER"                # active server
    local nsvr="$CEN_NET_SERVER"                # nick name or guest server

    # known status
    if [ -n "$nout" ] ; then                    # have server...
        [ "$1" = "n" ] && nout="$nsvr"          # server nick name
        out_qual "$nout"

    # want active server
    elif [ "$1" = "a" ] ; then
        echo "-"                                # no active server
    # want server nick name
    elif [ "$1" = "n" ] ; then
        do_names n
    # want any server (guest or master)
    elif [ -n "$nsvr" ] ; then
        out_qual "$nsvr"                        # guest server
    else
        do_homedns q || do_names n
    fi
}

do_names() {
    if ! get_config ; then
        echo "-"
    elif [ "$1" = "n" ] ; then
        echo "${CEN_NET_SERVER_GEN}$DAT_QNAME"
    else
        local name nout stab=$'\t'
        for name in "${CEN_NET_SERVERS[@]}" ; do
            nout+="$stab$name$DAT_QNAME"
        done
        nout="${nout:1}"
        echo "${nout:--}"
    fi
}

do_domain() {
    get_config
    [ -n "$CEN_NET_DOMAIN" ] || CEN_NET_DOMAIN=$(hostname --domain)
    [ -n "$CEN_NET_DOMAIN" ] || CEN_NET_DOMAIN=$(domainname)
    echo "${CEN_NET_DOMAIN:--}"
}

do_config() {
    get_config
    echo "${CEN_NET_ADDR_METHOD:-manual}"
}

do_iplist() {
    get_config
    local name nout stab=$'\t'
    for name in "${CEN_NET_ADDR_IPLIST[@]}" ; do
        nout+="$stab$name"
    done
    nout="${nout:1}" ; echo "${nout:--}"
}

do_stat() {
    get_status
    if [ "$1" = "m" ] ; then
        echo "${CEN_NET_MODE:-UNKNOWN}"
    else
        echo "${CEN_NET_ROLE:-UNKNOWN}"
    fi
}

do_homedns() {
    get_config
    local key val vign ndom nnam arg1="$1"

    # am I a server?
    for key in "${CEN_NET_SERVERS[@]}" ; do
        [ "$HOSTNAME" = "$key" ] || continue
        [ "$arg1" != "q" ] && echo "${CEN_NET_SERVER_GEN}$DAT_QNAME"
        return 0
    done

    # parse resolv.conf, get domain and 1st nameserver
    if [ -r /etc/resolv.conf ] ; then
        while read key val vign ; do
            if [ "$key" = "search" -o "$key" = "domain" ] ; then
                ndom="$val"
            elif [ "$key" = "nameserver" ] ; then
                # is this a local address?
                for vign in '127.0.0.1' '::1' "${CEN_NET_ADDR_IPLIST[@]}" - ; do
                    [ "$val" = "$vign" ] && break
                done
                # must be in router mode to be guest of this host ...
                if [ "$vign" != "-" ] ; then
                    get_switch
                    [ "$DAT_SWITCH_MODE" = "router" ] || continue
                    val="$CEN_NET_ADDR_IPLIST"          # use 1st local address
                fi
                nnam="$val" ; break
            fi
        done </etc/resolv.conf
    fi
    if [ -z "$ndom$nnam" ] ; then
        [ "$arg1" = "q" ] && return 1
        echo "local" ; return 0
    fi

    # loop over homedns entries in config
    for val in "${CEN_NET_HOMEDNS[@]}" ; do
        set -f ; set -- $val ; set +f
        [ "$1" != "-" -a "$1" != "$ndom" ] && continue  # filter by domain
        [ "$2" != "-" -a "$2" != "$nnam" ] && continue  # filter by ns ip-address
        key="$3" ; [ -z "$DAT_QNAME" ] && key="${3%%.*}"
        echo "$key" ; return 0
    done
    [ "$arg1" != "q" ] && echo "-" ; return 1
}

do_help() {
echo "usage: ${0##*/} <option>...

       $CEN_TITLE.

options:
       -A --active   active server name (can be guest server)
       -C --config   iface config method (dhcp, nm, static, manual)
       -D --domain   configured domain name
       -H --homedns  get home/guest server from dns configuration
       -I --iplist   list of configured ip addresses
       -M --mode     current mode (MASTER, SLAVE, GUEST, CLIENT, SINGLE, UNKNOWN)
       -N --nick     configured server name
       -Q --qualify  output qualified host names (use before other options)
       -R --role     current role (PRIMARY, SECONDARY, WORKSTATION, UNKNOWN)
       -S --servers  configured server name(s)
       -Y --any      active server -or- guest server -or- configured server

Without options "--any" is assumed. Multiple options can be combined.
"
}

[ "${1::5}" = "--emb" ] && shift
[ "$#" = 0 ] && set -- --any
for DAT_OPTION in "$@" ; do
    case "$DAT_OPTION" in
    -A|--act*)	do_server a ;;
    -C|--con*)  do_config ;;
    -D|--dom*)  do_domain ;;
    -H|--hom*)  do_homedns ;;
    -I|--ipl*)  do_iplist ;;
    -M|--mod*)  do_stat m ;;
    -N|--nic*)	do_server n ;;
    -R|--rol*)  do_stat ;;
    -Q|--qua*)  DAT_QNAME=".$(do_domain)" ;;
    -S|--ser*)	do_names ;;
    -Y|--any)   do_server ;;
    -d|--dry*)  ;;
    -v|--ver*)  ;;
    --help)     do_help ; exit 0 ;;
    --info)     echo -e "$CEN_TITLE\n0.90\n$CEN_LEGAL" ; exit 0 ;;
    *)          do_help 1>&2 ; exit 1 ;;
    esac
done

#!/usr/bin/bash
# ------------------------------------------------------------------------------
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2019-2024; BSD License"
CEN_TITLE="Create the autoload module _centauri_bash_dyn"

# we cannot use '-a' here ...
PATH+=":${0%/*}" . _centauri_bash_lib -m ext -m iom -m utl -r - '0.25:3' || exit 2

CEN_OPT_BUILTIN=                # see --builtin
CEN_OPT_PATH=                   # see --path
CEN_OPT_DYNAMIC=                # see --dynamic
CEN_OPT_IGNORE=()               # see --ignore
CEN_OPT_NOCUSTOM=               # see --nocustom

# imported
#CEN_DYN_NOLOADABLES=           # don't load loadable modules

DAT_EXTENSIONS=()               # loaded bash extensions
DAT_LOADABLES=('sleep' 'mkdir' 'mkfifo' 'rm' 'rmdir' 'unlink' 'ln' 'realpath' 'stat')

DAT_LIB_USER='_*_*_usr'         # glob pattern for user libraries

# ------------------------------------------------------------------------------
# enable a bash extension
# ------------------------------------------------------------------------------
enable_extension() {
    local _path _user="$CEN_PATHS/usr"

    # try to enable via BASH_LOADABLES_PATH 1st, then custom list...
    if ! enable -a "\$_func" &>/dev/null ; then
        for _path in lib/bash lib64/bash lib32/bash - ; do
            _path="$_user/$_path"
            [ "$_path" = '-' ] && return 1
            [ -r "$_path/$1" ] && enable -f "$_path/$1" "$1" && break
        done
    fi

    # run compatibility tests
    case "$1" in
    realpath)
            builtin realpath -q -a _path -s '/tmp' || return 1
            [ "$_path" -ef '/tmp' ] || return 1 ;;
    rm)
            builtin rm -rf "/tmp/${CEN_NAME}_dummy_$$" || return 1 ;;
    esac >/dev/null 2>&1

    # ok, add to loadables
    DAT_EXTENSIONS+=("$1() { _cen_dyn_builtin $1 \"\$@\" ; }")
    return 0
}

# ------------------------------------------------------------------------------
# Helper to generate proxy functions: -no args-
# ------------------------------------------------------------------------------
proxy_functions() {
    local curr
    for item in "${funs[@]}" ; do
        item="${item%%(*}"
        func="${item##*:}" ; item="${item%%:*}"
        [ "$item" != "${curr:-$item}" ] && echo ; curr="$item"
        echo "$func() { _cen_dyn_load ${item#_centauri_bash_} \"\$@\" ; }"
    done

    if [ -n "$DAT_EXTENSIONS" ] ; then
        echo
        splitjoin -i DAT_EXTENSIONS
    fi

    echo -e "\n# End"
}

# ------------------------------------------------------------------------------
# The one and only action
# ------------------------------------------------------------------------------
run() {
    system -c -f grep chmod                             # must exist
    local curr item list=()
    folder -c -f "${CEN_OPT_PATH:-$CEN_LIBRARY}"        # set library folder

    if [ "${1:--}" = "-" ] ; then
        shift                                           # skip dummy arg
        [ $# = 0 ] || fatal $"Extra arguments"
        [ -n "$CEN_OPT_NOCUSTOM" ] && DAT_LIB_USER=
        set -- _centauri_bash_??? $DAT_LIB_USER
    fi

    # --- select modules (flag CEN_OPT_DYNAMIC is ignored) ---

    for item in "$@" ; do
        # modules that cannot be autoloaded ...
        case "$item" in
            _centauri_bash_bat|_centauri_bash_dyn|_centauri_bash_lib)
                trace -a -c $"Skipping" "$item"
                continue ;;
        esac
        if [ -e "$item" ] ; then
            list+=("$item")                             # add to result
        elif [ "$item" != "$DAT_LIB_USER" ] ; then
            error $"No such module:" "$item"
        fi
    done
    error -t || return                                  # stop on error

    # --- use grep to find functions ---

    local funs func mesg
    if [ -n "$CEN_OPT_DYNAMIC" ] ; then
        system -f -p -a funs -- grep -E "^[a-z][a-z_]+\(\)" "${list[@]}"
        message -a -c -p $"Dynamic loading" $"Found %s functions" "${#funs[@]}"
    else
        message -a -c $"Dynamic loading" $"Not enabled"
    fi

    # --- enable extensions ---

    if [ -n "$CEN_OPT_BUILTIN" ] ; then
        message -a -c -p $"Bash loadables" $"Checking %s builtins" "${#DAT_LOADABLES[@]}"
        for item in "${DAT_LOADABLES[@]}" ; do
            if listsearch -i CEN_OPT_IGNORE -- "$item" ; then
                mesg=$"Ignored"
            else
                enable_extension "$item" && mesg=$"Enabled" || mesg=$"Failed"
            fi
            message -a -c -- "-    $mesg" "$item"
        done
    else
        message -a -c $"Bash loadables" $"Not enabled"
    fi

    # --- create _centauri_bash_dyn ---

     create -f -t -c '_centauri_bash_dyn' 775 <<!EOF    # create with mode
#!$BASH
# autogenerated by $CEN_NAME - do not edit"

# ------------------------------------------------------------------------------
# _centauri_bash_dyn = centauri-bash-lib: Dynamic Module loading
#
# Call:     only via [[_centauri_bash_lib]] -a
#
#+This module is created by the **autoload** utility at installation time.
# It contains proxy function definitions to dynamically load modules and to
# enable loadable bash builtins.
# ------------------------------------------------------------------------------

CEN_MODULES["_centauri_bash_dyn"]="$CEN_VERSION"

# ------------------------------------------------------------------------------
# Dynamic loading + Dynamic loading of centauri-bash-lib modules
#
#+General:  The library is split into modules and these modules need to be loaded
#           somehow. The main module [[_centauri_bash_lib]] must be loaded explicitly
#           from the user script. For additional modules there exist four methods
#           of loading them:
#
#       (1) _centauri_bash_lib -m option: load a module by 3 letter name
#       (2) _centauri_bash_lib -g option: [[_centauri_bash_con]] or [[_centauri_bash_win]]
#       °   _centauri_bash_lib -v option: [[_centauri_bash_svc]] syslog/service
#       (3) _centauri_bash_lib -a option: autoload via [[_centauri_bash_dyn]]
#       (4) explicit loading via [[embed()]] option -m
#
# Examples: Loading [[_centauri_bash_win]] using method (1):
#.          PATH+=":\${0%/*}" . _centauri_bash_lib -m win "\$0" "0.00" || exit 2
#
#           Explicitly loading [[_centauri_bash_win]] using method (4):
#.          embed -m _centauri_bash_win
#
#+Options:  At load time options can be passed to a module. This either happens
#           implicitly (method 2) or explicitly (method 4). See [[embed()]]. The
#           available options are documented in the description of each module.
#
# Limits:   Some modules cannot be autoloaded:
#
#           [[_centauri_bash_dyn]] - must be loaded via "_centauri_bash_lib -a"
#           [[_centauri_bash_lib]] - must be loaded by user script
#           [[_centauri_bash_dbg]] - debug module: use "embed _centauri_bash_dbg -m -a"
#                                    to debug [[main()]] and [[options()]]
#
#+          For some modules an explicit load (before invoking [[main()]]) adds command
#           line options:
#
#           [[_centauri_bash_bat]] - use **_centauri_bash_lib -m bat**
#           [[_centauri_bash_con]] - use **_centauri_bash_lib -m con** or **-g**
#           [[_centauri_bash_iom]] - use **embed -m _centauri_bash_iom <option>...**
#           [[_centauri_bash_mnt]] - use **embed -m _centauri_bash_mnt <option>...**
#           [[_centauri_bash_tra]] - use **_centauri_bash_lib -m tra**
#           [[_centauri_bash_win]] - use **_centauri_bash_lib -m win** or **-g**
#
#+Setup:    The [[_centauri_bash_dyn]] module, that handles autoload, is generated
#           using the program **$CEN_NAME**. Usually called as (see help for [[builtin]]):
#
#           > **\$CEN_ROOT/library/$CEN_NAME --builtin**
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Builtin + Using loadable bash builtins
#
#+General:  The library tries to avoid calls to external (e.g. non-builtin) tools
#           whenever possible. Bash has a lot of builtins, see "help°enable". For
#           your Linux distribution some extra builtins (bash examples) may be
#           provided (on a Debian system use "apt°install°bash-builtins"). The
#           library will use installed builtins for **mkdir**, **rmdir**, **rm**,
#           **ln**, **unlink**, **mkfifo**,  **sleep** and **realpath**.
#
#+          The "\$CEN_ROOT/library/$CEN_NAME" tool can generate wrappers that
#           attempt to autoload bash builtins, not causing harm if a builtin is
#           not installed. See **$CEN_NAME** option --builtin.
#
#+Warnings: (1) The builtins coming with bash have less functionality than the
#           corresponding GNU tools. [[_centauri_bash_ext]] is aware of this and
#           uses builtins in a safe way.
#
#.          # For example builtin 'ln' does not support option '-r'
#.                              # per default system does not use builtins ...
#.          system -- ln -s -r something unsafe
#.          °                   # but sysrun needs option -i ...
#.          sysrun -i -- ln -s -r something unsafe
#
#+          (2) Builtins are only loaded if [[_centauri_bash_dyn]] is enabled
#               via CEN_FEATURE_A (library option -a).
#
#.          # add option '-a' to load _centauri_bash_dyn
#.          PATH+=":\${0%/*}" . _centauri_bash_lib -a -d -r "\$0" "0.00:1" || exit 2
#
#+          (3) Builtins are best used via [[sysrun()]] or by the library code
#           itself, for example [[move()]], [[remove()]] or [[symlink()]].
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Preprocessing + Preprocessing modules sources to reduce startup time
#
#+General:  The modules contain a lot of documentation and other comments. In
#           order to load faster, these can be removed or extracted using [[uglify]].
#           For script code this tool also removes extra spaces and replaces some
#           strings that are noted using quotes by strings using apostrophes. When
#           preprocessing documentation only the necessary data is retained.
#
#+          The resulting files receive a ".p" (script) or ".d" (documentation)
#           ending. Preprocessed code is loaded via proxy or [[_centauri_bash_lib]]
#           whenever the preprocessed file is newer than the source. For documentation
#           [[_centauri_bash_doc]] does the same with ".d" files.
#
#           [[uglify]] preserves line numbers in order to help debugging.
#
# Setup:    > **\$CEN_ROOT/library/uglify -U -D**
#
#+Warning:  [[uglify]] is stupid. It well understands the coding style of the library
#           modules but may fail to process other coding styles correctly.
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Custom Modules + Extending _centauri_bash_lib with custom library modules
#
# General:  Two kinds of custom library modules are supported
#
#           (1) in-tree
#               - placed inside **\$CEN_LIBRARY**
#               - naming pattern must be '*_*_usr'
#               - dynamic loading is supported
#               - recognized by **autoload**, **uglify** and **centaurihelp**
#
#           (2) out-of-tree
#               - can be at any place
#               - can have any name
#               - must be loaded explicitly
#               - help needs **centaurihelp --use=**<module>
#
#+          The module kind is defined by its installation location. The code
#           itself makes no difference (except for the naming pattern).
#
# Example:  See [[centauricreate]] and **\$CEN_TOOLS/templates/_custom_module_usr**
# ------------------------------------------------------------------------------

[ "\$1" = "-f" ] ||
    fatal "Cannot load '_centauri_bash_dyn' via embed, use '_centauri_bash_lib -a'"
!EOF

[ -n "$CEN_OPT_DYNAMIC" ] &&
    create -f -c -a '_centauri_bash_dyn' <<!EOF         # append to file

# dynamic loader: <module> <arg>...
_cen_dyn_load() {
    set +x
    local _stat=0 _modu="\$1" _func="\${FUNCNAME[1]}" _snot="\$CEN_NOTRACE" ; CEN_NOTRACE=:
    [ "\${#_modu}" = 3 ] && _modu="_centauri_bash_\$_modu"
    # \$CEN_DEBUG trace -a "dynamic load '\$_modu' for '\$_func'"
    unset -f "\$_func"          # delete proxy
    embed -m "\$_modu" -A       # load module
    shift
    if [ -z "\$_snot" ] ; then
        CEN_NOTRACE= ; set -x
    fi
    \$_func "\$@" || _stat=\$?  # call real function
    return \$_stat
}

# enable builtin: <name> [<args>] (FUNCNAME does not work here)
_cen_dyn_builtin() {
    local _path _func="\$1" _user="\$CEN_PATHS/usr" ; shift
    unset -f \$_func                         # delete proxy
    # try to enable via BASH_LOADABLES_PATH 1st, then custom list...
    if ! enable -a "\$_func" &>/dev/null ; then
        for _path in lib lib64 lib32 - ; do
            if [ "\$_path" = '-' ] ; then    # builtin not found
               [ \$# = 0 ] && return 1       # check for builtin FAILED
               break
            fi
            _path="\$_user/\$_path/bash"
            [ -r "\$_path/\$_func" ] || continue
            [ -n "\$CEN_DYN_NOLOADABLES" ] && break
            enable -f "\$_path/\$_func" "\$_func" &>/dev/null && break
        done
    fi
    [ \$# = 0 ] && return 0                  # check for builtin OK
    \$_func "\$@"                             # run builtin/tool return status
}

$(proxy_functions)
!EOF
    message -a -c $"Created module" "_centauri_bash_dyn"
}

# ------------------------------------------------------------------------------
# option parsing: <option> [<argument>]
# ------------------------------------------------------------------------------
options() {
    case "$1" in
        # end of option processing
    '') [ "${#CEN_OPT_IGNORE[*]}" -gt 0 ] && CEN_OPT_BUILTIN=1
        [ -n "$CEN_OPT_NOCUSTOM" ] && CEN_OPT_DYNAMIC=1
        [ -n "$CEN_OPT_BUILTIN" ] && CEN_OPT_DYNAMIC=1
        ;;

    -B|--bui*)
        optarg 'builtin'    -       ;;          # a flag
    -D|--dyn*)
        optarg 'dynamic'    -       ;;          # a flag
    -I|--ign*)
        optarg 'ignore'     []  -t  ;;          # text array
    -N|--noc*)
        optarg 'nocustom'   -       ;;          # a flag
    -P|--pat|--path)
        optarg 'path'       -   -t  ;;          # text
    esac
}

# ------------------------------------------------------------------------------
# Print usage info
# ------------------------------------------------------------------------------
usage() {
    usagecat <<!EOF
$CEN_USE_HEADER

$CEN_USE_OPTIONS

       -B --builtin         enable loadable bash builtins (implies --dynamic)
       -D --dynamic         enable dynamic module loading
       -I --ignore  <name>  ignore loadable, repeatable   (implies --builtin)
       -N --nocustom        exclude user custom modules   (implies --dynamic)
       -P --path    <fldr>  specify an alternate library path

Dynamic module loading has no flaws and should always be enabled. Loadable
buildins usually work fine but are often refered to as 'examples'. $CEN_NAME
has a builtin list of loadables that are supported by the library. $CEN_NAME
only enables a builtin if loading and a functionality test succeed.

examples:
       The recommended usage is:

           $ $CEN_NAME --builtin     # include all modules, use all loadables
           $ $CEN_NAME --dynamic     # include all modules, don't use loadables

       To generate autoload for selected modules (use no loadables):

           $ $CEN_NAME -D <mod>...   # where <mod> is a 3 letter name

       Disable some loadable builtins, include all modules ...

           $ $CEN_NAME -I realpath -I ln
!EOF
}

# ------------------------------------------------------------------------------
# Finally call the library to execute the script
# ------------------------------------------------------------------------------
main "$@" ; quit

# the end
